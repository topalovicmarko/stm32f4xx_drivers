
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a44  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000bd8  08000bd8  00001bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000be4  08000be4  00001bf4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000be4  08000be4  00001be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000bec  08000bf4  00001bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bec  08000bec  00001bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000bf0  08000bf0  00001bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000bf4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000bf4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001251  00000000  00000000  00001c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000466  00000000  00000000  00002e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  000032d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ef  00000000  00000000  00003428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000229c  00000000  00000000  00003517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018ba  00000000  00000000  000057b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009553  00000000  00000000  0000706d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000105c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000049c  00000000  00000000  00010604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000bc0 	.word	0x08000bc0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000bc0 	.word	0x08000bc0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:

#include <string.h>
#include "stm32f401xx.h"

void delay(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <delay+0x12>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a04      	ldr	r2, [pc, #16]	@ (800020c <delay+0x28>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d9f8      	bls.n	80001f0 <delay+0xc>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	0003d08f 	.word	0x0003d08f

08000210 <SPI2_GPIOInits>:
* PB12 --> SPI2_NSS
* ALT function mode : 5
*/

void SPI2_GPIOInits()
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000216:	4b11      	ldr	r3, [pc, #68]	@ (800025c <SPI2_GPIOInits+0x4c>)
 8000218:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 800021a:	2302      	movs	r3, #2
 800021c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800021e:	2305      	movs	r3, #5
 8000220:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000222:	2300      	movs	r3, #0
 8000224:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000226:	2300      	movs	r3, #0
 8000228:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022a:	2302      	movs	r3, #2
 800022c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800022e:	230d      	movs	r3, #13
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f9a5 	bl	8000584 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800023a:	230f      	movs	r3, #15
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f99f 	bl	8000584 <GPIO_Init>
	//MISO
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000246:	230c      	movs	r3, #12
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f999 	bl	8000584 <GPIO_Init>
}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40020400 	.word	0x40020400

08000260 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000266:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <SPI2_Inits+0x38>)
 8000268:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026a:	2301      	movs	r3, #1
 800026c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800026e:	2301      	movs	r3, #1
 8000270:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;	//generates sclk 2Mhz
 8000272:	2302      	movs	r3, #2
 8000274:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000276:	2300      	movs	r3, #0
 8000278:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800027a:	2300      	movs	r3, #0
 800027c:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI ;	//Hardware slave managment enabled for NSS pin
 8000282:	2300      	movs	r3, #0
 8000284:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fba5 	bl	80009d8 <SPI_Init>
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40003800 	.word	0x40003800

0800029c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	//This is btn gpio configuration
	GpioBtn.pGPIOx = GPIOC;
 80002a2:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <GPIO_ButtonInit+0x2c>)
 80002a4:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002a6:	230d      	movs	r3, #13
 80002a8:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002aa:	2300      	movs	r3, #0
 80002ac:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ae:	2302      	movs	r3, #2
 80002b0:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b2:	2300      	movs	r3, #0
 80002b4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f963 	bl	8000584 <GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020800 	.word	0x40020800

080002cc <main>:


int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 80002d2:	4a20      	ldr	r2, [pc, #128]	@ (8000354 <main+0x88>)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_ButtonInit();
 80002dc:	f7ff ffde 	bl	800029c <GPIO_ButtonInit>

	//This function is used to initialize the GPIO pinns to behave as SPI2 pins
	SPI2_GPIOInits();
 80002e0:	f7ff ff96 	bl	8000210 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002e4:	f7ff ffbc 	bl	8000260 <SPI2_Inits>
	 * Making SSOE 1 does NSS output enable
	 * The NSS pin is automacally managed by the hardware
	 * i.e when SPE=1 , NSS will be pulled to low
	 * and NSS pinn will be high when SPE=0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 80002e8:	2101      	movs	r1, #1
 80002ea:	481b      	ldr	r0, [pc, #108]	@ (8000358 <main+0x8c>)
 80002ec:	f000 fc29 	bl	8000b42 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 80002f0:	bf00      	nop
 80002f2:	210d      	movs	r1, #13
 80002f4:	4819      	ldr	r0, [pc, #100]	@ (800035c <main+0x90>)
 80002f6:	f000 fae9 	bl	80008cc <GPIO_ReadFromInputPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1f8      	bne.n	80002f2 <main+0x26>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000300:	f7ff ff70 	bl	80001e4 <delay>

		//Enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	4814      	ldr	r0, [pc, #80]	@ (8000358 <main+0x8c>)
 8000308:	f000 fc00 	bl	8000b0c <SPI_PeripheralControl>

		//first send lenght information
		uint8_t dataLen = strlen(user_data);
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff60 	bl	80001d4 <strlen>
 8000314:	4603      	mov	r3, r0
 8000316:	b2db      	uxtb	r3, r3
 8000318:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&dataLen,1);
 800031a:	1cfb      	adds	r3, r7, #3
 800031c:	2201      	movs	r2, #1
 800031e:	4619      	mov	r1, r3
 8000320:	480d      	ldr	r0, [pc, #52]	@ (8000358 <main+0x8c>)
 8000322:	f000 fbbc 	bl	8000a9e <SPI_SendData>

		//To send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff53 	bl	80001d4 <strlen>
 800032e:	4602      	mov	r2, r0
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4619      	mov	r1, r3
 8000334:	4808      	ldr	r0, [pc, #32]	@ (8000358 <main+0x8c>)
 8000336:	f000 fbb2 	bl	8000a9e <SPI_SendData>

		//confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG) );
 800033a:	bf00      	nop
 800033c:	2180      	movs	r1, #128	@ 0x80
 800033e:	4806      	ldr	r0, [pc, #24]	@ (8000358 <main+0x8c>)
 8000340:	f000 fb9a 	bl	8000a78 <SPI_GetFlagStatus>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f8      	bne.n	800033c <main+0x70>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 800034a:	2100      	movs	r1, #0
 800034c:	4802      	ldr	r0, [pc, #8]	@ (8000358 <main+0x8c>)
 800034e:	f000 fbdd 	bl	8000b0c <SPI_PeripheralControl>
	{
 8000352:	e7cd      	b.n	80002f0 <main+0x24>
 8000354:	08000bd8 	.word	0x08000bd8
 8000358:	40003800 	.word	0x40003800
 800035c:	40020800 	.word	0x40020800

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	@ (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	@ (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	@ (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	@ (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	@ (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 fbf3 	bl	8000b78 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000392:	f7ff ff9b 	bl	80002cc <main>

08000396 <LoopForever>:

LoopForever:
  b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	08000bf4 	.word	0x08000bf4
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <GPIO_PeriClockControl>:
 *
 * @Note			-	none
 *
 *******************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003c0:	78fb      	ldrb	r3, [r7, #3]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d162      	bne.n	800048c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a64      	ldr	r2, [pc, #400]	@ (800055c <GPIO_PeriClockControl+0x1a8>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a63      	ldr	r2, [pc, #396]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
				}else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
 80003da:	e0b9      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a61      	ldr	r2, [pc, #388]	@ (8000564 <GPIO_PeriClockControl+0x1b0>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003e4:	4b5e      	ldr	r3, [pc, #376]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e8:	4a5d      	ldr	r2, [pc, #372]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f0:	e0ae      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a5c      	ldr	r2, [pc, #368]	@ (8000568 <GPIO_PeriClockControl+0x1b4>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003fa:	4b59      	ldr	r3, [pc, #356]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fe:	4a58      	ldr	r2, [pc, #352]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000400:	f043 0304 	orr.w	r3, r3, #4
 8000404:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000406:	e0a3      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a58      	ldr	r2, [pc, #352]	@ (800056c <GPIO_PeriClockControl+0x1b8>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000410:	4b53      	ldr	r3, [pc, #332]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000414:	4a52      	ldr	r2, [pc, #328]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041c:	e098      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a53      	ldr	r2, [pc, #332]	@ (8000570 <GPIO_PeriClockControl+0x1bc>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000426:	4b4e      	ldr	r3, [pc, #312]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042a:	4a4d      	ldr	r2, [pc, #308]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 800042c:	f043 0310 	orr.w	r3, r3, #16
 8000430:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000432:	e08d      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a4f      	ldr	r2, [pc, #316]	@ (8000574 <GPIO_PeriClockControl+0x1c0>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800043c:	4b48      	ldr	r3, [pc, #288]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000440:	4a47      	ldr	r2, [pc, #284]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000448:	e082      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a4a      	ldr	r2, [pc, #296]	@ (8000578 <GPIO_PeriClockControl+0x1c4>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000452:	4b43      	ldr	r3, [pc, #268]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000456:	4a42      	ldr	r2, [pc, #264]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800045c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045e:	e077      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a46      	ldr	r2, [pc, #280]	@ (800057c <GPIO_PeriClockControl+0x1c8>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000468:	4b3d      	ldr	r3, [pc, #244]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046c:	4a3c      	ldr	r2, [pc, #240]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 800046e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000472:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000474:	e06c      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a41      	ldr	r2, [pc, #260]	@ (8000580 <GPIO_PeriClockControl+0x1cc>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d168      	bne.n	8000550 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800047e:	4b38      	ldr	r3, [pc, #224]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000482:	4a37      	ldr	r2, [pc, #220]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000488:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048a:	e061      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a33      	ldr	r2, [pc, #204]	@ (800055c <GPIO_PeriClockControl+0x1a8>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 8000494:	4b32      	ldr	r3, [pc, #200]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000498:	4a31      	ldr	r2, [pc, #196]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 800049a:	f023 0301 	bic.w	r3, r3, #1
 800049e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a0:	e056      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000564 <GPIO_PeriClockControl+0x1b0>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 80004aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80004b0:	f023 0302 	bic.w	r3, r3, #2
 80004b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b6:	e04b      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 80004c0:	4b27      	ldr	r3, [pc, #156]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a26      	ldr	r2, [pc, #152]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80004c6:	f023 0304 	bic.w	r3, r3, #4
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004cc:	e040      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a26      	ldr	r2, [pc, #152]	@ (800056c <GPIO_PeriClockControl+0x1b8>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 80004d6:	4b22      	ldr	r3, [pc, #136]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80004dc:	f023 0308 	bic.w	r3, r3, #8
 80004e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e2:	e035      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a22      	ldr	r2, [pc, #136]	@ (8000570 <GPIO_PeriClockControl+0x1bc>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 80004ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 80004f2:	f023 0310 	bic.w	r3, r3, #16
 80004f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f8:	e02a      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000574 <GPIO_PeriClockControl+0x1c0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	4a16      	ldr	r2, [pc, #88]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000508:	f023 0320 	bic.w	r3, r3, #32
 800050c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050e:	e01f      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a19      	ldr	r2, [pc, #100]	@ (8000578 <GPIO_PeriClockControl+0x1c4>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 8000518:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051c:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 800051e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000522:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000524:	e014      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a14      	ldr	r2, [pc, #80]	@ (800057c <GPIO_PeriClockControl+0x1c8>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 800052e:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800053a:	e009      	b.n	8000550 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a10      	ldr	r2, [pc, #64]	@ (8000580 <GPIO_PeriClockControl+0x1cc>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d105      	bne.n	8000550 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000548:	4a05      	ldr	r2, [pc, #20]	@ (8000560 <GPIO_PeriClockControl+0x1ac>)
 800054a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800054e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40020000 	.word	0x40020000
 8000560:	40023800 	.word	0x40023800
 8000564:	40020400 	.word	0x40020400
 8000568:	40020800 	.word	0x40020800
 800056c:	40020c00 	.word	0x40020c00
 8000570:	40021000 	.word	0x40021000
 8000574:	40021400 	.word	0x40021400
 8000578:	40021800 	.word	0x40021800
 800057c:	40021c00 	.word	0x40021c00
 8000580:	40022000 	.word	0x40022000

08000584 <GPIO_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//temp. register
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2101      	movs	r1, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff0c 	bl	80003b4 <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d820      	bhi.n	80005e6 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	2103      	movs	r1, #3
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	400a      	ands	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	6819      	ldr	r1, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	697a      	ldr	r2, [r7, #20]
 80005e0:	430a      	orrs	r2, r1
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	e0cb      	b.n	800077e <GPIO_Init+0x1fa>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d117      	bne.n	800061e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005ee:	4b4b      	ldr	r3, [pc, #300]	@ (800071c <GPIO_Init+0x198>)
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	7912      	ldrb	r2, [r2, #4]
 80005f6:	4611      	mov	r1, r2
 80005f8:	2201      	movs	r2, #1
 80005fa:	408a      	lsls	r2, r1
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a47      	ldr	r2, [pc, #284]	@ (800071c <GPIO_Init+0x198>)
 8000600:	430b      	orrs	r3, r1
 8000602:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000604:	4b45      	ldr	r3, [pc, #276]	@ (800071c <GPIO_Init+0x198>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7912      	ldrb	r2, [r2, #4]
 800060c:	4611      	mov	r1, r2
 800060e:	2201      	movs	r2, #1
 8000610:	408a      	lsls	r2, r1
 8000612:	43d2      	mvns	r2, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4a41      	ldr	r2, [pc, #260]	@ (800071c <GPIO_Init+0x198>)
 8000618:	400b      	ands	r3, r1
 800061a:	6093      	str	r3, [r2, #8]
 800061c:	e035      	b.n	800068a <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	795b      	ldrb	r3, [r3, #5]
 8000622:	2b05      	cmp	r3, #5
 8000624:	d117      	bne.n	8000656 <GPIO_Init+0xd2>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000626:	4b3d      	ldr	r3, [pc, #244]	@ (800071c <GPIO_Init+0x198>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	7912      	ldrb	r2, [r2, #4]
 800062e:	4611      	mov	r1, r2
 8000630:	2201      	movs	r2, #1
 8000632:	408a      	lsls	r2, r1
 8000634:	4611      	mov	r1, r2
 8000636:	4a39      	ldr	r2, [pc, #228]	@ (800071c <GPIO_Init+0x198>)
 8000638:	430b      	orrs	r3, r1
 800063a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800063c:	4b37      	ldr	r3, [pc, #220]	@ (800071c <GPIO_Init+0x198>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	7912      	ldrb	r2, [r2, #4]
 8000644:	4611      	mov	r1, r2
 8000646:	2201      	movs	r2, #1
 8000648:	408a      	lsls	r2, r1
 800064a:	43d2      	mvns	r2, r2
 800064c:	4611      	mov	r1, r2
 800064e:	4a33      	ldr	r2, [pc, #204]	@ (800071c <GPIO_Init+0x198>)
 8000650:	400b      	ands	r3, r1
 8000652:	60d3      	str	r3, [r2, #12]
 8000654:	e019      	b.n	800068a <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	795b      	ldrb	r3, [r3, #5]
 800065a:	2b06      	cmp	r3, #6
 800065c:	d115      	bne.n	800068a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800065e:	4b2f      	ldr	r3, [pc, #188]	@ (800071c <GPIO_Init+0x198>)
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	7912      	ldrb	r2, [r2, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	2201      	movs	r2, #1
 800066a:	408a      	lsls	r2, r1
 800066c:	4611      	mov	r1, r2
 800066e:	4a2b      	ldr	r2, [pc, #172]	@ (800071c <GPIO_Init+0x198>)
 8000670:	430b      	orrs	r3, r1
 8000672:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000674:	4b29      	ldr	r3, [pc, #164]	@ (800071c <GPIO_Init+0x198>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7912      	ldrb	r2, [r2, #4]
 800067c:	4611      	mov	r1, r2
 800067e:	2201      	movs	r2, #1
 8000680:	408a      	lsls	r2, r1
 8000682:	4611      	mov	r1, r2
 8000684:	4a25      	ldr	r2, [pc, #148]	@ (800071c <GPIO_Init+0x198>)
 8000686:	430b      	orrs	r3, r1
 8000688:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	089b      	lsrs	r3, r3, #2
 8000690:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	f003 0303 	and.w	r3, r3, #3
 800069a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000720 <GPIO_Init+0x19c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d04e      	beq.n	8000744 <GPIO_Init+0x1c0>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000724 <GPIO_Init+0x1a0>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d032      	beq.n	8000716 <GPIO_Init+0x192>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000728 <GPIO_Init+0x1a4>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d02b      	beq.n	8000712 <GPIO_Init+0x18e>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <GPIO_Init+0x1a8>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d024      	beq.n	800070e <GPIO_Init+0x18a>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <GPIO_Init+0x1ac>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d01d      	beq.n	800070a <GPIO_Init+0x186>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <GPIO_Init+0x1b0>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d016      	beq.n	8000706 <GPIO_Init+0x182>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a16      	ldr	r2, [pc, #88]	@ (8000738 <GPIO_Init+0x1b4>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d00f      	beq.n	8000702 <GPIO_Init+0x17e>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a15      	ldr	r2, [pc, #84]	@ (800073c <GPIO_Init+0x1b8>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d008      	beq.n	80006fe <GPIO_Init+0x17a>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <GPIO_Init+0x1bc>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d101      	bne.n	80006fa <GPIO_Init+0x176>
 80006f6:	2308      	movs	r3, #8
 80006f8:	e025      	b.n	8000746 <GPIO_Init+0x1c2>
 80006fa:	2300      	movs	r3, #0
 80006fc:	e023      	b.n	8000746 <GPIO_Init+0x1c2>
 80006fe:	2307      	movs	r3, #7
 8000700:	e021      	b.n	8000746 <GPIO_Init+0x1c2>
 8000702:	2306      	movs	r3, #6
 8000704:	e01f      	b.n	8000746 <GPIO_Init+0x1c2>
 8000706:	2305      	movs	r3, #5
 8000708:	e01d      	b.n	8000746 <GPIO_Init+0x1c2>
 800070a:	2304      	movs	r3, #4
 800070c:	e01b      	b.n	8000746 <GPIO_Init+0x1c2>
 800070e:	2303      	movs	r3, #3
 8000710:	e019      	b.n	8000746 <GPIO_Init+0x1c2>
 8000712:	2302      	movs	r3, #2
 8000714:	e017      	b.n	8000746 <GPIO_Init+0x1c2>
 8000716:	2301      	movs	r3, #1
 8000718:	e015      	b.n	8000746 <GPIO_Init+0x1c2>
 800071a:	bf00      	nop
 800071c:	40013c00 	.word	0x40013c00
 8000720:	40020000 	.word	0x40020000
 8000724:	40020400 	.word	0x40020400
 8000728:	40020800 	.word	0x40020800
 800072c:	40020c00 	.word	0x40020c00
 8000730:	40021000 	.word	0x40021000
 8000734:	40021400 	.word	0x40021400
 8000738:	40021800 	.word	0x40021800
 800073c:	40021c00 	.word	0x40021c00
 8000740:	40022000 	.word	0x40022000
 8000744:	2300      	movs	r3, #0
 8000746:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000748:	4b5d      	ldr	r3, [pc, #372]	@ (80008c0 <GPIO_Init+0x33c>)
 800074a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074c:	4a5c      	ldr	r2, [pc, #368]	@ (80008c0 <GPIO_Init+0x33c>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000752:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000754:	7c7a      	ldrb	r2, [r7, #17]
 8000756:	7cbb      	ldrb	r3, [r7, #18]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	fa02 f103 	lsl.w	r1, r2, r3
 800075e:	4a59      	ldr	r2, [pc, #356]	@ (80008c4 <GPIO_Init+0x340>)
 8000760:	7cfb      	ldrb	r3, [r7, #19]
 8000762:	3302      	adds	r3, #2
 8000764:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI -> IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000768:	4b57      	ldr	r3, [pc, #348]	@ (80008c8 <GPIO_Init+0x344>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	7912      	ldrb	r2, [r2, #4]
 8000770:	4611      	mov	r1, r2
 8000772:	2201      	movs	r2, #1
 8000774:	408a      	lsls	r2, r1
 8000776:	4611      	mov	r1, r2
 8000778:	4a53      	ldr	r2, [pc, #332]	@ (80008c8 <GPIO_Init+0x344>)
 800077a:	430b      	orrs	r3, r1
 800077c:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	799b      	ldrb	r3, [r3, #6]
 800078a:	461a      	mov	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	2103      	movs	r1, #3
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	400a      	ands	r2, r1
 80007b4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	6899      	ldr	r1, [r3, #8]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	609a      	str	r2, [r3, #8]

	temp = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	79db      	ldrb	r3, [r3, #7]
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68da      	ldr	r2, [r3, #12]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	2103      	movs	r1, #3
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43db      	mvns	r3, r3
 80007f0:	4619      	mov	r1, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	400a      	ands	r2, r1
 80007f8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	68d9      	ldr	r1, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	430a      	orrs	r2, r1
 8000808:	60da      	str	r2, [r3, #12]

	temp = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	7a1b      	ldrb	r3, [r3, #8]
 8000812:	461a      	mov	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	4619      	mov	r1, r3
 800082a:	2301      	movs	r3, #1
 800082c:	408b      	lsls	r3, r1
 800082e:	43db      	mvns	r3, r3
 8000830:	4619      	mov	r1, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	400a      	ands	r2, r1
 8000838:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6859      	ldr	r1, [r3, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	430a      	orrs	r2, r1
 8000848:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d131      	bne.n	80008b6 <GPIO_Init+0x332>
	{
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	08db      	lsrs	r3, r3, #3
 8000858:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) );
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	7c3a      	ldrb	r2, [r7, #16]
 800086a:	3208      	adds	r2, #8
 800086c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	220f      	movs	r2, #15
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	7c3a      	ldrb	r2, [r7, #16]
 8000884:	4001      	ands	r1, r0
 8000886:	3208      	adds	r2, #8
 8000888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	7c3a      	ldrb	r2, [r7, #16]
 8000892:	3208      	adds	r2, #8
 8000894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7a5b      	ldrb	r3, [r3, #9]
 800089c:	461a      	mov	r2, r3
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	7c3a      	ldrb	r2, [r7, #16]
 80008ae:	4301      	orrs	r1, r0
 80008b0:	3208      	adds	r2, #8
 80008b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40013c00 	.word	0x40013c00

080008cc <GPIO_ReadFromInputPin>:
 *
 * @Note			-
 *
 *******************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001 ) ;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	691a      	ldr	r2, [r3, #16]
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	fa22 f303 	lsr.w	r3, r2, r3
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]

	return value;
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
	...

080008f8 <SPI_PeriClockControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d12b      	bne.n	8000962 <SPI_PeriClockControl+0x6a>
		{
			if(pSPIx == SPI1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a2d      	ldr	r2, [pc, #180]	@ (80009c4 <SPI_PeriClockControl+0xcc>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d106      	bne.n	8000920 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	4a2c      	ldr	r2, [pc, #176]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 8000918:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800091c:	6453      	str	r3, [r2, #68]	@ 0x44
			}else if (pSPIx == SPI4)
			{
				SPI4_PCLK_DI();
			}
		}
}
 800091e:	e04b      	b.n	80009b8 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a2a      	ldr	r2, [pc, #168]	@ (80009cc <SPI_PeriClockControl+0xd4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d106      	bne.n	8000936 <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000928:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	4a26      	ldr	r2, [pc, #152]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 800092e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000932:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000934:	e040      	b.n	80009b8 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI3)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a25      	ldr	r2, [pc, #148]	@ (80009d0 <SPI_PeriClockControl+0xd8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <SPI_PeriClockControl+0x54>
				SPI3_PCLK_EN();
 800093e:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a21      	ldr	r2, [pc, #132]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 8000944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800094a:	e035      	b.n	80009b8 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI4)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <SPI_PeriClockControl+0xdc>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d131      	bne.n	80009b8 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_EN();
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000958:	4a1b      	ldr	r2, [pc, #108]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 800095a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800095e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000960:	e02a      	b.n	80009b8 <SPI_PeriClockControl+0xc0>
			if(pSPIx == SPI1)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a17      	ldr	r2, [pc, #92]	@ (80009c4 <SPI_PeriClockControl+0xcc>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d106      	bne.n	8000978 <SPI_PeriClockControl+0x80>
				SPI1_PCLK_DI();
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 8000970:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000976:	e01f      	b.n	80009b8 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <SPI_PeriClockControl+0xd4>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d106      	bne.n	800098e <SPI_PeriClockControl+0x96>
				SPI2_PCLK_DI();
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	4a10      	ldr	r2, [pc, #64]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 8000986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800098a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800098c:	e014      	b.n	80009b8 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI3)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <SPI_PeriClockControl+0xd8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <SPI_PeriClockControl+0xac>
				SPI3_PCLK_DI();
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a0b      	ldr	r2, [pc, #44]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 800099c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009a2:	e009      	b.n	80009b8 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI4)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <SPI_PeriClockControl+0xdc>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d105      	bne.n	80009b8 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_DI();
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 80009ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b0:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <SPI_PeriClockControl+0xd0>)
 80009b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80009b6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40013000 	.word	0x40013000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40003800 	.word	0x40003800
 80009d0:	40003c00 	.word	0x40003c00
 80009d4:	40013400 	.word	0x40013400

080009d8 <SPI_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	//Peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff86 	bl	80008f8 <SPI_PeriClockControl>

	//Configure SPI_CR1 register
	uint32_t tempreg = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	795b      	ldrb	r3, [r3, #5]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d104      	bne.n	8000a0e <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	e014      	b.n	8000a38 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	795b      	ldrb	r3, [r3, #5]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d104      	bne.n	8000a20 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	e00b      	b.n	8000a38 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	795b      	ldrb	r3, [r3, #5]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d107      	bne.n	8000a38 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a2e:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a36:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the SPI serial clock speed (Baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	799b      	ldrb	r3, [r3, #6]
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	79db      	ldrb	r3, [r3, #7]
 8000a48:	02db      	lsls	r3, r3, #11
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7a1b      	ldrb	r3, [r3, #8]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7a5b      	ldrb	r3, [r3, #9]
 8000a60:	461a      	mov	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <SPI_GetFlagStatus>:
		pSPIx->SR = 0;
		pSPIx->DR = 0;
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <SPI_SendData>:
 *
 * @Note			- This is blocking call
 *
 *******************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000aaa:	e027      	b.n	8000afc <SPI_SendData+0x5e>
	{
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 8000aac:	bf00      	nop
 8000aae:	2102      	movs	r1, #2
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f7ff ffe1 	bl	8000a78 <SPI_GetFlagStatus>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f8      	beq.n	8000aae <SPI_SendData+0x10>

		//2. Check the DFF bit i CR1
		if(pSPIx->CR1 & ( 1 << SPI_CR1_DFF))
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00e      	beq.n	8000ae6 <SPI_SendData+0x48>
		{
			//16 bit dff
			//1. Load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	60da      	str	r2, [r3, #12]
			Len--;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
			Len--;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	e00a      	b.n	8000afc <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	60da      	str	r2, [r3, #12]
			Len--;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1d4      	bne.n	8000aac <SPI_SendData+0xe>
		}
	}
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <SPI_PeripheralControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d106      	bne.n	8000b2c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000b2a:	e005      	b.n	8000b38 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <SPI_SSOEConfig>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d106      	bne.n	8000b62 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f043 0204 	orr.w	r2, r3, #4
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000b60:	e005      	b.n	8000b6e <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f023 0204 	bic.w	r2, r3, #4
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	605a      	str	r2, [r3, #4]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <__libc_init_array>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8000bb0 <__libc_init_array+0x38>)
 8000b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8000bb4 <__libc_init_array+0x3c>)
 8000b7e:	1b64      	subs	r4, r4, r5
 8000b80:	10a4      	asrs	r4, r4, #2
 8000b82:	2600      	movs	r6, #0
 8000b84:	42a6      	cmp	r6, r4
 8000b86:	d109      	bne.n	8000b9c <__libc_init_array+0x24>
 8000b88:	4d0b      	ldr	r5, [pc, #44]	@ (8000bb8 <__libc_init_array+0x40>)
 8000b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8000bbc <__libc_init_array+0x44>)
 8000b8c:	f000 f818 	bl	8000bc0 <_init>
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	10a4      	asrs	r4, r4, #2
 8000b94:	2600      	movs	r6, #0
 8000b96:	42a6      	cmp	r6, r4
 8000b98:	d105      	bne.n	8000ba6 <__libc_init_array+0x2e>
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
 8000b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba0:	4798      	blx	r3
 8000ba2:	3601      	adds	r6, #1
 8000ba4:	e7ee      	b.n	8000b84 <__libc_init_array+0xc>
 8000ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000baa:	4798      	blx	r3
 8000bac:	3601      	adds	r6, #1
 8000bae:	e7f2      	b.n	8000b96 <__libc_init_array+0x1e>
 8000bb0:	08000bec 	.word	0x08000bec
 8000bb4:	08000bec 	.word	0x08000bec
 8000bb8:	08000bec 	.word	0x08000bec
 8000bbc:	08000bf0 	.word	0x08000bf0

08000bc0 <_init>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	bf00      	nop
 8000bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc6:	bc08      	pop	{r3}
 8000bc8:	469e      	mov	lr, r3
 8000bca:	4770      	bx	lr

08000bcc <_fini>:
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	bf00      	nop
 8000bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd2:	bc08      	pop	{r3}
 8000bd4:	469e      	mov	lr, r3
 8000bd6:	4770      	bx	lr
