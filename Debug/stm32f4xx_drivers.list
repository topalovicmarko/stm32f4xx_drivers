
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bdc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d70  08000d70  00002038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d70  08000d70  00002038  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000d70  08000d70  00001d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d78  08000d78  00002038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d78  08000d78  00001d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d7c  08000d7c  00001d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08000d80  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000038  08000db8  00002038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000db8  00002060  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001258  00000000  00000000  00002062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000050f  00000000  00000000  000032ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  000037d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f0  00000000  00000000  00003920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002508  00000000  00000000  00003a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000019db  00000000  00000000  00005f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009ad6  00000000  00000000  000078f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000113c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000488  00000000  00000000  0001140c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00011894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000038 	.word	0x20000038
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d58 	.word	0x08000d58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000003c 	.word	0x2000003c
 80001d0:	08000d58 	.word	0x08000d58

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:

#define MY_ADDR 0x61
#define SLAVE_ADDR 0x68

void delay(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <delay+0x12>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a04      	ldr	r2, [pc, #16]	@ (800020c <delay+0x28>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d9f8      	bls.n	80001f0 <delay+0xc>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	0003d08f 	.word	0x0003d08f

08000210 <I2C1_GPIOInits>:
 * PB6 -> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits()
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000216:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <I2C1_GPIOInits+0x40>)
 8000218:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 800021a:	2302      	movs	r3, #2
 800021c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800021e:	2301      	movs	r3, #1
 8000220:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000222:	2301      	movs	r3, #1
 8000224:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000226:	2304      	movs	r3, #4
 8000228:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022a:	2302      	movs	r3, #2
 800022c:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_NO_6;
 800022e:	2306      	movs	r3, #6
 8000230:	727b      	strb	r3, [r7, #9]
	GPIO_Init(&I2CPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f97b 	bl	8000530 <GPIO_Init>

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_NO_7;
 800023a:	2307      	movs	r3, #7
 800023c:	727b      	strb	r3, [r7, #9]
	GPIO_Init(&I2CPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f975 	bl	8000530 <GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020400 	.word	0x40020400

08000254 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000258:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <I2C1_Inits+0x2c>)
 800025a:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <I2C1_Inits+0x30>)
 800025c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <I2C1_Inits+0x2c>)
 8000260:	2201      	movs	r2, #1
 8000262:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000264:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <I2C1_Inits+0x2c>)
 8000266:	2261      	movs	r2, #97	@ 0x61
 8000268:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800026a:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <I2C1_Inits+0x2c>)
 800026c:	2200      	movs	r2, #0
 800026e:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000270:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <I2C1_Inits+0x2c>)
 8000272:	4a05      	ldr	r2, [pc, #20]	@ (8000288 <I2C1_Inits+0x34>)
 8000274:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000276:	4802      	ldr	r0, [pc, #8]	@ (8000280 <I2C1_Inits+0x2c>)
 8000278:	f000 fc26 	bl	8000ac8 <I2C_Init>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000054 	.word	0x20000054
 8000284:	40005400 	.word	0x40005400
 8000288:	000186a0 	.word	0x000186a0

0800028c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	//This is btn gpio configuration
	GpioBtn.pGPIOx = GPIOC;
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <GPIO_ButtonInit+0x2c>)
 8000294:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000296:	230d      	movs	r3, #13
 8000298:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029a:	2300      	movs	r3, #0
 800029c:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800029e:	2302      	movs	r3, #2
 80002a0:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a2:	2300      	movs	r3, #0
 80002a4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f941 	bl	8000530 <GPIO_Init>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020800 	.word	0x40020800

080002bc <main>:

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	GPIO_ButtonInit();
 80002c0:	f7ff ffe4 	bl	800028c <GPIO_ButtonInit>

	//I2C pin inits
	I2C1_GPIOInits();
 80002c4:	f7ff ffa4 	bl	8000210 <I2C1_GPIOInits>

	//I2C peripheral configuration
	I2C1_Inits();
 80002c8:	f7ff ffc4 	bl	8000254 <I2C1_Inits>

	//Enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002cc:	2101      	movs	r1, #1
 80002ce:	480b      	ldr	r0, [pc, #44]	@ (80002fc <main+0x40>)
 80002d0:	f000 fb29 	bl	8000926 <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 80002d4:	bf00      	nop
 80002d6:	210d      	movs	r1, #13
 80002d8:	4809      	ldr	r0, [pc, #36]	@ (8000300 <main+0x44>)
 80002da:	f000 facd 	bl	8000878 <GPIO_ReadFromInputPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f8      	bne.n	80002d6 <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002e4:	f7ff ff7e 	bl	80001e4 <delay>

		//Send some data to the slave
		I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*)some_data), SLAVE_ADDR);
 80002e8:	4806      	ldr	r0, [pc, #24]	@ (8000304 <main+0x48>)
 80002ea:	f7ff ff73 	bl	80001d4 <strlen>
 80002ee:	4602      	mov	r2, r0
 80002f0:	2368      	movs	r3, #104	@ 0x68
 80002f2:	4904      	ldr	r1, [pc, #16]	@ (8000304 <main+0x48>)
 80002f4:	4804      	ldr	r0, [pc, #16]	@ (8000308 <main+0x4c>)
 80002f6:	f000 fca8 	bl	8000c4a <I2C_MasterSendData>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 80002fa:	e7eb      	b.n	80002d4 <main+0x18>
 80002fc:	40005400 	.word	0x40005400
 8000300:	40020800 	.word	0x40020800
 8000304:	20000000 	.word	0x20000000
 8000308:	20000054 	.word	0x20000054

0800030c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	@ (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000310:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	@ (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	@ (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	@ (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	@ (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	@ (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 fce9 	bl	8000d10 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800033e:	f7ff ffbd 	bl	80002bc <main>

08000342 <LoopForever>:

LoopForever:
  b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000350:	08000d80 	.word	0x08000d80
  ldr r2, =_sbss
 8000354:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000358:	20000060 	.word	0x20000060

0800035c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC_IRQHandler>
	...

08000360 <GPIO_PeriClockControl>:
 *
 * @Note			-	none
 *
 *******************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800036c:	78fb      	ldrb	r3, [r7, #3]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d162      	bne.n	8000438 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a64      	ldr	r2, [pc, #400]	@ (8000508 <GPIO_PeriClockControl+0x1a8>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800037a:	4b64      	ldr	r3, [pc, #400]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037e:	4a63      	ldr	r2, [pc, #396]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6313      	str	r3, [r2, #48]	@ 0x30
				}else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
 8000386:	e0b9      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a61      	ldr	r2, [pc, #388]	@ (8000510 <GPIO_PeriClockControl+0x1b0>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000390:	4b5e      	ldr	r3, [pc, #376]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000394:	4a5d      	ldr	r2, [pc, #372]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000396:	f043 0302 	orr.w	r3, r3, #2
 800039a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039c:	e0ae      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a5c      	ldr	r2, [pc, #368]	@ (8000514 <GPIO_PeriClockControl+0x1b4>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003a6:	4b59      	ldr	r3, [pc, #356]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	4a58      	ldr	r2, [pc, #352]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80003ac:	f043 0304 	orr.w	r3, r3, #4
 80003b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b2:	e0a3      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a58      	ldr	r2, [pc, #352]	@ (8000518 <GPIO_PeriClockControl+0x1b8>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003bc:	4b53      	ldr	r3, [pc, #332]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c0:	4a52      	ldr	r2, [pc, #328]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80003c2:	f043 0308 	orr.w	r3, r3, #8
 80003c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c8:	e098      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a53      	ldr	r2, [pc, #332]	@ (800051c <GPIO_PeriClockControl+0x1bc>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003d2:	4b4e      	ldr	r3, [pc, #312]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	4a4d      	ldr	r2, [pc, #308]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80003d8:	f043 0310 	orr.w	r3, r3, #16
 80003dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003de:	e08d      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a4f      	ldr	r2, [pc, #316]	@ (8000520 <GPIO_PeriClockControl+0x1c0>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003e8:	4b48      	ldr	r3, [pc, #288]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ec:	4a47      	ldr	r2, [pc, #284]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f4:	e082      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a4a      	ldr	r2, [pc, #296]	@ (8000524 <GPIO_PeriClockControl+0x1c4>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003fe:	4b43      	ldr	r3, [pc, #268]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000402:	4a42      	ldr	r2, [pc, #264]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000408:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040a:	e077      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a46      	ldr	r2, [pc, #280]	@ (8000528 <GPIO_PeriClockControl+0x1c8>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000414:	4b3d      	ldr	r3, [pc, #244]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000418:	4a3c      	ldr	r2, [pc, #240]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 800041a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800041e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000420:	e06c      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a41      	ldr	r2, [pc, #260]	@ (800052c <GPIO_PeriClockControl+0x1cc>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d168      	bne.n	80004fc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800042a:	4b38      	ldr	r3, [pc, #224]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042e:	4a37      	ldr	r2, [pc, #220]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000434:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000436:	e061      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a33      	ldr	r2, [pc, #204]	@ (8000508 <GPIO_PeriClockControl+0x1a8>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 8000440:	4b32      	ldr	r3, [pc, #200]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000444:	4a31      	ldr	r2, [pc, #196]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000446:	f023 0301 	bic.w	r3, r3, #1
 800044a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044c:	e056      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a2f      	ldr	r2, [pc, #188]	@ (8000510 <GPIO_PeriClockControl+0x1b0>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 8000456:	4b2d      	ldr	r3, [pc, #180]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045a:	4a2c      	ldr	r2, [pc, #176]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 800045c:	f023 0302 	bic.w	r3, r3, #2
 8000460:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000462:	e04b      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a2b      	ldr	r2, [pc, #172]	@ (8000514 <GPIO_PeriClockControl+0x1b4>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 800046c:	4b27      	ldr	r3, [pc, #156]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000470:	4a26      	ldr	r2, [pc, #152]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000472:	f023 0304 	bic.w	r3, r3, #4
 8000476:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000478:	e040      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a26      	ldr	r2, [pc, #152]	@ (8000518 <GPIO_PeriClockControl+0x1b8>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 8000482:	4b22      	ldr	r3, [pc, #136]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	4a21      	ldr	r2, [pc, #132]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 8000488:	f023 0308 	bic.w	r3, r3, #8
 800048c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048e:	e035      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a22      	ldr	r2, [pc, #136]	@ (800051c <GPIO_PeriClockControl+0x1bc>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 8000498:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4a1b      	ldr	r2, [pc, #108]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 800049e:	f023 0310 	bic.w	r3, r3, #16
 80004a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a4:	e02a      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000520 <GPIO_PeriClockControl+0x1c0>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 80004ae:	4b17      	ldr	r3, [pc, #92]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b2:	4a16      	ldr	r2, [pc, #88]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80004b4:	f023 0320 	bic.w	r3, r3, #32
 80004b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ba:	e01f      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a19      	ldr	r2, [pc, #100]	@ (8000524 <GPIO_PeriClockControl+0x1c4>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 80004c4:	4b11      	ldr	r3, [pc, #68]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c8:	4a10      	ldr	r2, [pc, #64]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80004ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d0:	e014      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a14      	ldr	r2, [pc, #80]	@ (8000528 <GPIO_PeriClockControl+0x1c8>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 80004da:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	4a0b      	ldr	r2, [pc, #44]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80004e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e6:	e009      	b.n	80004fc <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a10      	ldr	r2, [pc, #64]	@ (800052c <GPIO_PeriClockControl+0x1cc>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d105      	bne.n	80004fc <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 80004f0:	4b06      	ldr	r3, [pc, #24]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f4:	4a05      	ldr	r2, [pc, #20]	@ (800050c <GPIO_PeriClockControl+0x1ac>)
 80004f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40020000 	.word	0x40020000
 800050c:	40023800 	.word	0x40023800
 8000510:	40020400 	.word	0x40020400
 8000514:	40020800 	.word	0x40020800
 8000518:	40020c00 	.word	0x40020c00
 800051c:	40021000 	.word	0x40021000
 8000520:	40021400 	.word	0x40021400
 8000524:	40021800 	.word	0x40021800
 8000528:	40021c00 	.word	0x40021c00
 800052c:	40022000 	.word	0x40022000

08000530 <GPIO_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle )
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//temp. register
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2101      	movs	r1, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ff0c 	bl	8000360 <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	795b      	ldrb	r3, [r3, #5]
 800054c:	2b03      	cmp	r3, #3
 800054e:	d820      	bhi.n	8000592 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	461a      	mov	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	2103      	movs	r1, #3
 8000570:	fa01 f303 	lsl.w	r3, r1, r3
 8000574:	43db      	mvns	r3, r3
 8000576:	4619      	mov	r1, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	400a      	ands	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6819      	ldr	r1, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	430a      	orrs	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e0cb      	b.n	800072a <GPIO_Init+0x1fa>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b04      	cmp	r3, #4
 8000598:	d117      	bne.n	80005ca <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800059a:	4b4b      	ldr	r3, [pc, #300]	@ (80006c8 <GPIO_Init+0x198>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a47      	ldr	r2, [pc, #284]	@ (80006c8 <GPIO_Init+0x198>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005b0:	4b45      	ldr	r3, [pc, #276]	@ (80006c8 <GPIO_Init+0x198>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	43d2      	mvns	r2, r2
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a41      	ldr	r2, [pc, #260]	@ (80006c8 <GPIO_Init+0x198>)
 80005c4:	400b      	ands	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
 80005c8:	e035      	b.n	8000636 <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	795b      	ldrb	r3, [r3, #5]
 80005ce:	2b05      	cmp	r3, #5
 80005d0:	d117      	bne.n	8000602 <GPIO_Init+0xd2>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005d2:	4b3d      	ldr	r3, [pc, #244]	@ (80006c8 <GPIO_Init+0x198>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	4611      	mov	r1, r2
 80005dc:	2201      	movs	r2, #1
 80005de:	408a      	lsls	r2, r1
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a39      	ldr	r2, [pc, #228]	@ (80006c8 <GPIO_Init+0x198>)
 80005e4:	430b      	orrs	r3, r1
 80005e6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <GPIO_Init+0x198>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	7912      	ldrb	r2, [r2, #4]
 80005f0:	4611      	mov	r1, r2
 80005f2:	2201      	movs	r2, #1
 80005f4:	408a      	lsls	r2, r1
 80005f6:	43d2      	mvns	r2, r2
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a33      	ldr	r2, [pc, #204]	@ (80006c8 <GPIO_Init+0x198>)
 80005fc:	400b      	ands	r3, r1
 80005fe:	60d3      	str	r3, [r2, #12]
 8000600:	e019      	b.n	8000636 <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	795b      	ldrb	r3, [r3, #5]
 8000606:	2b06      	cmp	r3, #6
 8000608:	d115      	bne.n	8000636 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800060a:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <GPIO_Init+0x198>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	7912      	ldrb	r2, [r2, #4]
 8000612:	4611      	mov	r1, r2
 8000614:	2201      	movs	r2, #1
 8000616:	408a      	lsls	r2, r1
 8000618:	4611      	mov	r1, r2
 800061a:	4a2b      	ldr	r2, [pc, #172]	@ (80006c8 <GPIO_Init+0x198>)
 800061c:	430b      	orrs	r3, r1
 800061e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <GPIO_Init+0x198>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	7912      	ldrb	r2, [r2, #4]
 8000628:	4611      	mov	r1, r2
 800062a:	2201      	movs	r2, #1
 800062c:	408a      	lsls	r2, r1
 800062e:	4611      	mov	r1, r2
 8000630:	4a25      	ldr	r2, [pc, #148]	@ (80006c8 <GPIO_Init+0x198>)
 8000632:	430b      	orrs	r3, r1
 8000634:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	089b      	lsrs	r3, r3, #2
 800063c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	f003 0303 	and.w	r3, r3, #3
 8000646:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <GPIO_Init+0x19c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d04e      	beq.n	80006f0 <GPIO_Init+0x1c0>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a1e      	ldr	r2, [pc, #120]	@ (80006d0 <GPIO_Init+0x1a0>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d032      	beq.n	80006c2 <GPIO_Init+0x192>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <GPIO_Init+0x1a4>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d02b      	beq.n	80006be <GPIO_Init+0x18e>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a1b      	ldr	r2, [pc, #108]	@ (80006d8 <GPIO_Init+0x1a8>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d024      	beq.n	80006ba <GPIO_Init+0x18a>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <GPIO_Init+0x1ac>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d01d      	beq.n	80006b6 <GPIO_Init+0x186>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a18      	ldr	r2, [pc, #96]	@ (80006e0 <GPIO_Init+0x1b0>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d016      	beq.n	80006b2 <GPIO_Init+0x182>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <GPIO_Init+0x1b4>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d00f      	beq.n	80006ae <GPIO_Init+0x17e>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a15      	ldr	r2, [pc, #84]	@ (80006e8 <GPIO_Init+0x1b8>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d008      	beq.n	80006aa <GPIO_Init+0x17a>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <GPIO_Init+0x1bc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <GPIO_Init+0x176>
 80006a2:	2308      	movs	r3, #8
 80006a4:	e025      	b.n	80006f2 <GPIO_Init+0x1c2>
 80006a6:	2300      	movs	r3, #0
 80006a8:	e023      	b.n	80006f2 <GPIO_Init+0x1c2>
 80006aa:	2307      	movs	r3, #7
 80006ac:	e021      	b.n	80006f2 <GPIO_Init+0x1c2>
 80006ae:	2306      	movs	r3, #6
 80006b0:	e01f      	b.n	80006f2 <GPIO_Init+0x1c2>
 80006b2:	2305      	movs	r3, #5
 80006b4:	e01d      	b.n	80006f2 <GPIO_Init+0x1c2>
 80006b6:	2304      	movs	r3, #4
 80006b8:	e01b      	b.n	80006f2 <GPIO_Init+0x1c2>
 80006ba:	2303      	movs	r3, #3
 80006bc:	e019      	b.n	80006f2 <GPIO_Init+0x1c2>
 80006be:	2302      	movs	r3, #2
 80006c0:	e017      	b.n	80006f2 <GPIO_Init+0x1c2>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e015      	b.n	80006f2 <GPIO_Init+0x1c2>
 80006c6:	bf00      	nop
 80006c8:	40013c00 	.word	0x40013c00
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40021400 	.word	0x40021400
 80006e4:	40021800 	.word	0x40021800
 80006e8:	40021c00 	.word	0x40021c00
 80006ec:	40022000 	.word	0x40022000
 80006f0:	2300      	movs	r3, #0
 80006f2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006f4:	4b5d      	ldr	r3, [pc, #372]	@ (800086c <GPIO_Init+0x33c>)
 80006f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f8:	4a5c      	ldr	r2, [pc, #368]	@ (800086c <GPIO_Init+0x33c>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fe:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000700:	7c7a      	ldrb	r2, [r7, #17]
 8000702:	7cbb      	ldrb	r3, [r7, #18]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	fa02 f103 	lsl.w	r1, r2, r3
 800070a:	4a59      	ldr	r2, [pc, #356]	@ (8000870 <GPIO_Init+0x340>)
 800070c:	7cfb      	ldrb	r3, [r7, #19]
 800070e:	3302      	adds	r3, #2
 8000710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI -> IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000714:	4b57      	ldr	r3, [pc, #348]	@ (8000874 <GPIO_Init+0x344>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7912      	ldrb	r2, [r2, #4]
 800071c:	4611      	mov	r1, r2
 800071e:	2201      	movs	r2, #1
 8000720:	408a      	lsls	r2, r1
 8000722:	4611      	mov	r1, r2
 8000724:	4a53      	ldr	r2, [pc, #332]	@ (8000874 <GPIO_Init+0x344>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	799b      	ldrb	r3, [r3, #6]
 8000736:	461a      	mov	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	2103      	movs	r1, #3
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	43db      	mvns	r3, r3
 8000758:	4619      	mov	r1, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	400a      	ands	r2, r1
 8000760:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6899      	ldr	r1, [r3, #8]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	430a      	orrs	r2, r1
 8000770:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	79db      	ldrb	r3, [r3, #7]
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	2103      	movs	r1, #3
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	400a      	ands	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68d9      	ldr	r1, [r3, #12]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7a1b      	ldrb	r3, [r3, #8]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	4619      	mov	r1, r3
 80007d6:	2301      	movs	r3, #1
 80007d8:	408b      	lsls	r3, r1
 80007da:	43db      	mvns	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	400a      	ands	r2, r1
 80007e4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6859      	ldr	r1, [r3, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	795b      	ldrb	r3, [r3, #5]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d131      	bne.n	8000862 <GPIO_Init+0x332>
	{
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	08db      	lsrs	r3, r3, #3
 8000804:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) );
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	7c3a      	ldrb	r2, [r7, #16]
 8000816:	3208      	adds	r2, #8
 8000818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	220f      	movs	r2, #15
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	7c3a      	ldrb	r2, [r7, #16]
 8000830:	4001      	ands	r1, r0
 8000832:	3208      	adds	r2, #8
 8000834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	7c3a      	ldrb	r2, [r7, #16]
 800083e:	3208      	adds	r2, #8
 8000840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a5b      	ldrb	r3, [r3, #9]
 8000848:	461a      	mov	r2, r3
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	4618      	mov	r0, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	7c3a      	ldrb	r2, [r7, #16]
 800085a:	4301      	orrs	r1, r0
 800085c:	3208      	adds	r2, #8
 800085e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40013800 	.word	0x40013800
 8000874:	40013c00 	.word	0x40013c00

08000878 <GPIO_ReadFromInputPin>:
 *
 * @Note			-
 *
 *******************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001 ) ;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	691a      	ldr	r2, [r3, #16]
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	fa22 f303 	lsr.w	r3, r2, r3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]

	return value;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAdressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <I2C_ExecuteAdressPhase>:

static void I2C_ExecuteAdressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 			//SlaveAddr is Slave address + r/w bit=0 //~(1) -> 0b11111110 sa & dobijamo da je lsb 0
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	f023 0301 	bic.w	r3, r3, #1
 80008d8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008da:	78fa      	ldrb	r2, [r7, #3]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	611a      	str	r2, [r3, #16]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b085      	sub	sp, #20
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;		//(void) → da kompajler ne kuka što se ta promenljiva ne koristi
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	601a      	str	r2, [r3, #0]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <I2C_PeripheralControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	460b      	mov	r3, r1
 8000930:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d106      	bne.n	8000946 <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= ( 1 << I2C_CR1_PE );
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f043 0201 	orr.w	r2, r3, #1
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->CR1 &= ~(1 << 0);
		}
}
 8000944:	e005      	b.n	8000952 <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1 << 0);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f023 0201 	bic.w	r2, r3, #1
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <I2C_PeriClockControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d120      	bne.n	80009b0 <I2C_PeriClockControl+0x54>
		{
			if(pI2Cx == I2C1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a22      	ldr	r2, [pc, #136]	@ (80009fc <I2C_PeriClockControl+0xa0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d106      	bne.n	8000984 <I2C_PeriClockControl+0x28>
			{
				I2C1_PCLK_EN();
 8000976:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a21      	ldr	r2, [pc, #132]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 800097c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
			}else if (pI2Cx == I2C3)
			{
				I2C3_PCLK_DI();
			}
		}
}
 8000982:	e035      	b.n	80009f0 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a1d      	ldr	r2, [pc, #116]	@ (80009fc <I2C_PeriClockControl+0xa0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d106      	bne.n	800099a <I2C_PeriClockControl+0x3e>
				I2C2_PCLK_EN();
 800098c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	4a1b      	ldr	r2, [pc, #108]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 8000992:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000996:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000998:	e02a      	b.n	80009f0 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C3)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <I2C_PeriClockControl+0xa0>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d126      	bne.n	80009f0 <I2C_PeriClockControl+0x94>
				I2C3_PCLK_EN();
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a16      	ldr	r2, [pc, #88]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 80009a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009ae:	e01f      	b.n	80009f0 <I2C_PeriClockControl+0x94>
			if(pI2Cx == I2C1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a12      	ldr	r2, [pc, #72]	@ (80009fc <I2C_PeriClockControl+0xa0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d106      	bne.n	80009c6 <I2C_PeriClockControl+0x6a>
				I2C1_PCLK_DI();
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 80009be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80009c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009c4:	e014      	b.n	80009f0 <I2C_PeriClockControl+0x94>
			}else if (pI2Cx == I2C2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a0c      	ldr	r2, [pc, #48]	@ (80009fc <I2C_PeriClockControl+0xa0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d106      	bne.n	80009dc <I2C_PeriClockControl+0x80>
				I2C2_PCLK_DI();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 80009d4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009da:	e009      	b.n	80009f0 <I2C_PeriClockControl+0x94>
			}else if (pI2Cx == I2C3)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a07      	ldr	r2, [pc, #28]	@ (80009fc <I2C_PeriClockControl+0xa0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d105      	bne.n	80009f0 <I2C_PeriClockControl+0x94>
				I2C3_PCLK_DI();
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <I2C_PeriClockControl+0xa4>)
 80009ea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80009ee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40023800 	.word	0x40023800

08000a04 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
	...

08000a14 <RCC_GetPLCK1Value>:

uint32_t RCC_GetPLCK1Value(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = (RCC->CFGR >> 2) & 0x3;				//0x3 -> 0b0011
 8000a1a:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <RCC_GetPLCK1Value+0xa0>)
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f003 0303 	and.w	r3, r3, #3
 8000a26:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000a28:	7a7b      	ldrb	r3, [r7, #9]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <RCC_GetPLCK1Value+0x20>
	{
		SystemClk = 16000000;						//HSI
 8000a2e:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <RCC_GetPLCK1Value+0xa4>)
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e00b      	b.n	8000a4c <RCC_GetPLCK1Value+0x38>
	}
	else if(clksrc == 1)
 8000a34:	7a7b      	ldrb	r3, [r7, #9]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d102      	bne.n	8000a40 <RCC_GetPLCK1Value+0x2c>
	{
		SystemClk = 8000000;						//HSE
 8000a3a:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <RCC_GetPLCK1Value+0xa8>)
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e005      	b.n	8000a4c <RCC_GetPLCK1Value+0x38>
	}
	else if(clksrc == 2)
 8000a40:	7a7b      	ldrb	r3, [r7, #9]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d102      	bne.n	8000a4c <RCC_GetPLCK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();		//PLL output
 8000a46:	f7ff ffdd 	bl	8000a04 <RCC_GetPLLOutputClock>
 8000a4a:	60f8      	str	r0, [r7, #12]
	}

	//For AHB
	temp = (RCC->CFGR >> 4) & 0xF;					//0xF -> 0b1111
 8000a4c:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <RCC_GetPLCK1Value+0xa0>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	091b      	lsrs	r3, r3, #4
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	723b      	strb	r3, [r7, #8]

	if(temp < 8)									//0x8 -> 0b1000
 8000a5a:	7a3b      	ldrb	r3, [r7, #8]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d802      	bhi.n	8000a66 <RCC_GetPLCK1Value+0x52>
	{
		ahbp = 1;									//AHB Prescaler
 8000a60:	2301      	movs	r3, #1
 8000a62:	72fb      	strb	r3, [r7, #11]
 8000a64:	e005      	b.n	8000a72 <RCC_GetPLCK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000a66:	7a3b      	ldrb	r3, [r7, #8]
 8000a68:	3b08      	subs	r3, #8
 8000a6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ac0 <RCC_GetPLCK1Value+0xac>)
 8000a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a70:	72fb      	strb	r3, [r7, #11]
	}

	//For APB1
	temp = (RCC->CFGR >> 10) & 0x7;					//0xF -> 0b0111
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <RCC_GetPLCK1Value+0xa0>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	0a9b      	lsrs	r3, r3, #10
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)									//0x4 -> 0b0100
 8000a80:	7a3b      	ldrb	r3, [r7, #8]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d802      	bhi.n	8000a8c <RCC_GetPLCK1Value+0x78>
	{
		apb1p = 1;									//APB Prescaler
 8000a86:	2301      	movs	r3, #1
 8000a88:	72bb      	strb	r3, [r7, #10]
 8000a8a:	e005      	b.n	8000a98 <RCC_GetPLCK1Value+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000a8c:	7a3b      	ldrb	r3, [r7, #8]
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac4 <RCC_GetPLCK1Value+0xb0>)
 8000a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a96:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000a98:	7afb      	ldrb	r3, [r7, #11]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aa0:	7abb      	ldrb	r3, [r7, #10]
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	00f42400 	.word	0x00f42400
 8000abc:	007a1200 	.word	0x007a1200
 8000ac0:	20000020 	.word	0x20000020
 8000ac4:	20000030 	.word	0x20000030

08000ac8 <I2C_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle )
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]

	//Enable the clock for i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff3e 	bl	800095c <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle -> I2C_Config.I2C_ACKControl << 10 ;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7a5b      	ldrb	r3, [r3, #9]
 8000ae4:	029b      	lsls	r3, r3, #10
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	601a      	str	r2, [r3, #0]

	//Configure the FREQ field of CR2
	tempreg = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPLCK1Value() / 1000000U ;
 8000af8:	f7ff ff8c 	bl	8000a14 <RCC_GetPLCK1Value>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a46      	ldr	r2, [pc, #280]	@ (8000c18 <I2C_Init+0x150>)
 8000b00:	fba2 2303 	umull	r2, r3, r2, r3
 8000b04:	0c9b      	lsrs	r3, r3, #18
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F) ;		//0b0011 1111
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b16:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7a1b      	ldrb	r3, [r3, #8]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	4a36      	ldr	r2, [pc, #216]	@ (8000c1c <I2C_Init+0x154>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d80f      	bhi.n	8000b66 <I2C_Init+0x9e>
	{
		//Mode is standard mode
		ccr_value = RCC_GetPLCK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000b46:	f7ff ff65 	bl	8000a14 <RCC_GetPLCK1Value>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000b58:	897b      	ldrh	r3, [r7, #10]
 8000b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e02c      	b.n	8000bc0 <I2C_Init+0xf8>
	}
	else
	{
		//Mode is fast mode
		tempreg |= ( 1 << 15 );
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b6c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	895b      	ldrh	r3, [r3, #10]
 8000b72:	039b      	lsls	r3, r3, #14
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	895b      	ldrh	r3, [r3, #10]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10b      	bne.n	8000b9a <I2C_Init+0xd2>
		{
			ccr_value = RCC_GetPLCK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000b82:	f7ff ff47 	bl	8000a14 <RCC_GetPLCK1Value>
 8000b86:	4601      	mov	r1, r0
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b96:	817b      	strh	r3, [r7, #10]
 8000b98:	e00c      	b.n	8000bb4 <I2C_Init+0xec>
		}
		else
		{
			ccr_value = RCC_GetPLCK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000b9a:	f7ff ff3b 	bl	8000a14 <RCC_GetPLCK1Value>
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	009a      	lsls	r2, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb2:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000bb4:	897b      	ldrh	r3, [r7, #10]
 8000bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a13      	ldr	r2, [pc, #76]	@ (8000c1c <I2C_Init+0x154>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d809      	bhi.n	8000be6 <I2C_Init+0x11e>
	{
		//Mode is standard mode
		tempreg = (RCC_GetPLCK1Value() / 1000000U) + 1 ;
 8000bd2:	f7ff ff1f 	bl	8000a14 <RCC_GetPLCK1Value>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <I2C_Init+0x150>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	0c9b      	lsrs	r3, r3, #18
 8000be0:	3301      	adds	r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e00d      	b.n	8000c02 <I2C_Init+0x13a>
	}
	else
	{
		//Mode is fast mode
		tempreg = ((RCC_GetPLCK1Value() * 300) / 1000000000U) + 1 ;
 8000be6:	f7ff ff15 	bl	8000a14 <RCC_GetPLCK1Value>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bf0:	fb02 f303 	mul.w	r3, r2, r3
 8000bf4:	0a5b      	lsrs	r3, r3, #9
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <I2C_Init+0x158>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	09db      	lsrs	r3, r3, #7
 8000bfe:	3301      	adds	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F); 	//00111111
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c0c:	621a      	str	r2, [r3, #32]
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	000186a0 	.word	0x000186a0
 8000c20:	00044b83 	.word	0x00044b83

08000c24 <I2C_GetFlagStatus>:
{
	//TODO
}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	4013      	ands	r3, r2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <I2C_MasterSendData>:
 *
 * @Note			-
 *
 *******************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe20 	bl	80008a2 <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be streched (pulled to LOW)
	while( ! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8000c62:	bf00      	nop
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffda 	bl	8000c24 <I2C_GetFlagStatus>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f6      	beq.n	8000c64 <I2C_MasterSendData+0x1a>

	//3. Send the adrress of the slave with r/w bit set to w(0) (total 8 bits)
	I2C_ExecuteAdressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	78fa      	ldrb	r2, [r7, #3]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe1e 	bl	80008c0 <I2C_ExecuteAdressPhase>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( ! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000c84:	bf00      	nop
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ffc9 	bl	8000c24 <I2C_GetFlagStatus>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f6      	beq.n	8000c86 <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//Note: Until ADDR is cleared SCL will be streched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe24 	bl	80008ea <I2C_ClearADDRFlag>

	//6. Send the data until Len becomes0
	while(Len > 0)
 8000ca2:	e014      	b.n	8000cce <I2C_MasterSendData+0x84>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)); //Wati till TXE is set
 8000ca4:	bf00      	nop
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2180      	movs	r1, #128	@ 0x80
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ffb9 	bl	8000c24 <I2C_GetFlagStatus>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0f6      	beq.n	8000ca6 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
		Len--;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1e7      	bne.n	8000ca4 <I2C_MasterSendData+0x5a>

	//7. When Len becomes zero whait for TXE=1 and BTF=1 before generating the STOP ocndition
	// Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	// when BTF=1 SCL will be streched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8000cd4:	bf00      	nop
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2180      	movs	r1, #128	@ 0x80
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ffa1 	bl	8000c24 <I2C_GetFlagStatus>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f6      	beq.n	8000cd6 <I2C_MasterSendData+0x8c>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 8000ce8:	bf00      	nop
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2104      	movs	r1, #4
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff97 	bl	8000c24 <I2C_GetFlagStatus>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f6      	beq.n	8000cea <I2C_MasterSendData+0xa0>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	// Note: generating STOP, automacally clears the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fe01 	bl	8000908 <I2C_GenerateStopCondition>

}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <__libc_init_array>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	4d0d      	ldr	r5, [pc, #52]	@ (8000d48 <__libc_init_array+0x38>)
 8000d14:	4c0d      	ldr	r4, [pc, #52]	@ (8000d4c <__libc_init_array+0x3c>)
 8000d16:	1b64      	subs	r4, r4, r5
 8000d18:	10a4      	asrs	r4, r4, #2
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	42a6      	cmp	r6, r4
 8000d1e:	d109      	bne.n	8000d34 <__libc_init_array+0x24>
 8000d20:	4d0b      	ldr	r5, [pc, #44]	@ (8000d50 <__libc_init_array+0x40>)
 8000d22:	4c0c      	ldr	r4, [pc, #48]	@ (8000d54 <__libc_init_array+0x44>)
 8000d24:	f000 f818 	bl	8000d58 <_init>
 8000d28:	1b64      	subs	r4, r4, r5
 8000d2a:	10a4      	asrs	r4, r4, #2
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	42a6      	cmp	r6, r4
 8000d30:	d105      	bne.n	8000d3e <__libc_init_array+0x2e>
 8000d32:	bd70      	pop	{r4, r5, r6, pc}
 8000d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d38:	4798      	blx	r3
 8000d3a:	3601      	adds	r6, #1
 8000d3c:	e7ee      	b.n	8000d1c <__libc_init_array+0xc>
 8000d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d42:	4798      	blx	r3
 8000d44:	3601      	adds	r6, #1
 8000d46:	e7f2      	b.n	8000d2e <__libc_init_array+0x1e>
 8000d48:	08000d78 	.word	0x08000d78
 8000d4c:	08000d78 	.word	0x08000d78
 8000d50:	08000d78 	.word	0x08000d78
 8000d54:	08000d7c 	.word	0x08000d7c

08000d58 <_init>:
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5a:	bf00      	nop
 8000d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5e:	bc08      	pop	{r3}
 8000d60:	469e      	mov	lr, r3
 8000d62:	4770      	bx	lr

08000d64 <_fini>:
 8000d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d66:	bf00      	nop
 8000d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6a:	bc08      	pop	{r3}
 8000d6c:	469e      	mov	lr, r3
 8000d6e:	4770      	bx	lr
