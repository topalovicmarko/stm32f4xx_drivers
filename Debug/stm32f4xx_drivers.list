
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000928  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000abc  08000abc  00001abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ac8  08000ac8  00001ad8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000ac8  08000ac8  00001ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ad0  08000ad8  00001ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad0  08000ad0  00001ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ad4  08000ad4  00001ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ad8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ad8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001134  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000430  00000000  00000000  00002c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  00003068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d6  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000229c  00000000  00000000  0000326e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017ab  00000000  00000000  0000550a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000950c  00000000  00000000  00006cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000101c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000404  00000000  00000000  00010204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00010608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000aa4 	.word	0x08000aa4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000aa4 	.word	0x08000aa4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SPI2_GPIOInits>:
* PB12 --> SPI2_NSS
* ALT function mode : 5
*/

void SPI2_GPIOInits()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <SPI2_GPIOInits+0x40>)
 80001ec:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001f2:	2305      	movs	r3, #5
 80001f4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000202:	230d      	movs	r3, #13
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f95d 	bl	80004c8 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800020e:	230f      	movs	r3, #15
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f957 	bl	80004c8 <GPIO_Init>
	//GPIO_Init(&SPIPins);

	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40020400 	.word	0x40020400

08000228 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <SPI2_Inits+0x38>)
 8000230:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000232:	2301      	movs	r3, #1
 8000234:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000236:	2301      	movs	r3, #1
 8000238:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;	//generates sclk 8Mhz
 800023a:	2300      	movs	r3, #0
 800023c:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800023e:	2300      	movs	r3, #0
 8000240:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000242:	2300      	movs	r3, #0
 8000244:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN ;	//software slave managment enabled for NSS pin
 800024a:	2301      	movs	r3, #1
 800024c:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fb4d 	bl	80008f0 <SPI_Init>

}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40003800 	.word	0x40003800

08000264 <main>:

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 800026a:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <main+0x38>)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000270:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//This function is used to initialize the GPIO pinns to behave as SPI2 pins
	SPI2_GPIOInits();
 8000274:	f7ff ffb6 	bl	80001e4 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000278:	f7ff ffd6 	bl	8000228 <SPI2_Inits>

	//Enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 800027c:	2101      	movs	r1, #1
 800027e:	4808      	ldr	r0, [pc, #32]	@ (80002a0 <main+0x3c>)
 8000280:	f000 fbd0 	bl	8000a24 <SPI_PeripheralControl>

	SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ffa4 	bl	80001d4 <strlen>
 800028c:	4602      	mov	r2, r0
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4619      	mov	r1, r3
 8000292:	4803      	ldr	r0, [pc, #12]	@ (80002a0 <main+0x3c>)
 8000294:	f000 fb8f 	bl	80009b6 <SPI_SendData>

	while(1);
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <main+0x34>
 800029c:	08000abc 	.word	0x08000abc
 80002a0:	40003800 	.word	0x40003800

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	@ (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	@ (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	@ (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	@ (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 fbc3 	bl	8000a5c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002d6:	f7ff ffc5 	bl	8000264 <main>

080002da <LoopForever>:

LoopForever:
  b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000ad8 	.word	0x08000ad8
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC_IRQHandler>
	...

080002f8 <GPIO_PeriClockControl>:
 *
 * @Note			-	none
 *
 *******************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000304:	78fb      	ldrb	r3, [r7, #3]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d162      	bne.n	80003d0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a64      	ldr	r2, [pc, #400]	@ (80004a0 <GPIO_PeriClockControl+0x1a8>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000312:	4b64      	ldr	r3, [pc, #400]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000316:	4a63      	ldr	r2, [pc, #396]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6313      	str	r3, [r2, #48]	@ 0x30
				}else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
 800031e:	e0b9      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a61      	ldr	r2, [pc, #388]	@ (80004a8 <GPIO_PeriClockControl+0x1b0>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000328:	4b5e      	ldr	r3, [pc, #376]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032c:	4a5d      	ldr	r2, [pc, #372]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000334:	e0ae      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a5c      	ldr	r2, [pc, #368]	@ (80004ac <GPIO_PeriClockControl+0x1b4>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800033e:	4b59      	ldr	r3, [pc, #356]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000342:	4a58      	ldr	r2, [pc, #352]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800034a:	e0a3      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a58      	ldr	r2, [pc, #352]	@ (80004b0 <GPIO_PeriClockControl+0x1b8>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000354:	4b53      	ldr	r3, [pc, #332]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000358:	4a52      	ldr	r2, [pc, #328]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800035a:	f043 0308 	orr.w	r3, r3, #8
 800035e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000360:	e098      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a53      	ldr	r2, [pc, #332]	@ (80004b4 <GPIO_PeriClockControl+0x1bc>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800036a:	4b4e      	ldr	r3, [pc, #312]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036e:	4a4d      	ldr	r2, [pc, #308]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000370:	f043 0310 	orr.w	r3, r3, #16
 8000374:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000376:	e08d      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a4f      	ldr	r2, [pc, #316]	@ (80004b8 <GPIO_PeriClockControl+0x1c0>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000380:	4b48      	ldr	r3, [pc, #288]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a47      	ldr	r2, [pc, #284]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038c:	e082      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a4a      	ldr	r2, [pc, #296]	@ (80004bc <GPIO_PeriClockControl+0x1c4>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000396:	4b43      	ldr	r3, [pc, #268]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039a:	4a42      	ldr	r2, [pc, #264]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800039c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a2:	e077      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a46      	ldr	r2, [pc, #280]	@ (80004c0 <GPIO_PeriClockControl+0x1c8>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003ac:	4b3d      	ldr	r3, [pc, #244]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b0:	4a3c      	ldr	r2, [pc, #240]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003b6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b8:	e06c      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a41      	ldr	r2, [pc, #260]	@ (80004c4 <GPIO_PeriClockControl+0x1cc>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d168      	bne.n	8000494 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003c2:	4b38      	ldr	r3, [pc, #224]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c6:	4a37      	ldr	r2, [pc, #220]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ce:	e061      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a33      	ldr	r2, [pc, #204]	@ (80004a0 <GPIO_PeriClockControl+0x1a8>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 80003d8:	4b32      	ldr	r3, [pc, #200]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003dc:	4a31      	ldr	r2, [pc, #196]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 80003de:	f023 0301 	bic.w	r3, r3, #1
 80003e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e4:	e056      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a2f      	ldr	r2, [pc, #188]	@ (80004a8 <GPIO_PeriClockControl+0x1b0>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 80003ee:	4b2d      	ldr	r3, [pc, #180]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a2c      	ldr	r2, [pc, #176]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	f023 0302 	bic.w	r3, r3, #2
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fa:	e04b      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a2b      	ldr	r2, [pc, #172]	@ (80004ac <GPIO_PeriClockControl+0x1b4>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 8000404:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000408:	4a26      	ldr	r2, [pc, #152]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800040a:	f023 0304 	bic.w	r3, r3, #4
 800040e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000410:	e040      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a26      	ldr	r2, [pc, #152]	@ (80004b0 <GPIO_PeriClockControl+0x1b8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 800041a:	4b22      	ldr	r3, [pc, #136]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041e:	4a21      	ldr	r2, [pc, #132]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000420:	f023 0308 	bic.w	r3, r3, #8
 8000424:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000426:	e035      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a22      	ldr	r2, [pc, #136]	@ (80004b4 <GPIO_PeriClockControl+0x1bc>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 8000430:	4b1c      	ldr	r3, [pc, #112]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000434:	4a1b      	ldr	r2, [pc, #108]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000436:	f023 0310 	bic.w	r3, r3, #16
 800043a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043c:	e02a      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a1d      	ldr	r2, [pc, #116]	@ (80004b8 <GPIO_PeriClockControl+0x1c0>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 8000446:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044a:	4a16      	ldr	r2, [pc, #88]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800044c:	f023 0320 	bic.w	r3, r3, #32
 8000450:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000452:	e01f      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a19      	ldr	r2, [pc, #100]	@ (80004bc <GPIO_PeriClockControl+0x1c4>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000460:	4a10      	ldr	r2, [pc, #64]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000466:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000468:	e014      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a14      	ldr	r2, [pc, #80]	@ (80004c0 <GPIO_PeriClockControl+0x1c8>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	4a0b      	ldr	r2, [pc, #44]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 8000478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800047c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047e:	e009      	b.n	8000494 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a10      	ldr	r2, [pc, #64]	@ (80004c4 <GPIO_PeriClockControl+0x1cc>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d105      	bne.n	8000494 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a05      	ldr	r2, [pc, #20]	@ (80004a4 <GPIO_PeriClockControl+0x1ac>)
 800048e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020400 	.word	0x40020400
 80004ac:	40020800 	.word	0x40020800
 80004b0:	40020c00 	.word	0x40020c00
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40021400 	.word	0x40021400
 80004bc:	40021800 	.word	0x40021800
 80004c0:	40021c00 	.word	0x40021c00
 80004c4:	40022000 	.word	0x40022000

080004c8 <GPIO_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle )
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//temp. register
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2101      	movs	r1, #1
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff0c 	bl	80002f8 <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	795b      	ldrb	r3, [r3, #5]
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	d820      	bhi.n	800052a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	795b      	ldrb	r3, [r3, #5]
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	791b      	ldrb	r3, [r3, #4]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	2103      	movs	r1, #3
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	4619      	mov	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	400a      	ands	r2, r1
 8000516:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	697a      	ldr	r2, [r7, #20]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	e0cb      	b.n	80006c2 <GPIO_Init+0x1fa>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	795b      	ldrb	r3, [r3, #5]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d117      	bne.n	8000562 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000532:	4b4b      	ldr	r3, [pc, #300]	@ (8000660 <GPIO_Init+0x198>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7912      	ldrb	r2, [r2, #4]
 800053a:	4611      	mov	r1, r2
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	4611      	mov	r1, r2
 8000542:	4a47      	ldr	r2, [pc, #284]	@ (8000660 <GPIO_Init+0x198>)
 8000544:	430b      	orrs	r3, r1
 8000546:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000548:	4b45      	ldr	r3, [pc, #276]	@ (8000660 <GPIO_Init+0x198>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	43d2      	mvns	r2, r2
 8000558:	4611      	mov	r1, r2
 800055a:	4a41      	ldr	r2, [pc, #260]	@ (8000660 <GPIO_Init+0x198>)
 800055c:	400b      	ands	r3, r1
 800055e:	6093      	str	r3, [r2, #8]
 8000560:	e035      	b.n	80005ce <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	2b05      	cmp	r3, #5
 8000568:	d117      	bne.n	800059a <GPIO_Init+0xd2>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800056a:	4b3d      	ldr	r3, [pc, #244]	@ (8000660 <GPIO_Init+0x198>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	4611      	mov	r1, r2
 800057a:	4a39      	ldr	r2, [pc, #228]	@ (8000660 <GPIO_Init+0x198>)
 800057c:	430b      	orrs	r3, r1
 800057e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000580:	4b37      	ldr	r3, [pc, #220]	@ (8000660 <GPIO_Init+0x198>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	43d2      	mvns	r2, r2
 8000590:	4611      	mov	r1, r2
 8000592:	4a33      	ldr	r2, [pc, #204]	@ (8000660 <GPIO_Init+0x198>)
 8000594:	400b      	ands	r3, r1
 8000596:	60d3      	str	r3, [r2, #12]
 8000598:	e019      	b.n	80005ce <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	795b      	ldrb	r3, [r3, #5]
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d115      	bne.n	80005ce <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <GPIO_Init+0x198>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000660 <GPIO_Init+0x198>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005b8:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <GPIO_Init+0x198>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	7912      	ldrb	r2, [r2, #4]
 80005c0:	4611      	mov	r1, r2
 80005c2:	2201      	movs	r2, #1
 80005c4:	408a      	lsls	r2, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a25      	ldr	r2, [pc, #148]	@ (8000660 <GPIO_Init+0x198>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	089b      	lsrs	r3, r3, #2
 80005d4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	f003 0303 	and.w	r3, r3, #3
 80005de:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000664 <GPIO_Init+0x19c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d04e      	beq.n	8000688 <GPIO_Init+0x1c0>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000668 <GPIO_Init+0x1a0>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d032      	beq.n	800065a <GPIO_Init+0x192>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1c      	ldr	r2, [pc, #112]	@ (800066c <GPIO_Init+0x1a4>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d02b      	beq.n	8000656 <GPIO_Init+0x18e>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1b      	ldr	r2, [pc, #108]	@ (8000670 <GPIO_Init+0x1a8>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d024      	beq.n	8000652 <GPIO_Init+0x18a>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <GPIO_Init+0x1ac>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d01d      	beq.n	800064e <GPIO_Init+0x186>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a18      	ldr	r2, [pc, #96]	@ (8000678 <GPIO_Init+0x1b0>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d016      	beq.n	800064a <GPIO_Init+0x182>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	@ (800067c <GPIO_Init+0x1b4>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d00f      	beq.n	8000646 <GPIO_Init+0x17e>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <GPIO_Init+0x1b8>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d008      	beq.n	8000642 <GPIO_Init+0x17a>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a13      	ldr	r2, [pc, #76]	@ (8000684 <GPIO_Init+0x1bc>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <GPIO_Init+0x176>
 800063a:	2308      	movs	r3, #8
 800063c:	e025      	b.n	800068a <GPIO_Init+0x1c2>
 800063e:	2300      	movs	r3, #0
 8000640:	e023      	b.n	800068a <GPIO_Init+0x1c2>
 8000642:	2307      	movs	r3, #7
 8000644:	e021      	b.n	800068a <GPIO_Init+0x1c2>
 8000646:	2306      	movs	r3, #6
 8000648:	e01f      	b.n	800068a <GPIO_Init+0x1c2>
 800064a:	2305      	movs	r3, #5
 800064c:	e01d      	b.n	800068a <GPIO_Init+0x1c2>
 800064e:	2304      	movs	r3, #4
 8000650:	e01b      	b.n	800068a <GPIO_Init+0x1c2>
 8000652:	2303      	movs	r3, #3
 8000654:	e019      	b.n	800068a <GPIO_Init+0x1c2>
 8000656:	2302      	movs	r3, #2
 8000658:	e017      	b.n	800068a <GPIO_Init+0x1c2>
 800065a:	2301      	movs	r3, #1
 800065c:	e015      	b.n	800068a <GPIO_Init+0x1c2>
 800065e:	bf00      	nop
 8000660:	40013c00 	.word	0x40013c00
 8000664:	40020000 	.word	0x40020000
 8000668:	40020400 	.word	0x40020400
 800066c:	40020800 	.word	0x40020800
 8000670:	40020c00 	.word	0x40020c00
 8000674:	40021000 	.word	0x40021000
 8000678:	40021400 	.word	0x40021400
 800067c:	40021800 	.word	0x40021800
 8000680:	40021c00 	.word	0x40021c00
 8000684:	40022000 	.word	0x40022000
 8000688:	2300      	movs	r3, #0
 800068a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800068c:	4b5d      	ldr	r3, [pc, #372]	@ (8000804 <GPIO_Init+0x33c>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000690:	4a5c      	ldr	r2, [pc, #368]	@ (8000804 <GPIO_Init+0x33c>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000698:	7c7a      	ldrb	r2, [r7, #17]
 800069a:	7cbb      	ldrb	r3, [r7, #18]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	fa02 f103 	lsl.w	r1, r2, r3
 80006a2:	4a59      	ldr	r2, [pc, #356]	@ (8000808 <GPIO_Init+0x340>)
 80006a4:	7cfb      	ldrb	r3, [r7, #19]
 80006a6:	3302      	adds	r3, #2
 80006a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI -> IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ac:	4b57      	ldr	r3, [pc, #348]	@ (800080c <GPIO_Init+0x344>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	4611      	mov	r1, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	408a      	lsls	r2, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a53      	ldr	r2, [pc, #332]	@ (800080c <GPIO_Init+0x344>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	799b      	ldrb	r3, [r3, #6]
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	2103      	movs	r1, #3
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	400a      	ands	r2, r1
 80006f8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6899      	ldr	r1, [r3, #8]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	430a      	orrs	r2, r1
 8000708:	609a      	str	r2, [r3, #8]

	temp = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	79db      	ldrb	r3, [r3, #7]
 8000712:	461a      	mov	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68da      	ldr	r2, [r3, #12]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	2103      	movs	r1, #3
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43db      	mvns	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	400a      	ands	r2, r1
 800073c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68d9      	ldr	r1, [r3, #12]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	430a      	orrs	r2, r1
 800074c:	60da      	str	r2, [r3, #12]

	temp = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7a1b      	ldrb	r3, [r3, #8]
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	2301      	movs	r3, #1
 8000770:	408b      	lsls	r3, r1
 8000772:	43db      	mvns	r3, r3
 8000774:	4619      	mov	r1, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	400a      	ands	r2, r1
 800077c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6859      	ldr	r1, [r3, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	430a      	orrs	r2, r1
 800078c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d131      	bne.n	80007fa <GPIO_Init+0x332>
	{
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) );
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	7c3a      	ldrb	r2, [r7, #16]
 80007ae:	3208      	adds	r2, #8
 80007b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	220f      	movs	r2, #15
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43db      	mvns	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	7c3a      	ldrb	r2, [r7, #16]
 80007c8:	4001      	ands	r1, r0
 80007ca:	3208      	adds	r2, #8
 80007cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	7c3a      	ldrb	r2, [r7, #16]
 80007d6:	3208      	adds	r2, #8
 80007d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7a5b      	ldrb	r3, [r3, #9]
 80007e0:	461a      	mov	r2, r3
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	7c3a      	ldrb	r2, [r7, #16]
 80007f2:	4301      	orrs	r1, r0
 80007f4:	3208      	adds	r2, #8
 80007f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40013800 	.word	0x40013800
 800080c:	40013c00 	.word	0x40013c00

08000810 <SPI_PeriClockControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d12b      	bne.n	800087a <SPI_PeriClockControl+0x6a>
		{
			if(pSPIx == SPI1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a2d      	ldr	r2, [pc, #180]	@ (80008dc <SPI_PeriClockControl+0xcc>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082e:	4a2c      	ldr	r2, [pc, #176]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 8000830:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000834:	6453      	str	r3, [r2, #68]	@ 0x44
			}else if (pSPIx == SPI4)
			{
				SPI4_PCLK_DI();
			}
		}
}
 8000836:	e04b      	b.n	80008d0 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a2a      	ldr	r2, [pc, #168]	@ (80008e4 <SPI_PeriClockControl+0xd4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d106      	bne.n	800084e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000840:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	4a26      	ldr	r2, [pc, #152]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800084c:	e040      	b.n	80008d0 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI3)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a25      	ldr	r2, [pc, #148]	@ (80008e8 <SPI_PeriClockControl+0xd8>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d106      	bne.n	8000864 <SPI_PeriClockControl+0x54>
				SPI3_PCLK_EN();
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	4a21      	ldr	r2, [pc, #132]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 800085c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000860:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000862:	e035      	b.n	80008d0 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI4)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <SPI_PeriClockControl+0xdc>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d131      	bne.n	80008d0 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_EN();
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 800086e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000870:	4a1b      	ldr	r2, [pc, #108]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 8000872:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000876:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000878:	e02a      	b.n	80008d0 <SPI_PeriClockControl+0xc0>
			if(pSPIx == SPI1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <SPI_PeriClockControl+0xcc>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <SPI_PeriClockControl+0x80>
				SPI1_PCLK_DI();
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a16      	ldr	r2, [pc, #88]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 8000888:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800088e:	e01f      	b.n	80008d0 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI2)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <SPI_PeriClockControl+0xd4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d106      	bne.n	80008a6 <SPI_PeriClockControl+0x96>
				SPI2_PCLK_DI();
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089c:	4a10      	ldr	r2, [pc, #64]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 800089e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008a2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008a4:	e014      	b.n	80008d0 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI3)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a0f      	ldr	r2, [pc, #60]	@ (80008e8 <SPI_PeriClockControl+0xd8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <SPI_PeriClockControl+0xac>
				SPI3_PCLK_DI();
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	4a0b      	ldr	r2, [pc, #44]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 80008b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008b8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008ba:	e009      	b.n	80008d0 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI4)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <SPI_PeriClockControl+0xdc>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d105      	bne.n	80008d0 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_DI();
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 80008c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c8:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <SPI_PeriClockControl+0xd0>)
 80008ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80008ce:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40013000 	.word	0x40013000
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40003800 	.word	0x40003800
 80008e8:	40003c00 	.word	0x40003c00
 80008ec:	40013400 	.word	0x40013400

080008f0 <SPI_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle )
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	//Peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff86 	bl	8000810 <SPI_PeriClockControl>

	//Configure SPI_CR1 register
	uint32_t tempreg = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	791b      	ldrb	r3, [r3, #4]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4313      	orrs	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	795b      	ldrb	r3, [r3, #5]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d104      	bne.n	8000926 <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e014      	b.n	8000950 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	795b      	ldrb	r3, [r3, #5]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d104      	bne.n	8000938 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	e00b      	b.n	8000950 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	795b      	ldrb	r3, [r3, #5]
 800093c:	2b03      	cmp	r3, #3
 800093e:	d107      	bne.n	8000950 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000946:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800094e:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the SPI serial clock speed (Baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	799b      	ldrb	r3, [r3, #6]
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	4313      	orrs	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	79db      	ldrb	r3, [r3, #7]
 8000960:	02db      	lsls	r3, r3, #11
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	4313      	orrs	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7a1b      	ldrb	r3, [r3, #8]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4313      	orrs	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7a5b      	ldrb	r3, [r3, #9]
 8000978:	461a      	mov	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4313      	orrs	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <SPI_GetFlagStatus>:
		pSPIx->SR = 0;
		pSPIx->DR = 0;
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	4013      	ands	r3, r2
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <SPI_SendData>:
 *
 * @Note			- This is blocking call
 *
 *******************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80009c2:	e027      	b.n	8000a14 <SPI_SendData+0x5e>
	{
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 80009c4:	bf00      	nop
 80009c6:	2102      	movs	r1, #2
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff ffe1 	bl	8000990 <SPI_GetFlagStatus>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f8      	beq.n	80009c6 <SPI_SendData+0x10>

		//2. Check the DFF bit i CR1
		if(pSPIx->CR1 & ( 1 << SPI_CR1_DFF))
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00e      	beq.n	80009fe <SPI_SendData+0x48>
		{
			//16 bit dff
			//1. Load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	60da      	str	r2, [r3, #12]
			Len--;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
			Len--;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	e00a      	b.n	8000a14 <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	60da      	str	r2, [r3, #12]
			Len--;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1d4      	bne.n	80009c4 <SPI_SendData+0xe>
		}
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SPI_PeripheralControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d106      	bne.n	8000a44 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a42:	e005      	b.n	8000a50 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
	...

08000a5c <__libc_init_array>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a94 <__libc_init_array+0x38>)
 8000a60:	4c0d      	ldr	r4, [pc, #52]	@ (8000a98 <__libc_init_array+0x3c>)
 8000a62:	1b64      	subs	r4, r4, r5
 8000a64:	10a4      	asrs	r4, r4, #2
 8000a66:	2600      	movs	r6, #0
 8000a68:	42a6      	cmp	r6, r4
 8000a6a:	d109      	bne.n	8000a80 <__libc_init_array+0x24>
 8000a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a9c <__libc_init_array+0x40>)
 8000a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8000aa0 <__libc_init_array+0x44>)
 8000a70:	f000 f818 	bl	8000aa4 <_init>
 8000a74:	1b64      	subs	r4, r4, r5
 8000a76:	10a4      	asrs	r4, r4, #2
 8000a78:	2600      	movs	r6, #0
 8000a7a:	42a6      	cmp	r6, r4
 8000a7c:	d105      	bne.n	8000a8a <__libc_init_array+0x2e>
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a84:	4798      	blx	r3
 8000a86:	3601      	adds	r6, #1
 8000a88:	e7ee      	b.n	8000a68 <__libc_init_array+0xc>
 8000a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8e:	4798      	blx	r3
 8000a90:	3601      	adds	r6, #1
 8000a92:	e7f2      	b.n	8000a7a <__libc_init_array+0x1e>
 8000a94:	08000ad0 	.word	0x08000ad0
 8000a98:	08000ad0 	.word	0x08000ad0
 8000a9c:	08000ad0 	.word	0x08000ad0
 8000aa0:	08000ad4 	.word	0x08000ad4

08000aa4 <_init>:
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa6:	bf00      	nop
 8000aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aaa:	bc08      	pop	{r3}
 8000aac:	469e      	mov	lr, r3
 8000aae:	4770      	bx	lr

08000ab0 <_fini>:
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	bf00      	nop
 8000ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ab6:	bc08      	pop	{r3}
 8000ab8:	469e      	mov	lr, r3
 8000aba:	4770      	bx	lr
