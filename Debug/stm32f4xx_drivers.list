
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dac  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000f40  08000f40  00001f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f6c  08000f6c  00001f7c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000f6c  08000f6c  00001f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f74  08000f7c  00001f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f74  08000f74  00001f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f78  08000f78  00001f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000f7c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000f7c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001367  00000000  00000000  00001fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c2  00000000  00000000  0000330d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  000037d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f5  00000000  00000000  00003928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022ea  00000000  00000000  00003a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000019a8  00000000  00000000  00005d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000967a  00000000  00000000  000076af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c8  00000000  00000000  00010d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00011234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f28 	.word	0x08000f28

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000f28 	.word	0x08000f28

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:

//Arduino led
#define	LED_PIN			9

void delay(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <delay+0x12>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a04      	ldr	r2, [pc, #16]	@ (800020c <delay+0x28>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d9f8      	bls.n	80001f0 <delay+0xc>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	0003d08f 	.word	0x0003d08f

08000210 <SPI2_GPIOInits>:
* PB12 --> SPI2_NSS
* ALT function mode : 5
*/

void SPI2_GPIOInits()
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000216:	4b14      	ldr	r3, [pc, #80]	@ (8000268 <SPI2_GPIOInits+0x58>)
 8000218:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 800021a:	2302      	movs	r3, #2
 800021c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800021e:	2305      	movs	r3, #5
 8000220:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000222:	2300      	movs	r3, #0
 8000224:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000226:	2300      	movs	r3, #0
 8000228:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022a:	2302      	movs	r3, #2
 800022c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800022e:	230d      	movs	r3, #13
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fb21 	bl	800087c <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800023a:	230f      	movs	r3, #15
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fb1b 	bl	800087c <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000246:	230e      	movs	r3, #14
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fb15 	bl	800087c <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000252:	230c      	movs	r3, #12
 8000254:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fb0f 	bl	800087c <GPIO_Init>
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40020400 	.word	0x40020400

0800026c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000272:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <SPI2_Inits+0x38>)
 8000274:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000276:	2301      	movs	r3, #1
 8000278:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800027a:	2301      	movs	r3, #1
 800027c:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;	//generates sclk 2Mhz
 800027e:	2302      	movs	r3, #2
 8000280:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000282:	2300      	movs	r3, #0
 8000284:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000286:	2300      	movs	r3, #0
 8000288:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800028a:	2300      	movs	r3, #0
 800028c:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI ;	//Hardware slave managment enabled for NSS pin
 800028e:	2300      	movs	r3, #0
 8000290:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fd1b 	bl	8000cd0 <SPI_Init>
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40003800 	.word	0x40003800

080002a8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	//This is btn gpio configuration
	GpioBtn.pGPIOx = GPIOC;
 80002ae:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <GPIO_ButtonInit+0x2c>)
 80002b0:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002b2:	230d      	movs	r3, #13
 80002b4:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002b6:	2300      	movs	r3, #0
 80002b8:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ba:	2302      	movs	r3, #2
 80002bc:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002be:	2300      	movs	r3, #0
 80002c0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fad9 	bl	800087c <GPIO_Init>
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40020800 	.word	0x40020800

080002d8 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5)
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2bf5      	cmp	r3, #245	@ 0xf5
 80002e6:	d101      	bne.n	80002ec <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	e000      	b.n	80002ee <SPI_VerifyResponse+0x16>
	}

	return 0;
 80002ec:	2300      	movs	r3, #0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <main>:


int main(void)
{
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b092      	sub	sp, #72	@ 0x48
 80002fc:	af00      	add	r7, sp, #0

	uint8_t dummy_write = 0xff;
 80002fe:	23ff      	movs	r3, #255	@ 0xff
 8000300:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t dummy_read;

	GPIO_ButtonInit();
 8000304:	f7ff ffd0 	bl	80002a8 <GPIO_ButtonInit>

	//This function is used to initialize the GPIO pinns to behave as SPI2 pins
	SPI2_GPIOInits();
 8000308:	f7ff ff82 	bl	8000210 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 800030c:	f7ff ffae 	bl	800026c <SPI2_Inits>
	 * Making SSOE 1 does NSS output enable
	 * The NSS pin is automacally managed by the hardware
	 * i.e when SPE=1 , NSS will be pulled to low
	 * and NSS pinn will be high when SPE=0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000310:	2101      	movs	r1, #1
 8000312:	48ce      	ldr	r0, [pc, #824]	@ (800064c <main+0x354>)
 8000314:	f000 fdc8 	bl	8000ea8 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 8000318:	bf00      	nop
 800031a:	210d      	movs	r1, #13
 800031c:	48cc      	ldr	r0, [pc, #816]	@ (8000650 <main+0x358>)
 800031e:	f000 fc51 	bl	8000bc4 <GPIO_ReadFromInputPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d1f8      	bne.n	800031a <main+0x22>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000328:	f7ff ff5c 	bl	80001e4 <delay>

		//Enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800032c:	2101      	movs	r1, #1
 800032e:	48c7      	ldr	r0, [pc, #796]	@ (800064c <main+0x354>)
 8000330:	f000 fd9f 	bl	8000e72 <SPI_PeripheralControl>

		//1. CMD_LED_CTRL	<pin no(1)>		<value(1)>

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000334:	2350      	movs	r3, #80	@ 0x50
 8000336:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2, &commandcode, 1);
 800033a:	f107 0341 	add.w	r3, r7, #65	@ 0x41
 800033e:	2201      	movs	r2, #1
 8000340:	4619      	mov	r1, r3
 8000342:	48c2      	ldr	r0, [pc, #776]	@ (800064c <main+0x354>)
 8000344:	f000 fd27 	bl	8000d96 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000348:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800034c:	2201      	movs	r2, #1
 800034e:	4619      	mov	r1, r3
 8000350:	48be      	ldr	r0, [pc, #760]	@ (800064c <main+0x354>)
 8000352:	f000 fd57 	bl	8000e04 <SPI_ReceiveData>

		//send some dummy bits (1byte) to fetch to response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000356:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800035a:	2201      	movs	r2, #1
 800035c:	4619      	mov	r1, r3
 800035e:	48bb      	ldr	r0, [pc, #748]	@ (800064c <main+0x354>)
 8000360:	f000 fd19 	bl	8000d96 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000364:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000368:	2201      	movs	r2, #1
 800036a:	4619      	mov	r1, r3
 800036c:	48b7      	ldr	r0, [pc, #732]	@ (800064c <main+0x354>)
 800036e:	f000 fd49 	bl	8000e04 <SPI_ReceiveData>

		if (SPI_VerifyResponse(ackbyte))
 8000372:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ffae 	bl	80002d8 <SPI_VerifyResponse>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d00c      	beq.n	800039c <main+0xa4>
		{
			//send arguments
			args[0]= LED_PIN;
 8000382:	2309      	movs	r3, #9
 8000384:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			args[1]= LED_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			SPI_SendData(SPI2, args, 2);
 800038e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000392:	2202      	movs	r2, #2
 8000394:	4619      	mov	r1, r3
 8000396:	48ad      	ldr	r0, [pc, #692]	@ (800064c <main+0x354>)
 8000398:	f000 fcfd 	bl	8000d96 <SPI_SendData>
		//end of COMMAND_LED_CTRL

		//2. CMD_SENSOR_READ <analog pin number(0)>

		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 800039c:	bf00      	nop
 800039e:	210d      	movs	r1, #13
 80003a0:	48ab      	ldr	r0, [pc, #684]	@ (8000650 <main+0x358>)
 80003a2:	f000 fc0f 	bl	8000bc4 <GPIO_ReadFromInputPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1f8      	bne.n	800039e <main+0xa6>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003ac:	f7ff ff1a 	bl	80001e4 <delay>

		commandcode = COMMAND_SENSOR_READ;
 80003b0:	2351      	movs	r3, #81	@ 0x51
 80003b2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

		//send command
		SPI_SendData(SPI2, &commandcode, 1);
 80003b6:	f107 0341 	add.w	r3, r7, #65	@ 0x41
 80003ba:	2201      	movs	r2, #1
 80003bc:	4619      	mov	r1, r3
 80003be:	48a3      	ldr	r0, [pc, #652]	@ (800064c <main+0x354>)
 80003c0:	f000 fce9 	bl	8000d96 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80003c4:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 80003c8:	2201      	movs	r2, #1
 80003ca:	4619      	mov	r1, r3
 80003cc:	489f      	ldr	r0, [pc, #636]	@ (800064c <main+0x354>)
 80003ce:	f000 fd19 	bl	8000e04 <SPI_ReceiveData>

		//send some dummy bits (1byte) to fetch to response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80003d2:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 80003d6:	2201      	movs	r2, #1
 80003d8:	4619      	mov	r1, r3
 80003da:	489c      	ldr	r0, [pc, #624]	@ (800064c <main+0x354>)
 80003dc:	f000 fcdb 	bl	8000d96 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80003e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003e4:	2201      	movs	r2, #1
 80003e6:	4619      	mov	r1, r3
 80003e8:	4898      	ldr	r0, [pc, #608]	@ (800064c <main+0x354>)
 80003ea:	f000 fd0b 	bl	8000e04 <SPI_ReceiveData>

		if (SPI_VerifyResponse(ackbyte))
 80003ee:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff70 	bl	80002d8 <SPI_VerifyResponse>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d020      	beq.n	8000440 <main+0x148>
		{
			args[0]= ANALOG_PIN0;
 80003fe:	2300      	movs	r3, #0
 8000400:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

			//send arguments
			SPI_SendData(SPI2, args, 1);	//sending 1 byte of
 8000404:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000408:	2201      	movs	r2, #1
 800040a:	4619      	mov	r1, r3
 800040c:	488f      	ldr	r0, [pc, #572]	@ (800064c <main+0x354>)
 800040e:	f000 fcc2 	bl	8000d96 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000412:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8000416:	2201      	movs	r2, #1
 8000418:	4619      	mov	r1, r3
 800041a:	488c      	ldr	r0, [pc, #560]	@ (800064c <main+0x354>)
 800041c:	f000 fcf2 	bl	8000e04 <SPI_ReceiveData>

			// insert some delay so that slave can ready with the data
			delay();
 8000420:	f7ff fee0 	bl	80001e4 <delay>

			//send some dummy bits (1byte) to fetch to response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000424:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	4887      	ldr	r0, [pc, #540]	@ (800064c <main+0x354>)
 800042e:	f000 fcb2 	bl	8000d96 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 8000432:	f107 033b 	add.w	r3, r7, #59	@ 0x3b
 8000436:	2201      	movs	r2, #1
 8000438:	4619      	mov	r1, r3
 800043a:	4884      	ldr	r0, [pc, #528]	@ (800064c <main+0x354>)
 800043c:	f000 fce2 	bl	8000e04 <SPI_ReceiveData>
		}

		//3. COMMAND_LED_READ <pin no(1)>

		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 8000440:	bf00      	nop
 8000442:	210d      	movs	r1, #13
 8000444:	4882      	ldr	r0, [pc, #520]	@ (8000650 <main+0x358>)
 8000446:	f000 fbbd 	bl	8000bc4 <GPIO_ReadFromInputPin>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f8      	bne.n	8000442 <main+0x14a>
		// For the De-bouncing of the Button
		delay();
 8000450:	f7ff fec8 	bl	80001e4 <delay>

		//-----------------------------------------
		// Execute CMD_LED_READ <pin no(1)>
		commandcode = COMMAND_LED_READ;
 8000454:	2352      	movs	r3, #82	@ 0x52
 8000456:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		// Send Data
		SPI_SendData(SPI2, &commandcode, 1);
 800045a:	f107 0341 	add.w	r3, r7, #65	@ 0x41
 800045e:	2201      	movs	r2, #1
 8000460:	4619      	mov	r1, r3
 8000462:	487a      	ldr	r0, [pc, #488]	@ (800064c <main+0x354>)
 8000464:	f000 fc97 	bl	8000d96 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 8000468:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800046c:	2201      	movs	r2, #1
 800046e:	4619      	mov	r1, r3
 8000470:	4876      	ldr	r0, [pc, #472]	@ (800064c <main+0x354>)
 8000472:	f000 fcc7 	bl	8000e04 <SPI_ReceiveData>
		// Receive Data
		SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000476:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800047a:	2201      	movs	r2, #1
 800047c:	4619      	mov	r1, r3
 800047e:	4873      	ldr	r0, [pc, #460]	@ (800064c <main+0x354>)
 8000480:	f000 fc89 	bl	8000d96 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000484:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000488:	2201      	movs	r2, #1
 800048a:	4619      	mov	r1, r3
 800048c:	486f      	ldr	r0, [pc, #444]	@ (800064c <main+0x354>)
 800048e:	f000 fcb9 	bl	8000e04 <SPI_ReceiveData>
		if( SPI_VerifyResponse(ackbyte) )
 8000492:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff1e 	bl	80002d8 <SPI_VerifyResponse>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d020      	beq.n	80004e4 <main+0x1ec>
		{
			// Send Arguments
			args[0] = LED_PIN;
 80004a2:	2309      	movs	r3, #9
 80004a4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			SPI_SendData(SPI2, args, 1);
 80004a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004ac:	2201      	movs	r2, #1
 80004ae:	4619      	mov	r1, r3
 80004b0:	4866      	ldr	r0, [pc, #408]	@ (800064c <main+0x354>)
 80004b2:	f000 fc70 	bl	8000d96 <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 80004b6:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 80004ba:	2201      	movs	r2, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	4863      	ldr	r0, [pc, #396]	@ (800064c <main+0x354>)
 80004c0:	f000 fca0 	bl	8000e04 <SPI_ReceiveData>
			delay();
 80004c4:	f7ff fe8e 	bl	80001e4 <delay>
			// Receive Data
			SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 80004c8:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	485e      	ldr	r0, [pc, #376]	@ (800064c <main+0x354>)
 80004d2:	f000 fc60 	bl	8000d96 <SPI_SendData>
			uint8_t led_read;
			SPI_ReceiveData(SPI2, &led_read, 1);
 80004d6:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	485b      	ldr	r0, [pc, #364]	@ (800064c <main+0x354>)
 80004e0:	f000 fc90 	bl	8000e04 <SPI_ReceiveData>
		}

		//4. COMMAND_PRINT <len(2)> 	<message(len)>
		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 80004e4:	bf00      	nop
 80004e6:	210d      	movs	r1, #13
 80004e8:	4859      	ldr	r0, [pc, #356]	@ (8000650 <main+0x358>)
 80004ea:	f000 fb6b 	bl	8000bc4 <GPIO_ReadFromInputPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1f8      	bne.n	80004e6 <main+0x1ee>
		// For the De-bouncing of the Button
		delay();
 80004f4:	f7ff fe76 	bl	80001e4 <delay>


		// Execute CMD_PRINT <length(2)> <message(length)>
		commandcode = COMMAND_PRINT;
 80004f8:	2353      	movs	r3, #83	@ 0x53
 80004fa:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		// Send Data
		SPI_SendData(SPI2, &commandcode, 1);
 80004fe:	f107 0341 	add.w	r3, r7, #65	@ 0x41
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	4851      	ldr	r0, [pc, #324]	@ (800064c <main+0x354>)
 8000508:	f000 fc45 	bl	8000d96 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 800050c:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8000510:	2201      	movs	r2, #1
 8000512:	4619      	mov	r1, r3
 8000514:	484d      	ldr	r0, [pc, #308]	@ (800064c <main+0x354>)
 8000516:	f000 fc75 	bl	8000e04 <SPI_ReceiveData>
		// Receive Data
		SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 800051a:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800051e:	2201      	movs	r2, #1
 8000520:	4619      	mov	r1, r3
 8000522:	484a      	ldr	r0, [pc, #296]	@ (800064c <main+0x354>)
 8000524:	f000 fc37 	bl	8000d96 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000528:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800052c:	2201      	movs	r2, #1
 800052e:	4619      	mov	r1, r3
 8000530:	4846      	ldr	r0, [pc, #280]	@ (800064c <main+0x354>)
 8000532:	f000 fc67 	bl	8000e04 <SPI_ReceiveData>
		if( SPI_VerifyResponse(ackbyte) )
 8000536:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fecc 	bl	80002d8 <SPI_VerifyResponse>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d02a      	beq.n	800059c <main+0x2a4>
		{
			// Send Arguments
			char secret_message[] = "This is a Secrete Message for the Arduino";
 8000546:	4b43      	ldr	r3, [pc, #268]	@ (8000654 <main+0x35c>)
 8000548:	1d3c      	adds	r4, r7, #4
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	c403      	stmia	r4!, {r0, r1}
 800055a:	8022      	strh	r2, [r4, #0]
			args[0] = strlen(secret_message);
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe38 	bl	80001d4 <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	b2db      	uxtb	r3, r3
 8000568:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			SPI_SendData(SPI2, args, 1);
 800056c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	4835      	ldr	r0, [pc, #212]	@ (800064c <main+0x354>)
 8000576:	f000 fc0e 	bl	8000d96 <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 800057a:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	4832      	ldr	r0, [pc, #200]	@ (800064c <main+0x354>)
 8000584:	f000 fc3e 	bl	8000e04 <SPI_ReceiveData>
			SPI_SendData(SPI2, (uint8_t*)secret_message, strlen(secret_message));
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fe22 	bl	80001d4 <strlen>
 8000590:	4602      	mov	r2, r0
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4619      	mov	r1, r3
 8000596:	482d      	ldr	r0, [pc, #180]	@ (800064c <main+0x354>)
 8000598:	f000 fbfd 	bl	8000d96 <SPI_SendData>
		}


		//5.COMMAND_ID_READ
		// Wait for button press
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 800059c:	bf00      	nop
 800059e:	210d      	movs	r1, #13
 80005a0:	482b      	ldr	r0, [pc, #172]	@ (8000650 <main+0x358>)
 80005a2:	f000 fb0f 	bl	8000bc4 <GPIO_ReadFromInputPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1f8      	bne.n	800059e <main+0x2a6>
		// For the De-bouncing of the Button
		delay();
 80005ac:	f7ff fe1a 	bl	80001e4 <delay>


		// Execute CMD_ID_READ
		commandcode = COMMAND_ID_READ;
 80005b0:	2354      	movs	r3, #84	@ 0x54
 80005b2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		// Send Data
		SPI_SendData(SPI2, &commandcode, 1);
 80005b6:	f107 0341 	add.w	r3, r7, #65	@ 0x41
 80005ba:	2201      	movs	r2, #1
 80005bc:	4619      	mov	r1, r3
 80005be:	4823      	ldr	r0, [pc, #140]	@ (800064c <main+0x354>)
 80005c0:	f000 fbe9 	bl	8000d96 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1); // Dummy Read to clear the RXNE
 80005c4:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	481f      	ldr	r0, [pc, #124]	@ (800064c <main+0x354>)
 80005ce:	f000 fc19 	bl	8000e04 <SPI_ReceiveData>
		// Receive Data
		SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 80005d2:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	481c      	ldr	r0, [pc, #112]	@ (800064c <main+0x354>)
 80005dc:	f000 fbdb 	bl	8000d96 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80005e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	4818      	ldr	r0, [pc, #96]	@ (800064c <main+0x354>)
 80005ea:	f000 fc0b 	bl	8000e04 <SPI_ReceiveData>
		if( SPI_VerifyResponse(ackbyte) )
 80005ee:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe70 	bl	80002d8 <SPI_VerifyResponse>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d018      	beq.n	8000630 <main+0x338>
		{
			uint8_t board_id[10];
			for(int i=0; i<10; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
 8000602:	e012      	b.n	800062a <main+0x332>
			{
			// Receive A Byte
			SPI_SendData(SPI2, &dummy_write, 1); // Send dummy byte to fetch the response from the slave
 8000604:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8000608:	2201      	movs	r2, #1
 800060a:	4619      	mov	r1, r3
 800060c:	480f      	ldr	r0, [pc, #60]	@ (800064c <main+0x354>)
 800060e:	f000 fbc2 	bl	8000d96 <SPI_SendData>
			SPI_ReceiveData(SPI2, &board_id[i], 1);
 8000612:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000618:	4413      	add	r3, r2
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	480b      	ldr	r0, [pc, #44]	@ (800064c <main+0x354>)
 8000620:	f000 fbf0 	bl	8000e04 <SPI_ReceiveData>
			for(int i=0; i<10; i++)
 8000624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000626:	3301      	adds	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
 800062a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800062c:	2b09      	cmp	r3, #9
 800062e:	dde9      	ble.n	8000604 <main+0x30c>

		}


		//confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG) );
 8000630:	bf00      	nop
 8000632:	2180      	movs	r1, #128	@ 0x80
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <main+0x354>)
 8000636:	f000 fb9b 	bl	8000d70 <SPI_GetFlagStatus>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f8      	bne.n	8000632 <main+0x33a>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000640:	2100      	movs	r1, #0
 8000642:	4802      	ldr	r0, [pc, #8]	@ (800064c <main+0x354>)
 8000644:	f000 fc15 	bl	8000e72 <SPI_PeripheralControl>
	{
 8000648:	e666      	b.n	8000318 <main+0x20>
 800064a:	bf00      	nop
 800064c:	40003800 	.word	0x40003800
 8000650:	40020800 	.word	0x40020800
 8000654:	08000f40 	.word	0x08000f40

08000658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000658:	480d      	ldr	r0, [pc, #52]	@ (8000690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800065c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <LoopForever+0x6>)
  ldr r1, =_edata
 8000662:	490d      	ldr	r1, [pc, #52]	@ (8000698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <LoopForever+0xe>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000678:	4c0a      	ldr	r4, [pc, #40]	@ (80006a4 <LoopForever+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000686:	f000 fc2b 	bl	8000ee0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800068a:	f7ff fe35 	bl	80002f8 <main>

0800068e <LoopForever>:

LoopForever:
  b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   r0, =_estack
 8000690:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800069c:	08000f7c 	.word	0x08000f7c
  ldr r2, =_sbss
 80006a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006a4:	2000001c 	.word	0x2000001c

080006a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC_IRQHandler>
	...

080006ac <GPIO_PeriClockControl>:
 *
 * @Note			-	none
 *
 *******************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d162      	bne.n	8000784 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a64      	ldr	r2, [pc, #400]	@ (8000854 <GPIO_PeriClockControl+0x1a8>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d106      	bne.n	80006d4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80006c6:	4b64      	ldr	r3, [pc, #400]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a63      	ldr	r2, [pc, #396]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
				}else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
 80006d2:	e0b9      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a61      	ldr	r2, [pc, #388]	@ (800085c <GPIO_PeriClockControl+0x1b0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d106      	bne.n	80006ea <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e0:	4a5d      	ldr	r2, [pc, #372]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80006e2:	f043 0302 	orr.w	r3, r3, #2
 80006e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006e8:	e0ae      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a5c      	ldr	r2, [pc, #368]	@ (8000860 <GPIO_PeriClockControl+0x1b4>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d106      	bne.n	8000700 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80006f2:	4b59      	ldr	r3, [pc, #356]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a58      	ldr	r2, [pc, #352]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006fe:	e0a3      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a58      	ldr	r2, [pc, #352]	@ (8000864 <GPIO_PeriClockControl+0x1b8>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d106      	bne.n	8000716 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000708:	4b53      	ldr	r3, [pc, #332]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070c:	4a52      	ldr	r2, [pc, #328]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000714:	e098      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a53      	ldr	r2, [pc, #332]	@ (8000868 <GPIO_PeriClockControl+0x1bc>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d106      	bne.n	800072c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800071e:	4b4e      	ldr	r3, [pc, #312]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a4d      	ldr	r2, [pc, #308]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800072a:	e08d      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a4f      	ldr	r2, [pc, #316]	@ (800086c <GPIO_PeriClockControl+0x1c0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d106      	bne.n	8000742 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000734:	4b48      	ldr	r3, [pc, #288]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000738:	4a47      	ldr	r2, [pc, #284]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000740:	e082      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a4a      	ldr	r2, [pc, #296]	@ (8000870 <GPIO_PeriClockControl+0x1c4>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800074a:	4b43      	ldr	r3, [pc, #268]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a42      	ldr	r2, [pc, #264]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000756:	e077      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a46      	ldr	r2, [pc, #280]	@ (8000874 <GPIO_PeriClockControl+0x1c8>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000760:	4b3d      	ldr	r3, [pc, #244]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000764:	4a3c      	ldr	r2, [pc, #240]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800076a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800076c:	e06c      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a41      	ldr	r2, [pc, #260]	@ (8000878 <GPIO_PeriClockControl+0x1cc>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d168      	bne.n	8000848 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000776:	4b38      	ldr	r3, [pc, #224]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a37      	ldr	r2, [pc, #220]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 800077c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000782:	e061      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a33      	ldr	r2, [pc, #204]	@ (8000854 <GPIO_PeriClockControl+0x1a8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 800078c:	4b32      	ldr	r3, [pc, #200]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000790:	4a31      	ldr	r2, [pc, #196]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000792:	f023 0301 	bic.w	r3, r3, #1
 8000796:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000798:	e056      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a2f      	ldr	r2, [pc, #188]	@ (800085c <GPIO_PeriClockControl+0x1b0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d106      	bne.n	80007b0 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 80007a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80007a8:	f023 0302 	bic.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007ae:	e04b      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000860 <GPIO_PeriClockControl+0x1b4>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d106      	bne.n	80007c6 <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 80007b8:	4b27      	ldr	r3, [pc, #156]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007bc:	4a26      	ldr	r2, [pc, #152]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80007be:	f023 0304 	bic.w	r3, r3, #4
 80007c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007c4:	e040      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a26      	ldr	r2, [pc, #152]	@ (8000864 <GPIO_PeriClockControl+0x1b8>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d106      	bne.n	80007dc <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 80007ce:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a21      	ldr	r2, [pc, #132]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80007d4:	f023 0308 	bic.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007da:	e035      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a22      	ldr	r2, [pc, #136]	@ (8000868 <GPIO_PeriClockControl+0x1bc>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d106      	bne.n	80007f2 <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 80007e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80007ea:	f023 0310 	bic.w	r3, r3, #16
 80007ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007f0:	e02a      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a1d      	ldr	r2, [pc, #116]	@ (800086c <GPIO_PeriClockControl+0x1c0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d106      	bne.n	8000808 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000800:	f023 0320 	bic.w	r3, r3, #32
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000806:	e01f      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <GPIO_PeriClockControl+0x1c4>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d106      	bne.n	800081e <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000814:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800081a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800081c:	e014      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <GPIO_PeriClockControl+0x1c8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a0b      	ldr	r2, [pc, #44]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 800082c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000832:	e009      	b.n	8000848 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <GPIO_PeriClockControl+0x1cc>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d105      	bne.n	8000848 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000840:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <GPIO_PeriClockControl+0x1ac>)
 8000842:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000846:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40020000 	.word	0x40020000
 8000858:	40023800 	.word	0x40023800
 800085c:	40020400 	.word	0x40020400
 8000860:	40020800 	.word	0x40020800
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40021000 	.word	0x40021000
 800086c:	40021400 	.word	0x40021400
 8000870:	40021800 	.word	0x40021800
 8000874:	40021c00 	.word	0x40021c00
 8000878:	40022000 	.word	0x40022000

0800087c <GPIO_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//temp. register
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff0c 	bl	80006ac <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	795b      	ldrb	r3, [r3, #5]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d820      	bhi.n	80008de <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	795b      	ldrb	r3, [r3, #5]
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	2103      	movs	r1, #3
 80008bc:	fa01 f303 	lsl.w	r3, r1, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	400a      	ands	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6819      	ldr	r1, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	430a      	orrs	r2, r1
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	e0cb      	b.n	8000a76 <GPIO_Init+0x1fa>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	795b      	ldrb	r3, [r3, #5]
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d117      	bne.n	8000916 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80008e6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a14 <GPIO_Init+0x198>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	7912      	ldrb	r2, [r2, #4]
 80008ee:	4611      	mov	r1, r2
 80008f0:	2201      	movs	r2, #1
 80008f2:	408a      	lsls	r2, r1
 80008f4:	4611      	mov	r1, r2
 80008f6:	4a47      	ldr	r2, [pc, #284]	@ (8000a14 <GPIO_Init+0x198>)
 80008f8:	430b      	orrs	r3, r1
 80008fa:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80008fc:	4b45      	ldr	r3, [pc, #276]	@ (8000a14 <GPIO_Init+0x198>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	7912      	ldrb	r2, [r2, #4]
 8000904:	4611      	mov	r1, r2
 8000906:	2201      	movs	r2, #1
 8000908:	408a      	lsls	r2, r1
 800090a:	43d2      	mvns	r2, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a41      	ldr	r2, [pc, #260]	@ (8000a14 <GPIO_Init+0x198>)
 8000910:	400b      	ands	r3, r1
 8000912:	6093      	str	r3, [r2, #8]
 8000914:	e035      	b.n	8000982 <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	2b05      	cmp	r3, #5
 800091c:	d117      	bne.n	800094e <GPIO_Init+0xd2>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800091e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a14 <GPIO_Init+0x198>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	7912      	ldrb	r2, [r2, #4]
 8000926:	4611      	mov	r1, r2
 8000928:	2201      	movs	r2, #1
 800092a:	408a      	lsls	r2, r1
 800092c:	4611      	mov	r1, r2
 800092e:	4a39      	ldr	r2, [pc, #228]	@ (8000a14 <GPIO_Init+0x198>)
 8000930:	430b      	orrs	r3, r1
 8000932:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000934:	4b37      	ldr	r3, [pc, #220]	@ (8000a14 <GPIO_Init+0x198>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	7912      	ldrb	r2, [r2, #4]
 800093c:	4611      	mov	r1, r2
 800093e:	2201      	movs	r2, #1
 8000940:	408a      	lsls	r2, r1
 8000942:	43d2      	mvns	r2, r2
 8000944:	4611      	mov	r1, r2
 8000946:	4a33      	ldr	r2, [pc, #204]	@ (8000a14 <GPIO_Init+0x198>)
 8000948:	400b      	ands	r3, r1
 800094a:	60d3      	str	r3, [r2, #12]
 800094c:	e019      	b.n	8000982 <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	795b      	ldrb	r3, [r3, #5]
 8000952:	2b06      	cmp	r3, #6
 8000954:	d115      	bne.n	8000982 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000956:	4b2f      	ldr	r3, [pc, #188]	@ (8000a14 <GPIO_Init+0x198>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	7912      	ldrb	r2, [r2, #4]
 800095e:	4611      	mov	r1, r2
 8000960:	2201      	movs	r2, #1
 8000962:	408a      	lsls	r2, r1
 8000964:	4611      	mov	r1, r2
 8000966:	4a2b      	ldr	r2, [pc, #172]	@ (8000a14 <GPIO_Init+0x198>)
 8000968:	430b      	orrs	r3, r1
 800096a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800096c:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <GPIO_Init+0x198>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	7912      	ldrb	r2, [r2, #4]
 8000974:	4611      	mov	r1, r2
 8000976:	2201      	movs	r2, #1
 8000978:	408a      	lsls	r2, r1
 800097a:	4611      	mov	r1, r2
 800097c:	4a25      	ldr	r2, [pc, #148]	@ (8000a14 <GPIO_Init+0x198>)
 800097e:	430b      	orrs	r3, r1
 8000980:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1f      	ldr	r2, [pc, #124]	@ (8000a18 <GPIO_Init+0x19c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d04e      	beq.n	8000a3c <GPIO_Init+0x1c0>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a1c <GPIO_Init+0x1a0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d032      	beq.n	8000a0e <GPIO_Init+0x192>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000a20 <GPIO_Init+0x1a4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d02b      	beq.n	8000a0a <GPIO_Init+0x18e>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <GPIO_Init+0x1a8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d024      	beq.n	8000a06 <GPIO_Init+0x18a>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <GPIO_Init+0x1ac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d01d      	beq.n	8000a02 <GPIO_Init+0x186>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a18      	ldr	r2, [pc, #96]	@ (8000a2c <GPIO_Init+0x1b0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d016      	beq.n	80009fe <GPIO_Init+0x182>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a16      	ldr	r2, [pc, #88]	@ (8000a30 <GPIO_Init+0x1b4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d00f      	beq.n	80009fa <GPIO_Init+0x17e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a15      	ldr	r2, [pc, #84]	@ (8000a34 <GPIO_Init+0x1b8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d008      	beq.n	80009f6 <GPIO_Init+0x17a>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a13      	ldr	r2, [pc, #76]	@ (8000a38 <GPIO_Init+0x1bc>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <GPIO_Init+0x176>
 80009ee:	2308      	movs	r3, #8
 80009f0:	e025      	b.n	8000a3e <GPIO_Init+0x1c2>
 80009f2:	2300      	movs	r3, #0
 80009f4:	e023      	b.n	8000a3e <GPIO_Init+0x1c2>
 80009f6:	2307      	movs	r3, #7
 80009f8:	e021      	b.n	8000a3e <GPIO_Init+0x1c2>
 80009fa:	2306      	movs	r3, #6
 80009fc:	e01f      	b.n	8000a3e <GPIO_Init+0x1c2>
 80009fe:	2305      	movs	r3, #5
 8000a00:	e01d      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a02:	2304      	movs	r3, #4
 8000a04:	e01b      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a06:	2303      	movs	r3, #3
 8000a08:	e019      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e017      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e015      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a12:	bf00      	nop
 8000a14:	40013c00 	.word	0x40013c00
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40021400 	.word	0x40021400
 8000a30:	40021800 	.word	0x40021800
 8000a34:	40021c00 	.word	0x40021c00
 8000a38:	40022000 	.word	0x40022000
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a40:	4b5d      	ldr	r3, [pc, #372]	@ (8000bb8 <GPIO_Init+0x33c>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a44:	4a5c      	ldr	r2, [pc, #368]	@ (8000bb8 <GPIO_Init+0x33c>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4a:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000a4c:	7c7a      	ldrb	r2, [r7, #17]
 8000a4e:	7cbb      	ldrb	r3, [r7, #18]
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa02 f103 	lsl.w	r1, r2, r3
 8000a56:	4a59      	ldr	r2, [pc, #356]	@ (8000bbc <GPIO_Init+0x340>)
 8000a58:	7cfb      	ldrb	r3, [r7, #19]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI -> IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a60:	4b57      	ldr	r3, [pc, #348]	@ (8000bc0 <GPIO_Init+0x344>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	7912      	ldrb	r2, [r2, #4]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	408a      	lsls	r2, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4a53      	ldr	r2, [pc, #332]	@ (8000bc0 <GPIO_Init+0x344>)
 8000a72:	430b      	orrs	r3, r1
 8000a74:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	799b      	ldrb	r3, [r3, #6]
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	791b      	ldrb	r3, [r3, #4]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	400a      	ands	r2, r1
 8000aac:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6899      	ldr	r1, [r3, #8]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	430a      	orrs	r2, r1
 8000abc:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	79db      	ldrb	r3, [r3, #7]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	791b      	ldrb	r3, [r3, #4]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	4619      	mov	r1, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	400a      	ands	r2, r1
 8000af0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68d9      	ldr	r1, [r3, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	430a      	orrs	r2, r1
 8000b00:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7a1b      	ldrb	r3, [r3, #8]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	791b      	ldrb	r3, [r3, #4]
 8000b20:	4619      	mov	r1, r3
 8000b22:	2301      	movs	r3, #1
 8000b24:	408b      	lsls	r3, r1
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4619      	mov	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	400a      	ands	r2, r1
 8000b30:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6859      	ldr	r1, [r3, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	795b      	ldrb	r3, [r3, #5]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d131      	bne.n	8000bae <GPIO_Init+0x332>
	{
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	791b      	ldrb	r3, [r3, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) );
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	7c3a      	ldrb	r2, [r7, #16]
 8000b62:	3208      	adds	r2, #8
 8000b64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	7c3a      	ldrb	r2, [r7, #16]
 8000b7c:	4001      	ands	r1, r0
 8000b7e:	3208      	adds	r2, #8
 8000b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	7c3a      	ldrb	r2, [r7, #16]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7a5b      	ldrb	r3, [r3, #9]
 8000b94:	461a      	mov	r2, r3
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	7c3a      	ldrb	r2, [r7, #16]
 8000ba6:	4301      	orrs	r1, r0
 8000ba8:	3208      	adds	r2, #8
 8000baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40013800 	.word	0x40013800
 8000bc0:	40013c00 	.word	0x40013c00

08000bc4 <GPIO_ReadFromInputPin>:
 *
 * @Note			-
 *
 *******************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001 ) ;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	691a      	ldr	r2, [r3, #16]
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]

	return value;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
	...

08000bf0 <SPI_PeriClockControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d12b      	bne.n	8000c5a <SPI_PeriClockControl+0x6a>
		{
			if(pSPIx == SPI1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a2d      	ldr	r2, [pc, #180]	@ (8000cbc <SPI_PeriClockControl+0xcc>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d106      	bne.n	8000c18 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c14:	6453      	str	r3, [r2, #68]	@ 0x44
			}else if (pSPIx == SPI4)
			{
				SPI4_PCLK_DI();
			}
		}
}
 8000c16:	e04b      	b.n	8000cb0 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8000cc4 <SPI_PeriClockControl+0xd4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d106      	bne.n	8000c2e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000c20:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	4a26      	ldr	r2, [pc, #152]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c2c:	e040      	b.n	8000cb0 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI3)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a25      	ldr	r2, [pc, #148]	@ (8000cc8 <SPI_PeriClockControl+0xd8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d106      	bne.n	8000c44 <SPI_PeriClockControl+0x54>
				SPI3_PCLK_EN();
 8000c36:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	4a21      	ldr	r2, [pc, #132]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c40:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c42:	e035      	b.n	8000cb0 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI4)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <SPI_PeriClockControl+0xdc>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d131      	bne.n	8000cb0 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_EN();
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c50:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c56:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c58:	e02a      	b.n	8000cb0 <SPI_PeriClockControl+0xc0>
			if(pSPIx == SPI1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <SPI_PeriClockControl+0xcc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d106      	bne.n	8000c70 <SPI_PeriClockControl+0x80>
				SPI1_PCLK_DI();
 8000c62:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a16      	ldr	r2, [pc, #88]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c6e:	e01f      	b.n	8000cb0 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <SPI_PeriClockControl+0xd4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d106      	bne.n	8000c86 <SPI_PeriClockControl+0x96>
				SPI2_PCLK_DI();
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c82:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c84:	e014      	b.n	8000cb0 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI3)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <SPI_PeriClockControl+0xd8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d106      	bne.n	8000c9c <SPI_PeriClockControl+0xac>
				SPI3_PCLK_DI();
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000c94:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c9a:	e009      	b.n	8000cb0 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI4)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ccc <SPI_PeriClockControl+0xdc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d105      	bne.n	8000cb0 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_DI();
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca8:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <SPI_PeriClockControl+0xd0>)
 8000caa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000cae:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40013000 	.word	0x40013000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40003800 	.word	0x40003800
 8000cc8:	40003c00 	.word	0x40003c00
 8000ccc:	40013400 	.word	0x40013400

08000cd0 <SPI_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle )
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	//Peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff86 	bl	8000bf0 <SPI_PeriClockControl>

	//Configure SPI_CR1 register
	uint32_t tempreg = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	791b      	ldrb	r3, [r3, #4]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	795b      	ldrb	r3, [r3, #5]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d104      	bne.n	8000d06 <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e014      	b.n	8000d30 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	795b      	ldrb	r3, [r3, #5]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d104      	bne.n	8000d18 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e00b      	b.n	8000d30 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	795b      	ldrb	r3, [r3, #5]
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d107      	bne.n	8000d30 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d26:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the SPI serial clock speed (Baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	799b      	ldrb	r3, [r3, #6]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	79db      	ldrb	r3, [r3, #7]
 8000d40:	02db      	lsls	r3, r3, #11
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7a1b      	ldrb	r3, [r3, #8]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7a5b      	ldrb	r3, [r3, #9]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	601a      	str	r2, [r3, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <SPI_GetFlagStatus>:
		pSPIx->SR = 0;
		pSPIx->DR = 0;
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <SPI_SendData>:
 *
 * @Note			- This is blocking call
 *
 *******************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000da2:	e027      	b.n	8000df4 <SPI_SendData+0x5e>
	{
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 8000da4:	bf00      	nop
 8000da6:	2102      	movs	r1, #2
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f7ff ffe1 	bl	8000d70 <SPI_GetFlagStatus>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f8      	beq.n	8000da6 <SPI_SendData+0x10>

		//2. Check the DFF bit i CR1
		if(pSPIx->CR1 & ( 1 << SPI_CR1_DFF))
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00e      	beq.n	8000dde <SPI_SendData+0x48>
		{
			//16 bit dff
			//1. Load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	60da      	str	r2, [r3, #12]
			Len--;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
			Len--;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	e00a      	b.n	8000df4 <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	60da      	str	r2, [r3, #12]
			Len--;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1d4      	bne.n	8000da4 <SPI_SendData+0xe>
		}
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <SPI_ReceiveData>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000e10:	e027      	b.n	8000e62 <SPI_ReceiveData+0x5e>
		{
			// 1. Wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG) == FLAG_RESET);
 8000e12:	bf00      	nop
 8000e14:	2101      	movs	r1, #1
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff ffaa 	bl	8000d70 <SPI_GetFlagStatus>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f8      	beq.n	8000e14 <SPI_ReceiveData+0x10>

			//2. Check the DFF bit i CR1
			if(pSPIx->CR1 & ( 1 << SPI_CR1_DFF))
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00e      	beq.n	8000e4c <SPI_ReceiveData+0x48>
			{
				//16 bit dff
				//1. Load the data from DR to RX buffer address
				*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	801a      	strh	r2, [r3, #0]
				Len--;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	607b      	str	r3, [r7, #4]
				Len--;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	e00a      	b.n	8000e62 <SPI_ReceiveData+0x5e>
			}
			else
			{
				//8 bit DFF
				*pRxBuffer = pSPIx->DR;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	701a      	strb	r2, [r3, #0]
				Len--;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1d4      	bne.n	8000e12 <SPI_ReceiveData+0xe>
			}
		}
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <SPI_PeripheralControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d106      	bne.n	8000e92 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000e90:	e005      	b.n	8000e9e <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <SPI_SSOEConfig>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d106      	bne.n	8000ec8 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f043 0204 	orr.w	r2, r3, #4
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000ec6:	e005      	b.n	8000ed4 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f023 0204 	bic.w	r2, r3, #4
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	605a      	str	r2, [r3, #4]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
	...

08000ee0 <__libc_init_array>:
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8000f18 <__libc_init_array+0x38>)
 8000ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8000f1c <__libc_init_array+0x3c>)
 8000ee6:	1b64      	subs	r4, r4, r5
 8000ee8:	10a4      	asrs	r4, r4, #2
 8000eea:	2600      	movs	r6, #0
 8000eec:	42a6      	cmp	r6, r4
 8000eee:	d109      	bne.n	8000f04 <__libc_init_array+0x24>
 8000ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8000f20 <__libc_init_array+0x40>)
 8000ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8000f24 <__libc_init_array+0x44>)
 8000ef4:	f000 f818 	bl	8000f28 <_init>
 8000ef8:	1b64      	subs	r4, r4, r5
 8000efa:	10a4      	asrs	r4, r4, #2
 8000efc:	2600      	movs	r6, #0
 8000efe:	42a6      	cmp	r6, r4
 8000f00:	d105      	bne.n	8000f0e <__libc_init_array+0x2e>
 8000f02:	bd70      	pop	{r4, r5, r6, pc}
 8000f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f08:	4798      	blx	r3
 8000f0a:	3601      	adds	r6, #1
 8000f0c:	e7ee      	b.n	8000eec <__libc_init_array+0xc>
 8000f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f12:	4798      	blx	r3
 8000f14:	3601      	adds	r6, #1
 8000f16:	e7f2      	b.n	8000efe <__libc_init_array+0x1e>
 8000f18:	08000f74 	.word	0x08000f74
 8000f1c:	08000f74 	.word	0x08000f74
 8000f20:	08000f74 	.word	0x08000f74
 8000f24:	08000f78 	.word	0x08000f78

08000f28 <_init>:
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	bf00      	nop
 8000f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2e:	bc08      	pop	{r3}
 8000f30:	469e      	mov	lr, r3
 8000f32:	4770      	bx	lr

08000f34 <_fini>:
 8000f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f36:	bf00      	nop
 8000f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3a:	bc08      	pop	{r3}
 8000f3c:	469e      	mov	lr, r3
 8000f3e:	4770      	bx	lr
