
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d74  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f08  08000f08  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f08  08000f08  00002018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000f08  08000f08  00002018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000f08  08000f08  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f08  08000f08  00001f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f0c  08000f0c  00001f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000f10  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000018  08000f28  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000f28  00002060  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001350  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000528  00000000  00000000  00003392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  000038c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000104  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002508  00000000  00000000  00003b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001acb  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009b31  00000000  00000000  00007aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011630  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000500  00000000  00000000  00011674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00011b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ef0 	.word	0x08000ef0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000ef0 	.word	0x08000ef0

080001d4 <delay>:

#define MY_ADDR 0x61
#define SLAVE_ADDR 0x68

void delay(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	0003d08f 	.word	0x0003d08f

08000200 <I2C1_GPIOInits>:
 * PB6 -> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <I2C1_GPIOInits+0x40>)
 8000208:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 800020a:	2302      	movs	r3, #2
 800020c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800020e:	2301      	movs	r3, #1
 8000210:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000212:	2301      	movs	r3, #1
 8000214:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000216:	2304      	movs	r3, #4
 8000218:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_NO_6;
 800021e:	2306      	movs	r3, #6
 8000220:	727b      	strb	r3, [r7, #9]
	GPIO_Init(&I2CPins);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f995 	bl	8000554 <GPIO_Init>

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_NO_7;
 800022a:	2307      	movs	r3, #7
 800022c:	727b      	strb	r3, [r7, #9]
	GPIO_Init(&I2CPins);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f98f 	bl	8000554 <GPIO_Init>

}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40020400 	.word	0x40020400

08000244 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000248:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <I2C1_Inits+0x2c>)
 800024a:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <I2C1_Inits+0x30>)
 800024c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800024e:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <I2C1_Inits+0x2c>)
 8000250:	2201      	movs	r2, #1
 8000252:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <I2C1_Inits+0x2c>)
 8000256:	2261      	movs	r2, #97	@ 0x61
 8000258:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800025a:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <I2C1_Inits+0x2c>)
 800025c:	2200      	movs	r2, #0
 800025e:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000260:	4b03      	ldr	r3, [pc, #12]	@ (8000270 <I2C1_Inits+0x2c>)
 8000262:	4a05      	ldr	r2, [pc, #20]	@ (8000278 <I2C1_Inits+0x34>)
 8000264:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000266:	4802      	ldr	r0, [pc, #8]	@ (8000270 <I2C1_Inits+0x2c>)
 8000268:	f000 fc56 	bl	8000b18 <I2C_Init>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000034 	.word	0x20000034
 8000274:	40005400 	.word	0x40005400
 8000278:	000186a0 	.word	0x000186a0

0800027c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	//This is btn gpio configuration
	GpioBtn.pGPIOx = GPIOC;
 8000282:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <GPIO_ButtonInit+0x2c>)
 8000284:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000286:	230d      	movs	r3, #13
 8000288:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028a:	2300      	movs	r3, #0
 800028c:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800028e:	2302      	movs	r3, #2
 8000290:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000292:	2300      	movs	r3, #0
 8000294:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f95b 	bl	8000554 <GPIO_Init>
}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40020800 	.word	0x40020800

080002ac <main>:

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	uint8_t commandcode;

	uint8_t len;

	GPIO_ButtonInit();
 80002b2:	f7ff ffe3 	bl	800027c <GPIO_ButtonInit>

	//I2C pin inits
	I2C1_GPIOInits();
 80002b6:	f7ff ffa3 	bl	8000200 <I2C1_GPIOInits>

	//I2C peripheral configuration
	I2C1_Inits();
 80002ba:	f7ff ffc3 	bl	8000244 <I2C1_Inits>

	//Enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	4817      	ldr	r0, [pc, #92]	@ (8000320 <main+0x74>)
 80002c2:	f000 fb57 	bl	8000974 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	4815      	ldr	r0, [pc, #84]	@ (8000320 <main+0x74>)
 80002ca:	f000 fdd2 	bl	8000e72 <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 80002ce:	bf00      	nop
 80002d0:	210d      	movs	r1, #13
 80002d2:	4814      	ldr	r0, [pc, #80]	@ (8000324 <main+0x78>)
 80002d4:	f000 fae2 	bl	800089c <GPIO_ReadFromInputPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f8      	bne.n	80002d0 <main+0x24>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002de:	f7ff ff79 	bl	80001d4 <delay>

		commandcode = 0x51;
 80002e2:	2351      	movs	r3, #81	@ 0x51
 80002e4:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR);
 80002e6:	1df9      	adds	r1, r7, #7
 80002e8:	2368      	movs	r3, #104	@ 0x68
 80002ea:	2201      	movs	r2, #1
 80002ec:	480e      	ldr	r0, [pc, #56]	@ (8000328 <main+0x7c>)
 80002ee:	f000 fcd4 	bl	8000c9a <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle,&len,1,SLAVE_ADDR);
 80002f2:	1db9      	adds	r1, r7, #6
 80002f4:	2368      	movs	r3, #104	@ 0x68
 80002f6:	2201      	movs	r2, #1
 80002f8:	480b      	ldr	r0, [pc, #44]	@ (8000328 <main+0x7c>)
 80002fa:	f000 fd30 	bl	8000d5e <I2C_MasterReceiveData>

		commandcode = 0x52;
 80002fe:	2352      	movs	r3, #82	@ 0x52
 8000300:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR);
 8000302:	1df9      	adds	r1, r7, #7
 8000304:	2368      	movs	r3, #104	@ 0x68
 8000306:	2201      	movs	r2, #1
 8000308:	4807      	ldr	r0, [pc, #28]	@ (8000328 <main+0x7c>)
 800030a:	f000 fcc6 	bl	8000c9a <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle,rcv_buf,len,SLAVE_ADDR);
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	461a      	mov	r2, r3
 8000312:	2368      	movs	r3, #104	@ 0x68
 8000314:	4905      	ldr	r1, [pc, #20]	@ (800032c <main+0x80>)
 8000316:	4804      	ldr	r0, [pc, #16]	@ (8000328 <main+0x7c>)
 8000318:	f000 fd21 	bl	8000d5e <I2C_MasterReceiveData>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 800031c:	e7d7      	b.n	80002ce <main+0x22>
 800031e:	bf00      	nop
 8000320:	40005400 	.word	0x40005400
 8000324:	40020800 	.word	0x40020800
 8000328:	20000034 	.word	0x20000034
 800032c:	20000040 	.word	0x20000040

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 fda3 	bl	8000ea8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000362:	f7ff ffa3 	bl	80002ac <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000374:	08000f10 	.word	0x08000f10
  ldr r2, =_sbss
 8000378:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800037c:	20000060 	.word	0x20000060

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <GPIO_PeriClockControl>:
 *
 * @Note			-	none
 *
 *******************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d162      	bne.n	800045c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a64      	ldr	r2, [pc, #400]	@ (800052c <GPIO_PeriClockControl+0x1a8>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800039e:	4b64      	ldr	r3, [pc, #400]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a2:	4a63      	ldr	r2, [pc, #396]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6313      	str	r3, [r2, #48]	@ 0x30
				}else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
 80003aa:	e0b9      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a61      	ldr	r2, [pc, #388]	@ (8000534 <GPIO_PeriClockControl+0x1b0>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003b4:	4b5e      	ldr	r3, [pc, #376]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b8:	4a5d      	ldr	r2, [pc, #372]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003ba:	f043 0302 	orr.w	r3, r3, #2
 80003be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c0:	e0ae      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a5c      	ldr	r2, [pc, #368]	@ (8000538 <GPIO_PeriClockControl+0x1b4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ca:	4b59      	ldr	r3, [pc, #356]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a58      	ldr	r2, [pc, #352]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d6:	e0a3      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a58      	ldr	r2, [pc, #352]	@ (800053c <GPIO_PeriClockControl+0x1b8>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003e0:	4b53      	ldr	r3, [pc, #332]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e4:	4a52      	ldr	r2, [pc, #328]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ec:	e098      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a53      	ldr	r2, [pc, #332]	@ (8000540 <GPIO_PeriClockControl+0x1bc>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	f043 0310 	orr.w	r3, r3, #16
 8000400:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000402:	e08d      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a4f      	ldr	r2, [pc, #316]	@ (8000544 <GPIO_PeriClockControl+0x1c0>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800040c:	4b48      	ldr	r3, [pc, #288]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000410:	4a47      	ldr	r2, [pc, #284]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000418:	e082      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a4a      	ldr	r2, [pc, #296]	@ (8000548 <GPIO_PeriClockControl+0x1c4>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000422:	4b43      	ldr	r3, [pc, #268]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000426:	4a42      	ldr	r2, [pc, #264]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800042c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042e:	e077      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a46      	ldr	r2, [pc, #280]	@ (800054c <GPIO_PeriClockControl+0x1c8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000438:	4b3d      	ldr	r3, [pc, #244]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043c:	4a3c      	ldr	r2, [pc, #240]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800043e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000442:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000444:	e06c      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a41      	ldr	r2, [pc, #260]	@ (8000550 <GPIO_PeriClockControl+0x1cc>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d168      	bne.n	8000520 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800044e:	4b38      	ldr	r3, [pc, #224]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000452:	4a37      	ldr	r2, [pc, #220]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000458:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045a:	e061      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a33      	ldr	r2, [pc, #204]	@ (800052c <GPIO_PeriClockControl+0x1a8>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 8000464:	4b32      	ldr	r3, [pc, #200]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000468:	4a31      	ldr	r2, [pc, #196]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000470:	e056      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a2f      	ldr	r2, [pc, #188]	@ (8000534 <GPIO_PeriClockControl+0x1b0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047e:	4a2c      	ldr	r2, [pc, #176]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000480:	f023 0302 	bic.w	r3, r3, #2
 8000484:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000486:	e04b      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a2b      	ldr	r2, [pc, #172]	@ (8000538 <GPIO_PeriClockControl+0x1b4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000496:	f023 0304 	bic.w	r3, r3, #4
 800049a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049c:	e040      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a26      	ldr	r2, [pc, #152]	@ (800053c <GPIO_PeriClockControl+0x1b8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 80004a6:	4b22      	ldr	r3, [pc, #136]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004aa:	4a21      	ldr	r2, [pc, #132]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004ac:	f023 0308 	bic.w	r3, r3, #8
 80004b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b2:	e035      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a22      	ldr	r2, [pc, #136]	@ (8000540 <GPIO_PeriClockControl+0x1bc>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 80004bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004c2:	f023 0310 	bic.w	r3, r3, #16
 80004c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c8:	e02a      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000544 <GPIO_PeriClockControl+0x1c0>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 80004d2:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a16      	ldr	r2, [pc, #88]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004d8:	f023 0320 	bic.w	r3, r3, #32
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004de:	e01f      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a19      	ldr	r2, [pc, #100]	@ (8000548 <GPIO_PeriClockControl+0x1c4>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f4:	e014      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a14      	ldr	r2, [pc, #80]	@ (800054c <GPIO_PeriClockControl+0x1c8>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050a:	e009      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <GPIO_PeriClockControl+0x1cc>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d105      	bne.n	8000520 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000518:	4a05      	ldr	r2, [pc, #20]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800051a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800051e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40020000 	.word	0x40020000
 8000530:	40023800 	.word	0x40023800
 8000534:	40020400 	.word	0x40020400
 8000538:	40020800 	.word	0x40020800
 800053c:	40020c00 	.word	0x40020c00
 8000540:	40021000 	.word	0x40021000
 8000544:	40021400 	.word	0x40021400
 8000548:	40021800 	.word	0x40021800
 800054c:	40021c00 	.word	0x40021c00
 8000550:	40022000 	.word	0x40022000

08000554 <GPIO_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle )
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//temp. register
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff0c 	bl	8000384 <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d820      	bhi.n	80005b6 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	2103      	movs	r1, #3
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	43db      	mvns	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	400a      	ands	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6819      	ldr	r1, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	e0cb      	b.n	800074e <GPIO_Init+0x1fa>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	795b      	ldrb	r3, [r3, #5]
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d117      	bne.n	80005ee <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005be:	4b4b      	ldr	r3, [pc, #300]	@ (80006ec <GPIO_Init+0x198>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a47      	ldr	r2, [pc, #284]	@ (80006ec <GPIO_Init+0x198>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005d4:	4b45      	ldr	r3, [pc, #276]	@ (80006ec <GPIO_Init+0x198>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	43d2      	mvns	r2, r2
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a41      	ldr	r2, [pc, #260]	@ (80006ec <GPIO_Init+0x198>)
 80005e8:	400b      	ands	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
 80005ec:	e035      	b.n	800065a <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	795b      	ldrb	r3, [r3, #5]
 80005f2:	2b05      	cmp	r3, #5
 80005f4:	d117      	bne.n	8000626 <GPIO_Init+0xd2>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005f6:	4b3d      	ldr	r3, [pc, #244]	@ (80006ec <GPIO_Init+0x198>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	4611      	mov	r1, r2
 8000600:	2201      	movs	r2, #1
 8000602:	408a      	lsls	r2, r1
 8000604:	4611      	mov	r1, r2
 8000606:	4a39      	ldr	r2, [pc, #228]	@ (80006ec <GPIO_Init+0x198>)
 8000608:	430b      	orrs	r3, r1
 800060a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800060c:	4b37      	ldr	r3, [pc, #220]	@ (80006ec <GPIO_Init+0x198>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	43d2      	mvns	r2, r2
 800061c:	4611      	mov	r1, r2
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <GPIO_Init+0x198>)
 8000620:	400b      	ands	r3, r1
 8000622:	60d3      	str	r3, [r2, #12]
 8000624:	e019      	b.n	800065a <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	2b06      	cmp	r3, #6
 800062c:	d115      	bne.n	800065a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800062e:	4b2f      	ldr	r3, [pc, #188]	@ (80006ec <GPIO_Init+0x198>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	7912      	ldrb	r2, [r2, #4]
 8000636:	4611      	mov	r1, r2
 8000638:	2201      	movs	r2, #1
 800063a:	408a      	lsls	r2, r1
 800063c:	4611      	mov	r1, r2
 800063e:	4a2b      	ldr	r2, [pc, #172]	@ (80006ec <GPIO_Init+0x198>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <GPIO_Init+0x198>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	4611      	mov	r1, r2
 8000654:	4a25      	ldr	r2, [pc, #148]	@ (80006ec <GPIO_Init+0x198>)
 8000656:	430b      	orrs	r3, r1
 8000658:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1f      	ldr	r2, [pc, #124]	@ (80006f0 <GPIO_Init+0x19c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d04e      	beq.n	8000714 <GPIO_Init+0x1c0>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <GPIO_Init+0x1a0>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d032      	beq.n	80006e6 <GPIO_Init+0x192>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <GPIO_Init+0x1a4>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d02b      	beq.n	80006e2 <GPIO_Init+0x18e>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a1b      	ldr	r2, [pc, #108]	@ (80006fc <GPIO_Init+0x1a8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d024      	beq.n	80006de <GPIO_Init+0x18a>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	@ (8000700 <GPIO_Init+0x1ac>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d01d      	beq.n	80006da <GPIO_Init+0x186>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a18      	ldr	r2, [pc, #96]	@ (8000704 <GPIO_Init+0x1b0>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d016      	beq.n	80006d6 <GPIO_Init+0x182>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a16      	ldr	r2, [pc, #88]	@ (8000708 <GPIO_Init+0x1b4>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d00f      	beq.n	80006d2 <GPIO_Init+0x17e>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a15      	ldr	r2, [pc, #84]	@ (800070c <GPIO_Init+0x1b8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d008      	beq.n	80006ce <GPIO_Init+0x17a>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <GPIO_Init+0x1bc>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d101      	bne.n	80006ca <GPIO_Init+0x176>
 80006c6:	2308      	movs	r3, #8
 80006c8:	e025      	b.n	8000716 <GPIO_Init+0x1c2>
 80006ca:	2300      	movs	r3, #0
 80006cc:	e023      	b.n	8000716 <GPIO_Init+0x1c2>
 80006ce:	2307      	movs	r3, #7
 80006d0:	e021      	b.n	8000716 <GPIO_Init+0x1c2>
 80006d2:	2306      	movs	r3, #6
 80006d4:	e01f      	b.n	8000716 <GPIO_Init+0x1c2>
 80006d6:	2305      	movs	r3, #5
 80006d8:	e01d      	b.n	8000716 <GPIO_Init+0x1c2>
 80006da:	2304      	movs	r3, #4
 80006dc:	e01b      	b.n	8000716 <GPIO_Init+0x1c2>
 80006de:	2303      	movs	r3, #3
 80006e0:	e019      	b.n	8000716 <GPIO_Init+0x1c2>
 80006e2:	2302      	movs	r3, #2
 80006e4:	e017      	b.n	8000716 <GPIO_Init+0x1c2>
 80006e6:	2301      	movs	r3, #1
 80006e8:	e015      	b.n	8000716 <GPIO_Init+0x1c2>
 80006ea:	bf00      	nop
 80006ec:	40013c00 	.word	0x40013c00
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40021000 	.word	0x40021000
 8000704:	40021400 	.word	0x40021400
 8000708:	40021800 	.word	0x40021800
 800070c:	40021c00 	.word	0x40021c00
 8000710:	40022000 	.word	0x40022000
 8000714:	2300      	movs	r3, #0
 8000716:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000718:	4b5d      	ldr	r3, [pc, #372]	@ (8000890 <GPIO_Init+0x33c>)
 800071a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071c:	4a5c      	ldr	r2, [pc, #368]	@ (8000890 <GPIO_Init+0x33c>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000722:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000724:	7c7a      	ldrb	r2, [r7, #17]
 8000726:	7cbb      	ldrb	r3, [r7, #18]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	fa02 f103 	lsl.w	r1, r2, r3
 800072e:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <GPIO_Init+0x340>)
 8000730:	7cfb      	ldrb	r3, [r7, #19]
 8000732:	3302      	adds	r3, #2
 8000734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI -> IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000738:	4b57      	ldr	r3, [pc, #348]	@ (8000898 <GPIO_Init+0x344>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	7912      	ldrb	r2, [r2, #4]
 8000740:	4611      	mov	r1, r2
 8000742:	2201      	movs	r2, #1
 8000744:	408a      	lsls	r2, r1
 8000746:	4611      	mov	r1, r2
 8000748:	4a53      	ldr	r2, [pc, #332]	@ (8000898 <GPIO_Init+0x344>)
 800074a:	430b      	orrs	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	799b      	ldrb	r3, [r3, #6]
 800075a:	461a      	mov	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	2103      	movs	r1, #3
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	43db      	mvns	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	400a      	ands	r2, r1
 8000784:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6899      	ldr	r1, [r3, #8]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	430a      	orrs	r2, r1
 8000794:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	79db      	ldrb	r3, [r3, #7]
 800079e:	461a      	mov	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	68da      	ldr	r2, [r3, #12]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	2103      	movs	r1, #3
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43db      	mvns	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	400a      	ands	r2, r1
 80007c8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68d9      	ldr	r1, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7a1b      	ldrb	r3, [r3, #8]
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	4619      	mov	r1, r3
 80007fa:	2301      	movs	r3, #1
 80007fc:	408b      	lsls	r3, r1
 80007fe:	43db      	mvns	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	400a      	ands	r2, r1
 8000808:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6859      	ldr	r1, [r3, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	430a      	orrs	r2, r1
 8000818:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d131      	bne.n	8000886 <GPIO_Init+0x332>
	{
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) );
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	7c3a      	ldrb	r2, [r7, #16]
 800083a:	3208      	adds	r2, #8
 800083c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	220f      	movs	r2, #15
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	7c3a      	ldrb	r2, [r7, #16]
 8000854:	4001      	ands	r1, r0
 8000856:	3208      	adds	r2, #8
 8000858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	7c3a      	ldrb	r2, [r7, #16]
 8000862:	3208      	adds	r2, #8
 8000864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7a5b      	ldrb	r3, [r3, #9]
 800086c:	461a      	mov	r2, r3
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	7c3a      	ldrb	r2, [r7, #16]
 800087e:	4301      	orrs	r1, r0
 8000880:	3208      	adds	r2, #8
 8000882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40013800 	.word	0x40013800
 8000898:	40013c00 	.word	0x40013c00

0800089c <GPIO_ReadFromInputPin>:
 *
 * @Note			-
 *
 *******************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001 ) ;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	691a      	ldr	r2, [r3, #16]
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	fa22 f303 	lsr.w	r3, r2, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]

	return value;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAdressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <I2C_ExecuteAdressPhaseWrite>:

static void I2C_ExecuteAdressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 			//SlaveAddr is Slave address + r/w bit=0 //~(1) -> 0b11111110 sa & dobijamo da je lsb 0
 80008f6:	78fb      	ldrb	r3, [r7, #3]
 80008f8:	f023 0301 	bic.w	r3, r3, #1
 80008fc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008fe:	78fa      	ldrb	r2, [r7, #3]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	611a      	str	r2, [r3, #16]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <I2C_ExecuteAdressPhaseRead>:

static void I2C_ExecuteAdressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; 			//SlaveAddr is Slave address + r/w bit=0 //~(1) -> 0b11111110 sa & dobijamo da je lsb 0
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000928:	78fa      	ldrb	r2, [r7, #3]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	611a      	str	r2, [r3, #16]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;		//(void) → da kompajler ne kuka što se ta promenljiva ne koristi
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <I2C_PeripheralControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d106      	bne.n	8000994 <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= ( 1 << I2C_CR1_PE );
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f043 0201 	orr.w	r2, r3, #1
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->CR1 &= ~(1 << 0);
		}
}
 8000992:	e005      	b.n	80009a0 <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1 << 0);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f023 0201 	bic.w	r2, r3, #1
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
	...

080009ac <I2C_PeriClockControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d120      	bne.n	8000a00 <I2C_PeriClockControl+0x54>
		{
			if(pI2Cx == I2C1)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <I2C_PeriClockControl+0xa0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d106      	bne.n	80009d4 <I2C_PeriClockControl+0x28>
			{
				I2C1_PCLK_EN();
 80009c6:	4b22      	ldr	r3, [pc, #136]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a21      	ldr	r2, [pc, #132]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 80009cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
			}else if (pI2Cx == I2C3)
			{
				I2C3_PCLK_DI();
			}
		}
}
 80009d2:	e035      	b.n	8000a40 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <I2C_PeriClockControl+0xa0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d106      	bne.n	80009ea <I2C_PeriClockControl+0x3e>
				I2C2_PCLK_EN();
 80009dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 80009e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009e6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009e8:	e02a      	b.n	8000a40 <I2C_PeriClockControl+0x94>
			else if (pI2Cx == I2C3)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <I2C_PeriClockControl+0xa0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d126      	bne.n	8000a40 <I2C_PeriClockControl+0x94>
				I2C3_PCLK_EN();
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a16      	ldr	r2, [pc, #88]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 80009f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009fe:	e01f      	b.n	8000a40 <I2C_PeriClockControl+0x94>
			if(pI2Cx == I2C1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <I2C_PeriClockControl+0xa0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d106      	bne.n	8000a16 <I2C_PeriClockControl+0x6a>
				I2C1_PCLK_DI();
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 8000a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a14:	e014      	b.n	8000a40 <I2C_PeriClockControl+0x94>
			}else if (pI2Cx == I2C2)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <I2C_PeriClockControl+0xa0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d106      	bne.n	8000a2c <I2C_PeriClockControl+0x80>
				I2C2_PCLK_DI();
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a0b      	ldr	r2, [pc, #44]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 8000a24:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a2a:	e009      	b.n	8000a40 <I2C_PeriClockControl+0x94>
			}else if (pI2Cx == I2C3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <I2C_PeriClockControl+0xa0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d105      	bne.n	8000a40 <I2C_PeriClockControl+0x94>
				I2C3_PCLK_DI();
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <I2C_PeriClockControl+0xa4>)
 8000a3a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000a3e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40023800 	.word	0x40023800

08000a54 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
	...

08000a64 <RCC_GetPLCK1Value>:

uint32_t RCC_GetPLCK1Value(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = (RCC->CFGR >> 2) & 0x3;				//0x3 -> 0b0011
 8000a6a:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <RCC_GetPLCK1Value+0xa0>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000a78:	7a7b      	ldrb	r3, [r7, #9]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <RCC_GetPLCK1Value+0x20>
	{
		SystemClk = 16000000;						//HSI
 8000a7e:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <RCC_GetPLCK1Value+0xa4>)
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e00b      	b.n	8000a9c <RCC_GetPLCK1Value+0x38>
	}
	else if(clksrc == 1)
 8000a84:	7a7b      	ldrb	r3, [r7, #9]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d102      	bne.n	8000a90 <RCC_GetPLCK1Value+0x2c>
	{
		SystemClk = 8000000;						//HSE
 8000a8a:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <RCC_GetPLCK1Value+0xa8>)
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	e005      	b.n	8000a9c <RCC_GetPLCK1Value+0x38>
	}
	else if(clksrc == 2)
 8000a90:	7a7b      	ldrb	r3, [r7, #9]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d102      	bne.n	8000a9c <RCC_GetPLCK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();		//PLL output
 8000a96:	f7ff ffdd 	bl	8000a54 <RCC_GetPLLOutputClock>
 8000a9a:	60f8      	str	r0, [r7, #12]
	}

	//For AHB
	temp = (RCC->CFGR >> 4) & 0xF;					//0xF -> 0b1111
 8000a9c:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <RCC_GetPLCK1Value+0xa0>)
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	091b      	lsrs	r3, r3, #4
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f003 030f 	and.w	r3, r3, #15
 8000aa8:	723b      	strb	r3, [r7, #8]

	if(temp < 8)									//0x8 -> 0b1000
 8000aaa:	7a3b      	ldrb	r3, [r7, #8]
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	d802      	bhi.n	8000ab6 <RCC_GetPLCK1Value+0x52>
	{
		ahbp = 1;									//AHB Prescaler
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	72fb      	strb	r3, [r7, #11]
 8000ab4:	e005      	b.n	8000ac2 <RCC_GetPLCK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000ab6:	7a3b      	ldrb	r3, [r7, #8]
 8000ab8:	3b08      	subs	r3, #8
 8000aba:	4a15      	ldr	r2, [pc, #84]	@ (8000b10 <RCC_GetPLCK1Value+0xac>)
 8000abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac0:	72fb      	strb	r3, [r7, #11]
	}

	//For APB1
	temp = (RCC->CFGR >> 10) & 0x7;					//0xF -> 0b0111
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <RCC_GetPLCK1Value+0xa0>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	0a9b      	lsrs	r3, r3, #10
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	723b      	strb	r3, [r7, #8]

	if(temp < 4)									//0x4 -> 0b0100
 8000ad0:	7a3b      	ldrb	r3, [r7, #8]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d802      	bhi.n	8000adc <RCC_GetPLCK1Value+0x78>
	{
		apb1p = 1;									//APB Prescaler
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	72bb      	strb	r3, [r7, #10]
 8000ada:	e005      	b.n	8000ae8 <RCC_GetPLCK1Value+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000adc:	7a3b      	ldrb	r3, [r7, #8]
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b14 <RCC_GetPLCK1Value+0xb0>)
 8000ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae6:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8000af0:	7abb      	ldrb	r3, [r7, #10]
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	00f42400 	.word	0x00f42400
 8000b0c:	007a1200 	.word	0x007a1200
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000010 	.word	0x20000010

08000b18 <I2C_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]

	//Enable the clock for i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff3e 	bl	80009ac <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle -> I2C_Config.I2C_ACKControl << 10 ;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7a5b      	ldrb	r3, [r3, #9]
 8000b34:	029b      	lsls	r3, r3, #10
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	601a      	str	r2, [r3, #0]

	//Configure the FREQ field of CR2
	tempreg = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPLCK1Value() / 1000000U ;
 8000b48:	f7ff ff8c 	bl	8000a64 <RCC_GetPLCK1Value>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a46      	ldr	r2, [pc, #280]	@ (8000c68 <I2C_Init+0x150>)
 8000b50:	fba2 2303 	umull	r2, r3, r2, r3
 8000b54:	0c9b      	lsrs	r3, r3, #18
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F) ;		//0b0011 1111
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b66:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7a1b      	ldrb	r3, [r3, #8]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b7a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	4a36      	ldr	r2, [pc, #216]	@ (8000c6c <I2C_Init+0x154>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d80f      	bhi.n	8000bb6 <I2C_Init+0x9e>
	{
		//Mode is standard mode
		ccr_value = RCC_GetPLCK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000b96:	f7ff ff65 	bl	8000a64 <RCC_GetPLCK1Value>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000ba8:	897b      	ldrh	r3, [r7, #10]
 8000baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e02c      	b.n	8000c10 <I2C_Init+0xf8>
	}
	else
	{
		//Mode is fast mode
		tempreg |= ( 1 << 15 );
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bbc:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	895b      	ldrh	r3, [r3, #10]
 8000bc2:	039b      	lsls	r3, r3, #14
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	895b      	ldrh	r3, [r3, #10]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10b      	bne.n	8000bea <I2C_Init+0xd2>
		{
			ccr_value = RCC_GetPLCK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000bd2:	f7ff ff47 	bl	8000a64 <RCC_GetPLCK1Value>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000be6:	817b      	strh	r3, [r7, #10]
 8000be8:	e00c      	b.n	8000c04 <I2C_Init+0xec>
		}
		else
		{
			ccr_value = RCC_GetPLCK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000bea:	f7ff ff3b 	bl	8000a64 <RCC_GetPLCK1Value>
 8000bee:	4601      	mov	r1, r0
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	009a      	lsls	r2, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c02:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c04:	897b      	ldrh	r3, [r7, #10]
 8000c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a13      	ldr	r2, [pc, #76]	@ (8000c6c <I2C_Init+0x154>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d809      	bhi.n	8000c36 <I2C_Init+0x11e>
	{
		//Mode is standard mode
		tempreg = (RCC_GetPLCK1Value() / 1000000U) + 1 ;
 8000c22:	f7ff ff1f 	bl	8000a64 <RCC_GetPLCK1Value>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a0f      	ldr	r2, [pc, #60]	@ (8000c68 <I2C_Init+0x150>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0c9b      	lsrs	r3, r3, #18
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e00d      	b.n	8000c52 <I2C_Init+0x13a>
	}
	else
	{
		//Mode is fast mode
		tempreg = ((RCC_GetPLCK1Value() * 300) / 1000000000U) + 1 ;
 8000c36:	f7ff ff15 	bl	8000a64 <RCC_GetPLCK1Value>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	0a5b      	lsrs	r3, r3, #9
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <I2C_Init+0x158>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	09db      	lsrs	r3, r3, #7
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F); 	//00111111
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c5c:	621a      	str	r2, [r3, #32]
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	431bde83 	.word	0x431bde83
 8000c6c:	000186a0 	.word	0x000186a0
 8000c70:	00044b83 	.word	0x00044b83

08000c74 <I2C_GetFlagStatus>:
{
	//TODO
}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695a      	ldr	r2, [r3, #20]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <I2C_MasterSendData>:
 *
 * @Note			-
 *
 *******************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fe0a 	bl	80008c6 <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be streched (pulled to LOW)
	while( ! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8000cb2:	bf00      	nop
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ffda 	bl	8000c74 <I2C_GetFlagStatus>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f6      	beq.n	8000cb4 <I2C_MasterSendData+0x1a>

	//3. Send the adrress of the slave with r/w bit set to w(0) (total 8 bits)
	I2C_ExecuteAdressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	78fa      	ldrb	r2, [r7, #3]
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe08 	bl	80008e4 <I2C_ExecuteAdressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( ! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000cd4:	bf00      	nop
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ffc9 	bl	8000c74 <I2C_GetFlagStatus>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f6      	beq.n	8000cd6 <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//Note: Until ADDR is cleared SCL will be streched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe23 	bl	8000938 <I2C_ClearADDRFlag>

	//6. Send the data until Len becomes0
	while(Len > 0)
 8000cf2:	e014      	b.n	8000d1e <I2C_MasterSendData+0x84>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)); //Wati till TXE is set
 8000cf4:	bf00      	nop
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2180      	movs	r1, #128	@ 0x80
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ffb9 	bl	8000c74 <I2C_GetFlagStatus>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f6      	beq.n	8000cf6 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	781a      	ldrb	r2, [r3, #0]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3301      	adds	r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1e7      	bne.n	8000cf4 <I2C_MasterSendData+0x5a>

	//7. When Len becomes zero whait for TXE=1 and BTF=1 before generating the STOP ocndition
	// Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	// when BTF=1 SCL will be streched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8000d24:	bf00      	nop
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2180      	movs	r1, #128	@ 0x80
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffa1 	bl	8000c74 <I2C_GetFlagStatus>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f6      	beq.n	8000d26 <I2C_MasterSendData+0x8c>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 8000d38:	bf00      	nop
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff97 	bl	8000c74 <I2C_GetFlagStatus>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f6      	beq.n	8000d3a <I2C_MasterSendData+0xa0>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	// Note: generating STOP, automacally clears the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fe00 	bl	8000956 <I2C_GenerateStopCondition>

}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <I2C_MasterReceiveData>:
 *
 * @Note			-
 *
 *******************************************************************************/
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	70fb      	strb	r3, [r7, #3]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fda8 	bl	80008c6 <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	// NOTE: Until SB is cleared SCL will be streched (pulled to LOW)
	while( ! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8000d76:	bf00      	nop
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff78 	bl	8000c74 <I2C_GetFlagStatus>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f6      	beq.n	8000d78 <I2C_MasterReceiveData+0x1a>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAdressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	78fa      	ldrb	r2, [r7, #3]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fdbb 	bl	800090e <I2C_ExecuteAdressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in the SR1
	while( ! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000d98:	bf00      	nop
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2102      	movs	r1, #2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff67 	bl	8000c74 <I2C_GetFlagStatus>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f6      	beq.n	8000d9a <I2C_MasterReceiveData+0x3c>

	//procedure to read only 1 byte from slave
	if(Len == 1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d11f      	bne.n	8000df2 <I2C_MasterReceiveData+0x94>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f85a 	bl	8000e72 <I2C_ManageAcking>

		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fdb8 	bl	8000938 <I2C_ClearADDRFlag>

		//wait until RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8000dc8:	bf00      	nop
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2140      	movs	r1, #64	@ 0x40
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff4f 	bl	8000c74 <I2C_GetFlagStatus>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f6      	beq.n	8000dca <I2C_MasterReceiveData+0x6c>

		//generate STOP condition
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fdb8 	bl	8000956 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	701a      	strb	r2, [r3, #0]

	}

	//procedure to read data from slave when Len > 1
	if(Len > 1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d92e      	bls.n	8000e56 <I2C_MasterReceiveData+0xf8>
	{
		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fd9b 	bl	8000938 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for(uint32_t i = Len; i > 0; i--)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e023      	b.n	8000e50 <I2C_MasterReceiveData+0xf2>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8000e08:	bf00      	nop
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2140      	movs	r1, #64	@ 0x40
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff2f 	bl	8000c74 <I2C_GetFlagStatus>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f6      	beq.n	8000e0a <I2C_MasterReceiveData+0xac>

			if(i == 2)	//if last bytes are remaing
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d10a      	bne.n	8000e38 <I2C_MasterReceiveData+0xda>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f822 	bl	8000e72 <I2C_ManageAcking>

				//generate STOP condition
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd8f 	bl	8000956 <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxbuffer++;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1d8      	bne.n	8000e08 <I2C_MasterReceiveData+0xaa>
		}
	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	7a5b      	ldrb	r3, [r3, #9]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d105      	bne.n	8000e6a <I2C_MasterReceiveData+0x10c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2101      	movs	r1, #1
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f804 	bl	8000e72 <I2C_ManageAcking>
	}

}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE)
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d106      	bne.n	8000e92 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	601a      	str	r2, [r3, #0]
	else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000e90:	e005      	b.n	8000e9e <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <__libc_init_array>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8000ee0 <__libc_init_array+0x38>)
 8000eac:	4c0d      	ldr	r4, [pc, #52]	@ (8000ee4 <__libc_init_array+0x3c>)
 8000eae:	1b64      	subs	r4, r4, r5
 8000eb0:	10a4      	asrs	r4, r4, #2
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	42a6      	cmp	r6, r4
 8000eb6:	d109      	bne.n	8000ecc <__libc_init_array+0x24>
 8000eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8000ee8 <__libc_init_array+0x40>)
 8000eba:	4c0c      	ldr	r4, [pc, #48]	@ (8000eec <__libc_init_array+0x44>)
 8000ebc:	f000 f818 	bl	8000ef0 <_init>
 8000ec0:	1b64      	subs	r4, r4, r5
 8000ec2:	10a4      	asrs	r4, r4, #2
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	42a6      	cmp	r6, r4
 8000ec8:	d105      	bne.n	8000ed6 <__libc_init_array+0x2e>
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ed0:	4798      	blx	r3
 8000ed2:	3601      	adds	r6, #1
 8000ed4:	e7ee      	b.n	8000eb4 <__libc_init_array+0xc>
 8000ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eda:	4798      	blx	r3
 8000edc:	3601      	adds	r6, #1
 8000ede:	e7f2      	b.n	8000ec6 <__libc_init_array+0x1e>
 8000ee0:	08000f08 	.word	0x08000f08
 8000ee4:	08000f08 	.word	0x08000f08
 8000ee8:	08000f08 	.word	0x08000f08
 8000eec:	08000f0c 	.word	0x08000f0c

08000ef0 <_init>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	bf00      	nop
 8000ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef6:	bc08      	pop	{r3}
 8000ef8:	469e      	mov	lr, r3
 8000efa:	4770      	bx	lr

08000efc <_fini>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	bf00      	nop
 8000f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f02:	bc08      	pop	{r3}
 8000f04:	469e      	mov	lr, r3
 8000f06:	4770      	bx	lr
