
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000096c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b00  08000b00  00001b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b0c  08000b0c  00001b1c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000b0c  08000b0c  00001b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b14  08000b1c  00001b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b14  08000b14  00001b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b18  08000b18  00001b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b1c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b1c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000117e  00000000  00000000  00001b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000430  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  000030f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000dc  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000229c  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017d4  00000000  00000000  000055a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000951a  00000000  00000000  00006d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010296  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000042c  00000000  00000000  000102dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00010708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ae8 	.word	0x08000ae8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000ae8 	.word	0x08000ae8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SPI2_GPIOInits>:
* PB12 --> SPI2_NSS
* ALT function mode : 5
*/

void SPI2_GPIOInits()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <SPI2_GPIOInits+0x40>)
 80001ec:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001f2:	2305      	movs	r3, #5
 80001f4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000202:	230d      	movs	r3, #13
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f965 	bl	80004d8 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800020e:	230f      	movs	r3, #15
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f95f 	bl	80004d8 <GPIO_Init>
	//GPIO_Init(&SPIPins);

	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40020400 	.word	0x40020400

08000228 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <SPI2_Inits+0x38>)
 8000230:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000232:	2301      	movs	r3, #1
 8000234:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000236:	2301      	movs	r3, #1
 8000238:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;	//generates sclk 8Mhz
 800023a:	2300      	movs	r3, #0
 800023c:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800023e:	2300      	movs	r3, #0
 8000240:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000242:	2300      	movs	r3, #0
 8000244:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN ;	//software slave managment enabled for NSS pin
 800024a:	2301      	movs	r3, #1
 800024c:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fb55 	bl	8000900 <SPI_Init>

}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40003800 	.word	0x40003800

08000264 <main>:

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 800026a:	4a10      	ldr	r2, [pc, #64]	@ (80002ac <main+0x48>)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000270:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//This function is used to initialize the GPIO pinns to behave as SPI2 pins
	SPI2_GPIOInits();
 8000274:	f7ff ffb6 	bl	80001e4 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000278:	f7ff ffd6 	bl	8000228 <SPI2_Inits>

	//This makes NSS signal internally high and avoid MODF err
	SPI_SSIConfig(SPI2,ENABLE);
 800027c:	2101      	movs	r1, #1
 800027e:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <main+0x4c>)
 8000280:	f000 fbf3 	bl	8000a6a <SPI_SSIConfig>

	//Enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 8000284:	2101      	movs	r1, #1
 8000286:	480a      	ldr	r0, [pc, #40]	@ (80002b0 <main+0x4c>)
 8000288:	f000 fbd4 	bl	8000a34 <SPI_PeripheralControl>

	//To send data
	SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ffa0 	bl	80001d4 <strlen>
 8000294:	4602      	mov	r2, r0
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4619      	mov	r1, r3
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <main+0x4c>)
 800029c:	f000 fb93 	bl	80009c6 <SPI_SendData>

	//Disable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
 80002a0:	2100      	movs	r1, #0
 80002a2:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <main+0x4c>)
 80002a4:	f000 fbc6 	bl	8000a34 <SPI_PeripheralControl>

	while(1);
 80002a8:	bf00      	nop
 80002aa:	e7fd      	b.n	80002a8 <main+0x44>
 80002ac:	08000b00 	.word	0x08000b00
 80002b0:	40003800 	.word	0x40003800

080002b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b4:	480d      	ldr	r0, [pc, #52]	@ (80002ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002bc:	480c      	ldr	r0, [pc, #48]	@ (80002f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002be:	490d      	ldr	r1, [pc, #52]	@ (80002f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c0:	4a0d      	ldr	r2, [pc, #52]	@ (80002f8 <LoopForever+0xe>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c4:	e002      	b.n	80002cc <LoopCopyDataInit>

080002c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ca:	3304      	adds	r3, #4

080002cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d0:	d3f9      	bcc.n	80002c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d2:	4a0a      	ldr	r2, [pc, #40]	@ (80002fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000300 <LoopForever+0x16>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d8:	e001      	b.n	80002de <LoopFillZerobss>

080002da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002dc:	3204      	adds	r2, #4

080002de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e0:	d3fb      	bcc.n	80002da <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002e2:	f000 fbdd 	bl	8000aa0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002e6:	f7ff ffbd 	bl	8000264 <main>

080002ea <LoopForever>:

LoopForever:
  b LoopForever
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
  ldr   r0, =_estack
 80002ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f8:	08000b1c 	.word	0x08000b1c
  ldr r2, =_sbss
 80002fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000300:	2000001c 	.word	0x2000001c

08000304 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC_IRQHandler>
	...

08000308 <GPIO_PeriClockControl>:
 *
 * @Note			-	none
 *
 *******************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d162      	bne.n	80003e0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a64      	ldr	r2, [pc, #400]	@ (80004b0 <GPIO_PeriClockControl+0x1a8>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000322:	4b64      	ldr	r3, [pc, #400]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000326:	4a63      	ldr	r2, [pc, #396]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6313      	str	r3, [r2, #48]	@ 0x30
				}else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
 800032e:	e0b9      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a61      	ldr	r2, [pc, #388]	@ (80004b8 <GPIO_PeriClockControl+0x1b0>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000338:	4b5e      	ldr	r3, [pc, #376]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033c:	4a5d      	ldr	r2, [pc, #372]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800033e:	f043 0302 	orr.w	r3, r3, #2
 8000342:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000344:	e0ae      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a5c      	ldr	r2, [pc, #368]	@ (80004bc <GPIO_PeriClockControl+0x1b4>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800034e:	4b59      	ldr	r3, [pc, #356]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000352:	4a58      	ldr	r2, [pc, #352]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035a:	e0a3      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a58      	ldr	r2, [pc, #352]	@ (80004c0 <GPIO_PeriClockControl+0x1b8>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000364:	4b53      	ldr	r3, [pc, #332]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000368:	4a52      	ldr	r2, [pc, #328]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000370:	e098      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a53      	ldr	r2, [pc, #332]	@ (80004c4 <GPIO_PeriClockControl+0x1bc>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800037a:	4b4e      	ldr	r3, [pc, #312]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037e:	4a4d      	ldr	r2, [pc, #308]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000380:	f043 0310 	orr.w	r3, r3, #16
 8000384:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000386:	e08d      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a4f      	ldr	r2, [pc, #316]	@ (80004c8 <GPIO_PeriClockControl+0x1c0>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000390:	4b48      	ldr	r3, [pc, #288]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000394:	4a47      	ldr	r2, [pc, #284]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039c:	e082      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a4a      	ldr	r2, [pc, #296]	@ (80004cc <GPIO_PeriClockControl+0x1c4>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003a6:	4b43      	ldr	r3, [pc, #268]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	4a42      	ldr	r2, [pc, #264]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 80003ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b2:	e077      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a46      	ldr	r2, [pc, #280]	@ (80004d0 <GPIO_PeriClockControl+0x1c8>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003bc:	4b3d      	ldr	r3, [pc, #244]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c0:	4a3c      	ldr	r2, [pc, #240]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 80003c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c8:	e06c      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a41      	ldr	r2, [pc, #260]	@ (80004d4 <GPIO_PeriClockControl+0x1cc>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d168      	bne.n	80004a4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003d2:	4b38      	ldr	r3, [pc, #224]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	4a37      	ldr	r2, [pc, #220]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 80003d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003de:	e061      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a33      	ldr	r2, [pc, #204]	@ (80004b0 <GPIO_PeriClockControl+0x1a8>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 80003e8:	4b32      	ldr	r3, [pc, #200]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ec:	4a31      	ldr	r2, [pc, #196]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 80003ee:	f023 0301 	bic.w	r3, r3, #1
 80003f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f4:	e056      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a2f      	ldr	r2, [pc, #188]	@ (80004b8 <GPIO_PeriClockControl+0x1b0>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 80003fe:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000402:	4a2c      	ldr	r2, [pc, #176]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000404:	f023 0302 	bic.w	r3, r3, #2
 8000408:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040a:	e04b      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a2b      	ldr	r2, [pc, #172]	@ (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 8000414:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000418:	4a26      	ldr	r2, [pc, #152]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800041a:	f023 0304 	bic.w	r3, r3, #4
 800041e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000420:	e040      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a26      	ldr	r2, [pc, #152]	@ (80004c0 <GPIO_PeriClockControl+0x1b8>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 800042a:	4b22      	ldr	r3, [pc, #136]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042e:	4a21      	ldr	r2, [pc, #132]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000430:	f023 0308 	bic.w	r3, r3, #8
 8000434:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000436:	e035      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a22      	ldr	r2, [pc, #136]	@ (80004c4 <GPIO_PeriClockControl+0x1bc>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 8000440:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000444:	4a1b      	ldr	r2, [pc, #108]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000446:	f023 0310 	bic.w	r3, r3, #16
 800044a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044c:	e02a      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a1d      	ldr	r2, [pc, #116]	@ (80004c8 <GPIO_PeriClockControl+0x1c0>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045a:	4a16      	ldr	r2, [pc, #88]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800045c:	f023 0320 	bic.w	r3, r3, #32
 8000460:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000462:	e01f      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a19      	ldr	r2, [pc, #100]	@ (80004cc <GPIO_PeriClockControl+0x1c4>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000470:	4a10      	ldr	r2, [pc, #64]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000476:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000478:	e014      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a14      	ldr	r2, [pc, #80]	@ (80004d0 <GPIO_PeriClockControl+0x1c8>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 8000482:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	4a0b      	ldr	r2, [pc, #44]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 8000488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800048c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048e:	e009      	b.n	80004a4 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a10      	ldr	r2, [pc, #64]	@ (80004d4 <GPIO_PeriClockControl+0x1cc>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d105      	bne.n	80004a4 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4a05      	ldr	r2, [pc, #20]	@ (80004b4 <GPIO_PeriClockControl+0x1ac>)
 800049e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40020000 	.word	0x40020000
 80004b4:	40023800 	.word	0x40023800
 80004b8:	40020400 	.word	0x40020400
 80004bc:	40020800 	.word	0x40020800
 80004c0:	40020c00 	.word	0x40020c00
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40021400 	.word	0x40021400
 80004cc:	40021800 	.word	0x40021800
 80004d0:	40021c00 	.word	0x40021c00
 80004d4:	40022000 	.word	0x40022000

080004d8 <GPIO_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//temp. register
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2101      	movs	r1, #1
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff0c 	bl	8000308 <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d820      	bhi.n	800053a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6819      	ldr	r1, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	e0cb      	b.n	80006d2 <GPIO_Init+0x1fa>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	795b      	ldrb	r3, [r3, #5]
 800053e:	2b04      	cmp	r3, #4
 8000540:	d117      	bne.n	8000572 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000542:	4b4b      	ldr	r3, [pc, #300]	@ (8000670 <GPIO_Init+0x198>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	4611      	mov	r1, r2
 8000552:	4a47      	ldr	r2, [pc, #284]	@ (8000670 <GPIO_Init+0x198>)
 8000554:	430b      	orrs	r3, r1
 8000556:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000558:	4b45      	ldr	r3, [pc, #276]	@ (8000670 <GPIO_Init+0x198>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	43d2      	mvns	r2, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a41      	ldr	r2, [pc, #260]	@ (8000670 <GPIO_Init+0x198>)
 800056c:	400b      	ands	r3, r1
 800056e:	6093      	str	r3, [r2, #8]
 8000570:	e035      	b.n	80005de <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	795b      	ldrb	r3, [r3, #5]
 8000576:	2b05      	cmp	r3, #5
 8000578:	d117      	bne.n	80005aa <GPIO_Init+0xd2>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800057a:	4b3d      	ldr	r3, [pc, #244]	@ (8000670 <GPIO_Init+0x198>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	7912      	ldrb	r2, [r2, #4]
 8000582:	4611      	mov	r1, r2
 8000584:	2201      	movs	r2, #1
 8000586:	408a      	lsls	r2, r1
 8000588:	4611      	mov	r1, r2
 800058a:	4a39      	ldr	r2, [pc, #228]	@ (8000670 <GPIO_Init+0x198>)
 800058c:	430b      	orrs	r3, r1
 800058e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000590:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <GPIO_Init+0x198>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	43d2      	mvns	r2, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a33      	ldr	r2, [pc, #204]	@ (8000670 <GPIO_Init+0x198>)
 80005a4:	400b      	ands	r3, r1
 80005a6:	60d3      	str	r3, [r2, #12]
 80005a8:	e019      	b.n	80005de <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	795b      	ldrb	r3, [r3, #5]
 80005ae:	2b06      	cmp	r3, #6
 80005b0:	d115      	bne.n	80005de <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <GPIO_Init+0x198>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a2b      	ldr	r2, [pc, #172]	@ (8000670 <GPIO_Init+0x198>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <GPIO_Init+0x198>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a25      	ldr	r2, [pc, #148]	@ (8000670 <GPIO_Init+0x198>)
 80005da:	430b      	orrs	r3, r1
 80005dc:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	f003 0303 	and.w	r3, r3, #3
 80005ee:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000674 <GPIO_Init+0x19c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d04e      	beq.n	8000698 <GPIO_Init+0x1c0>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000678 <GPIO_Init+0x1a0>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d032      	beq.n	800066a <GPIO_Init+0x192>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <GPIO_Init+0x1a4>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d02b      	beq.n	8000666 <GPIO_Init+0x18e>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a1b      	ldr	r2, [pc, #108]	@ (8000680 <GPIO_Init+0x1a8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d024      	beq.n	8000662 <GPIO_Init+0x18a>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a19      	ldr	r2, [pc, #100]	@ (8000684 <GPIO_Init+0x1ac>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d01d      	beq.n	800065e <GPIO_Init+0x186>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a18      	ldr	r2, [pc, #96]	@ (8000688 <GPIO_Init+0x1b0>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d016      	beq.n	800065a <GPIO_Init+0x182>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a16      	ldr	r2, [pc, #88]	@ (800068c <GPIO_Init+0x1b4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d00f      	beq.n	8000656 <GPIO_Init+0x17e>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <GPIO_Init+0x1b8>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d008      	beq.n	8000652 <GPIO_Init+0x17a>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <GPIO_Init+0x1bc>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d101      	bne.n	800064e <GPIO_Init+0x176>
 800064a:	2308      	movs	r3, #8
 800064c:	e025      	b.n	800069a <GPIO_Init+0x1c2>
 800064e:	2300      	movs	r3, #0
 8000650:	e023      	b.n	800069a <GPIO_Init+0x1c2>
 8000652:	2307      	movs	r3, #7
 8000654:	e021      	b.n	800069a <GPIO_Init+0x1c2>
 8000656:	2306      	movs	r3, #6
 8000658:	e01f      	b.n	800069a <GPIO_Init+0x1c2>
 800065a:	2305      	movs	r3, #5
 800065c:	e01d      	b.n	800069a <GPIO_Init+0x1c2>
 800065e:	2304      	movs	r3, #4
 8000660:	e01b      	b.n	800069a <GPIO_Init+0x1c2>
 8000662:	2303      	movs	r3, #3
 8000664:	e019      	b.n	800069a <GPIO_Init+0x1c2>
 8000666:	2302      	movs	r3, #2
 8000668:	e017      	b.n	800069a <GPIO_Init+0x1c2>
 800066a:	2301      	movs	r3, #1
 800066c:	e015      	b.n	800069a <GPIO_Init+0x1c2>
 800066e:	bf00      	nop
 8000670:	40013c00 	.word	0x40013c00
 8000674:	40020000 	.word	0x40020000
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40021000 	.word	0x40021000
 8000688:	40021400 	.word	0x40021400
 800068c:	40021800 	.word	0x40021800
 8000690:	40021c00 	.word	0x40021c00
 8000694:	40022000 	.word	0x40022000
 8000698:	2300      	movs	r3, #0
 800069a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800069c:	4b5d      	ldr	r3, [pc, #372]	@ (8000814 <GPIO_Init+0x33c>)
 800069e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a0:	4a5c      	ldr	r2, [pc, #368]	@ (8000814 <GPIO_Init+0x33c>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80006a8:	7c7a      	ldrb	r2, [r7, #17]
 80006aa:	7cbb      	ldrb	r3, [r7, #18]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	fa02 f103 	lsl.w	r1, r2, r3
 80006b2:	4a59      	ldr	r2, [pc, #356]	@ (8000818 <GPIO_Init+0x340>)
 80006b4:	7cfb      	ldrb	r3, [r7, #19]
 80006b6:	3302      	adds	r3, #2
 80006b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI -> IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006bc:	4b57      	ldr	r3, [pc, #348]	@ (800081c <GPIO_Init+0x344>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	7912      	ldrb	r2, [r2, #4]
 80006c4:	4611      	mov	r1, r2
 80006c6:	2201      	movs	r2, #1
 80006c8:	408a      	lsls	r2, r1
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a53      	ldr	r2, [pc, #332]	@ (800081c <GPIO_Init+0x344>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	799b      	ldrb	r3, [r3, #6]
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	2103      	movs	r1, #3
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	400a      	ands	r2, r1
 8000708:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6899      	ldr	r1, [r3, #8]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	430a      	orrs	r2, r1
 8000718:	609a      	str	r2, [r3, #8]

	temp = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	79db      	ldrb	r3, [r3, #7]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2103      	movs	r1, #3
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	400a      	ands	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68d9      	ldr	r1, [r3, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	430a      	orrs	r2, r1
 800075c:	60da      	str	r2, [r3, #12]

	temp = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a1b      	ldrb	r3, [r3, #8]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	4619      	mov	r1, r3
 800077e:	2301      	movs	r3, #1
 8000780:	408b      	lsls	r3, r1
 8000782:	43db      	mvns	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	400a      	ands	r2, r1
 800078c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6859      	ldr	r1, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	430a      	orrs	r2, r1
 800079c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d131      	bne.n	800080a <GPIO_Init+0x332>
	{
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) );
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7c3a      	ldrb	r2, [r7, #16]
 80007be:	3208      	adds	r2, #8
 80007c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	220f      	movs	r2, #15
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	7c3a      	ldrb	r2, [r7, #16]
 80007d8:	4001      	ands	r1, r0
 80007da:	3208      	adds	r2, #8
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	7c3a      	ldrb	r2, [r7, #16]
 80007e6:	3208      	adds	r2, #8
 80007e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7a5b      	ldrb	r3, [r3, #9]
 80007f0:	461a      	mov	r2, r3
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	7c3a      	ldrb	r2, [r7, #16]
 8000802:	4301      	orrs	r1, r0
 8000804:	3208      	adds	r2, #8
 8000806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40013800 	.word	0x40013800
 800081c:	40013c00 	.word	0x40013c00

08000820 <SPI_PeriClockControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d12b      	bne.n	800088a <SPI_PeriClockControl+0x6a>
		{
			if(pSPIx == SPI1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a2d      	ldr	r2, [pc, #180]	@ (80008ec <SPI_PeriClockControl+0xcc>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 800083a:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	4a2c      	ldr	r2, [pc, #176]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 8000840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000844:	6453      	str	r3, [r2, #68]	@ 0x44
			}else if (pSPIx == SPI4)
			{
				SPI4_PCLK_DI();
			}
		}
}
 8000846:	e04b      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a2a      	ldr	r2, [pc, #168]	@ (80008f4 <SPI_PeriClockControl+0xd4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d106      	bne.n	800085e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	4a26      	ldr	r2, [pc, #152]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800085c:	e040      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI3)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <SPI_PeriClockControl+0xd8>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <SPI_PeriClockControl+0x54>
				SPI3_PCLK_EN();
 8000866:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 800086c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000870:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000872:	e035      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI4)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a21      	ldr	r2, [pc, #132]	@ (80008fc <SPI_PeriClockControl+0xdc>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d131      	bne.n	80008e0 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_EN();
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 800087e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000880:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 8000882:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000886:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000888:	e02a      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
			if(pSPIx == SPI1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <SPI_PeriClockControl+0xcc>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <SPI_PeriClockControl+0x80>
				SPI1_PCLK_DI();
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 8000898:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800089c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800089e:	e01f      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a14      	ldr	r2, [pc, #80]	@ (80008f4 <SPI_PeriClockControl+0xd4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <SPI_PeriClockControl+0x96>
				SPI2_PCLK_DI();
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	4a10      	ldr	r2, [pc, #64]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 80008ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008b2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008b4:	e014      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI3)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a0f      	ldr	r2, [pc, #60]	@ (80008f8 <SPI_PeriClockControl+0xd8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d106      	bne.n	80008cc <SPI_PeriClockControl+0xac>
				SPI3_PCLK_DI();
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 80008c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008ca:	e009      	b.n	80008e0 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI4)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <SPI_PeriClockControl+0xdc>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d105      	bne.n	80008e0 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_DI();
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 80008d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d8:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <SPI_PeriClockControl+0xd0>)
 80008da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80008de:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40003800 	.word	0x40003800
 80008f8:	40003c00 	.word	0x40003c00
 80008fc:	40013400 	.word	0x40013400

08000900 <SPI_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle )
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	//Peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2101      	movs	r1, #1
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff86 	bl	8000820 <SPI_PeriClockControl>

	//Configure SPI_CR1 register
	uint32_t tempreg = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4313      	orrs	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	795b      	ldrb	r3, [r3, #5]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d104      	bne.n	8000936 <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	e014      	b.n	8000960 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	795b      	ldrb	r3, [r3, #5]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d104      	bne.n	8000948 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e00b      	b.n	8000960 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	795b      	ldrb	r3, [r3, #5]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d107      	bne.n	8000960 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000956:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800095e:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the SPI serial clock speed (Baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	799b      	ldrb	r3, [r3, #6]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	79db      	ldrb	r3, [r3, #7]
 8000970:	02db      	lsls	r3, r3, #11
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4313      	orrs	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7a1b      	ldrb	r3, [r3, #8]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7a5b      	ldrb	r3, [r3, #9]
 8000988:	461a      	mov	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	4313      	orrs	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <SPI_GetFlagStatus>:
		pSPIx->SR = 0;
		pSPIx->DR = 0;
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <SPI_SendData>:
 *
 * @Note			- This is blocking call
 *
 *******************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b084      	sub	sp, #16
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80009d2:	e027      	b.n	8000a24 <SPI_SendData+0x5e>
	{
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 80009d4:	bf00      	nop
 80009d6:	2102      	movs	r1, #2
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff ffe1 	bl	80009a0 <SPI_GetFlagStatus>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0f8      	beq.n	80009d6 <SPI_SendData+0x10>

		//2. Check the DFF bit i CR1
		if(pSPIx->CR1 & ( 1 << SPI_CR1_DFF))
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d00e      	beq.n	8000a0e <SPI_SendData+0x48>
		{
			//16 bit dff
			//1. Load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	60da      	str	r2, [r3, #12]
			Len--;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
			Len--;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	e00a      	b.n	8000a24 <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	60da      	str	r2, [r3, #12]
			Len--;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1d4      	bne.n	80009d4 <SPI_SendData+0xe>
		}
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SPI_PeripheralControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d106      	bne.n	8000a54 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a52:	e005      	b.n	8000a60 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <SPI_SSIConfig>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	460b      	mov	r3, r1
 8000a74:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d106      	bne.n	8000a8a <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8000a88:	e005      	b.n	8000a96 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <__libc_init_array>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8000ad8 <__libc_init_array+0x38>)
 8000aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8000adc <__libc_init_array+0x3c>)
 8000aa6:	1b64      	subs	r4, r4, r5
 8000aa8:	10a4      	asrs	r4, r4, #2
 8000aaa:	2600      	movs	r6, #0
 8000aac:	42a6      	cmp	r6, r4
 8000aae:	d109      	bne.n	8000ac4 <__libc_init_array+0x24>
 8000ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8000ae0 <__libc_init_array+0x40>)
 8000ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8000ae4 <__libc_init_array+0x44>)
 8000ab4:	f000 f818 	bl	8000ae8 <_init>
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	10a4      	asrs	r4, r4, #2
 8000abc:	2600      	movs	r6, #0
 8000abe:	42a6      	cmp	r6, r4
 8000ac0:	d105      	bne.n	8000ace <__libc_init_array+0x2e>
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac8:	4798      	blx	r3
 8000aca:	3601      	adds	r6, #1
 8000acc:	e7ee      	b.n	8000aac <__libc_init_array+0xc>
 8000ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad2:	4798      	blx	r3
 8000ad4:	3601      	adds	r6, #1
 8000ad6:	e7f2      	b.n	8000abe <__libc_init_array+0x1e>
 8000ad8:	08000b14 	.word	0x08000b14
 8000adc:	08000b14 	.word	0x08000b14
 8000ae0:	08000b14 	.word	0x08000b14
 8000ae4:	08000b18 	.word	0x08000b18

08000ae8 <_init>:
 8000ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aea:	bf00      	nop
 8000aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aee:	bc08      	pop	{r3}
 8000af0:	469e      	mov	lr, r3
 8000af2:	4770      	bx	lr

08000af4 <_fini>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr
