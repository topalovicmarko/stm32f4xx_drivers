
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001df8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001f98  08001f98  00002f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fdc  08001fdc  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001fdc  08001fdc  00002fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fe4  08001fe4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe4  08001fe4  00002fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fe8  08001fe8  00002fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001fec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000005c  08002048  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08002048  000033e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001628  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000536  00000000  00000000  000046ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00004be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013a  00000000  00000000  00004d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027cc  00000000  00000000  00004ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c3a  00000000  00000000  0000769e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a039  00000000  00000000  000092d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00013311  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000eb4  00000000  00000000  00013354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00014208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001f80 	.word	0x08001f80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001f80 	.word	0x08001f80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000286:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <SPI2_GPIOInits+0x58>)
 8000288:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTF;
 800028a:	2302      	movs	r3, #2
 800028c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800028e:	2305      	movs	r3, #5
 8000290:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000292:	2300      	movs	r3, #0
 8000294:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000296:	2300      	movs	r3, #0
 8000298:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800029a:	2302      	movs	r3, #2
 800029c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800029e:	230d      	movs	r3, #13
 80002a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fa25 	bl	80006f4 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002aa:	230f      	movs	r3, #15
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fa1f 	bl	80006f4 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002b6:	230e      	movs	r3, #14
 80002b8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fa19 	bl	80006f4 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002c2:	230c      	movs	r3, #12
 80002c4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fa13 	bl	80006f4 <GPIO_Init>


}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40020400 	.word	0x40020400

080002dc <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 80002e0:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <SPI2_Inits+0x40>)
 80002e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000320 <SPI2_Inits+0x44>)
 80002e4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <SPI2_Inits+0x40>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002ec:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <SPI2_Inits+0x40>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <SPI2_Inits+0x40>)
 80002f4:	2204      	movs	r2, #4
 80002f6:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <SPI2_Inits+0x40>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002fe:	4b07      	ldr	r3, [pc, #28]	@ (800031c <SPI2_Inits+0x40>)
 8000300:	2200      	movs	r2, #0
 8000302:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000304:	4b05      	ldr	r3, [pc, #20]	@ (800031c <SPI2_Inits+0x40>)
 8000306:	2200      	movs	r2, #0
 8000308:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 800030a:	4b04      	ldr	r3, [pc, #16]	@ (800031c <SPI2_Inits+0x40>)
 800030c:	2200      	movs	r2, #0
 800030e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000310:	4802      	ldr	r0, [pc, #8]	@ (800031c <SPI2_Inits+0x40>)
 8000312:	f000 fccd 	bl	8000cb0 <SPI_Init>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000078 	.word	0x20000078
 8000320:	40003800 	.word	0x40003800

08000324 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	220c      	movs	r2, #12
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f000 ffdc 	bl	80012ee <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOC;
 8000336:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <Slave_GPIO_InterruptPinInit+0x48>)
 8000338:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800033a:	2306      	movs	r3, #6
 800033c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800033e:	2304      	movs	r3, #4
 8000340:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000342:	2300      	movs	r3, #0
 8000344:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000346:	2301      	movs	r3, #1
 8000348:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f000 f9d1 	bl	80006f4 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI15);
 8000352:	210f      	movs	r1, #15
 8000354:	2017      	movs	r0, #23
 8000356:	f000 fbf1 	bl	8000b3c <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800035a:	2101      	movs	r1, #1
 800035c:	2017      	movs	r0, #23
 800035e:	f000 fb6d 	bl	8000a3c <GPIO_IRQInterruptConfig>

}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40020800 	.word	0x40020800

08000370 <main>:


int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 8000376:	23ff      	movs	r3, #255	@ 0xff
 8000378:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 800037a:	f7ff ffd3 	bl	8000324 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800037e:	f7ff ff7f 	bl	8000280 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000382:	f7ff ffab 	bl	80002dc <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000386:	2101      	movs	r1, #1
 8000388:	4824      	ldr	r0, [pc, #144]	@ (800041c <main+0xac>)
 800038a:	f000 fd0f 	bl	8000dac <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 800038e:	2101      	movs	r1, #1
 8000390:	2024      	movs	r0, #36	@ 0x24
 8000392:	f000 fd26 	bl	8000de2 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 8000396:	4b22      	ldr	r3, [pc, #136]	@ (8000420 <main+0xb0>)
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 800039c:	bf00      	nop
 800039e:	4b21      	ldr	r3, [pc, #132]	@ (8000424 <main+0xb4>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0fa      	beq.n	800039e <main+0x2e>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 80003a8:	2100      	movs	r1, #0
 80003aa:	2017      	movs	r0, #23
 80003ac:	f000 fb46 	bl	8000a3c <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80003b0:	2101      	movs	r1, #1
 80003b2:	481a      	ldr	r0, [pc, #104]	@ (800041c <main+0xac>)
 80003b4:	f000 fcdf 	bl	8000d76 <SPI_PeripheralControl>


		while(!rcvStop)
 80003b8:	e012      	b.n	80003e0 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 80003ba:	bf00      	nop
 80003bc:	1dfb      	adds	r3, r7, #7
 80003be:	2201      	movs	r2, #1
 80003c0:	4619      	mov	r1, r3
 80003c2:	4819      	ldr	r0, [pc, #100]	@ (8000428 <main+0xb8>)
 80003c4:	f000 fd1a 	bl	8000dfc <SPI_SendDataIT>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d0f6      	beq.n	80003bc <main+0x4c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 80003ce:	bf00      	nop
 80003d0:	2201      	movs	r2, #1
 80003d2:	4916      	ldr	r1, [pc, #88]	@ (800042c <main+0xbc>)
 80003d4:	4814      	ldr	r0, [pc, #80]	@ (8000428 <main+0xb8>)
 80003d6:	f000 fd34 	bl	8000e42 <SPI_ReceiveDataIT>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d0f7      	beq.n	80003d0 <main+0x60>
		while(!rcvStop)
 80003e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <main+0xb0>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0e7      	beq.n	80003ba <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80003ea:	bf00      	nop
 80003ec:	2180      	movs	r1, #128	@ 0x80
 80003ee:	480b      	ldr	r0, [pc, #44]	@ (800041c <main+0xac>)
 80003f0:	f000 fcae 	bl	8000d50 <SPI_GetFlagStatus>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d1f8      	bne.n	80003ec <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80003fa:	2100      	movs	r1, #0
 80003fc:	4807      	ldr	r0, [pc, #28]	@ (800041c <main+0xac>)
 80003fe:	f000 fcba 	bl	8000d76 <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 8000402:	490b      	ldr	r1, [pc, #44]	@ (8000430 <main+0xc0>)
 8000404:	480b      	ldr	r0, [pc, #44]	@ (8000434 <main+0xc4>)
 8000406:	f000 ff1d 	bl	8001244 <iprintf>

		dataAvailable = 0;
 800040a:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <main+0xb4>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000410:	2101      	movs	r1, #1
 8000412:	2017      	movs	r0, #23
 8000414:	f000 fb12 	bl	8000a3c <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8000418:	e7bd      	b.n	8000396 <main+0x26>
 800041a:	bf00      	nop
 800041c:	40003800 	.word	0x40003800
 8000420:	2000028d 	.word	0x2000028d
 8000424:	2000028e 	.word	0x2000028e
 8000428:	20000078 	.word	0x20000078
 800042c:	2000028c 	.word	0x2000028c
 8000430:	20000098 	.word	0x20000098
 8000434:	08001f98 	.word	0x08001f98

08000438 <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 800043c:	4802      	ldr	r0, [pc, #8]	@ (8000448 <SPI2_IRQHandler+0x10>)
 800043e:	f000 fd23 	bl	8000e88 <SPI_IRQHandling>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000078 	.word	0x20000078

0800044c <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	460b      	mov	r3, r1
 8000456:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000458:	78fb      	ldrb	r3, [r7, #3]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d11f      	bne.n	800049e <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800045e:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <SPI_ApplicationEventCallback+0x5c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	4910      	ldr	r1, [pc, #64]	@ (80004a8 <SPI_ApplicationEventCallback+0x5c>)
 8000466:	600a      	str	r2, [r1, #0]
 8000468:	4a10      	ldr	r2, [pc, #64]	@ (80004ac <SPI_ApplicationEventCallback+0x60>)
 800046a:	7812      	ldrb	r2, [r2, #0]
 800046c:	b2d1      	uxtb	r1, r2
 800046e:	4a10      	ldr	r2, [pc, #64]	@ (80004b0 <SPI_ApplicationEventCallback+0x64>)
 8000470:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <SPI_ApplicationEventCallback+0x60>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2b00      	cmp	r3, #0
 800047a:	d004      	beq.n	8000486 <SPI_ApplicationEventCallback+0x3a>
 800047c:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <SPI_ApplicationEventCallback+0x5c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000484:	d10b      	bne.n	800049e <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 8000486:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <SPI_ApplicationEventCallback+0x68>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <SPI_ApplicationEventCallback+0x5c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3b01      	subs	r3, #1
 8000492:	4a07      	ldr	r2, [pc, #28]	@ (80004b0 <SPI_ApplicationEventCallback+0x64>)
 8000494:	2100      	movs	r1, #0
 8000496:	54d1      	strb	r1, [r2, r3]
					i = 0;
 8000498:	4b03      	ldr	r3, [pc, #12]	@ (80004a8 <SPI_ApplicationEventCallback+0x5c>)
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
				}
	}

}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	20000290 	.word	0x20000290
 80004ac:	2000028c 	.word	0x2000028c
 80004b0:	20000098 	.word	0x20000098
 80004b4:	2000028d 	.word	0x2000028d

080004b8 <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 80004bc:	2006      	movs	r0, #6
 80004be:	f000 fb67 	bl	8000b90 <GPIO_IRQHandling>
	dataAvailable = 1;
 80004c2:	4b02      	ldr	r3, [pc, #8]	@ (80004cc <EXTI9_5_IRQHandler+0x14>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	701a      	strb	r2, [r3, #0]
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000028e 	.word	0x2000028e

080004d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d0:	480d      	ldr	r0, [pc, #52]	@ (8000508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	@ (8000510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	@ (800051c <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80004fe:	f000 ff45 	bl	800138c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000502:	f7ff ff35 	bl	8000370 <main>

08000506 <LoopForever>:

LoopForever:
  b LoopForever
 8000506:	e7fe      	b.n	8000506 <LoopForever>
  ldr   r0, =_estack
 8000508:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000514:	08001fec 	.word	0x08001fec
  ldr r2, =_sbss
 8000518:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800051c:	200003e4 	.word	0x200003e4

08000520 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC_IRQHandler>
	...

08000524 <GPIO_PeriClockControl>:
 *
 * @Note			-	none
 *
 *******************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d162      	bne.n	80005fc <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a64      	ldr	r2, [pc, #400]	@ (80006cc <GPIO_PeriClockControl+0x1a8>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d106      	bne.n	800054c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800053e:	4b64      	ldr	r3, [pc, #400]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a63      	ldr	r2, [pc, #396]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
				}else if (pGPIOx == GPIOI)
				{
					GPIOI_PCLK_DI();
				}
	}
}
 800054a:	e0b9      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a61      	ldr	r2, [pc, #388]	@ (80006d4 <GPIO_PeriClockControl+0x1b0>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d106      	bne.n	8000562 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000554:	4b5e      	ldr	r3, [pc, #376]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000558:	4a5d      	ldr	r2, [pc, #372]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000560:	e0ae      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a5c      	ldr	r2, [pc, #368]	@ (80006d8 <GPIO_PeriClockControl+0x1b4>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d106      	bne.n	8000578 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800056a:	4b59      	ldr	r3, [pc, #356]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a58      	ldr	r2, [pc, #352]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000576:	e0a3      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a58      	ldr	r2, [pc, #352]	@ (80006dc <GPIO_PeriClockControl+0x1b8>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d106      	bne.n	800058e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000580:	4b53      	ldr	r3, [pc, #332]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000584:	4a52      	ldr	r2, [pc, #328]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800058c:	e098      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a53      	ldr	r2, [pc, #332]	@ (80006e0 <GPIO_PeriClockControl+0x1bc>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d106      	bne.n	80005a4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000596:	4b4e      	ldr	r3, [pc, #312]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a4d      	ldr	r2, [pc, #308]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005a2:	e08d      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a4f      	ldr	r2, [pc, #316]	@ (80006e4 <GPIO_PeriClockControl+0x1c0>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d106      	bne.n	80005ba <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005ac:	4b48      	ldr	r3, [pc, #288]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b0:	4a47      	ldr	r2, [pc, #284]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80005b2:	f043 0320 	orr.w	r3, r3, #32
 80005b6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005b8:	e082      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a4a      	ldr	r2, [pc, #296]	@ (80006e8 <GPIO_PeriClockControl+0x1c4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d106      	bne.n	80005d0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005c2:	4b43      	ldr	r3, [pc, #268]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a42      	ldr	r2, [pc, #264]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80005c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005ce:	e077      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a46      	ldr	r2, [pc, #280]	@ (80006ec <GPIO_PeriClockControl+0x1c8>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d106      	bne.n	80005e6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80005d8:	4b3d      	ldr	r3, [pc, #244]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005dc:	4a3c      	ldr	r2, [pc, #240]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80005de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005e4:	e06c      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a41      	ldr	r2, [pc, #260]	@ (80006f0 <GPIO_PeriClockControl+0x1cc>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d168      	bne.n	80006c0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80005ee:	4b38      	ldr	r3, [pc, #224]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a37      	ldr	r2, [pc, #220]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80005f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005fa:	e061      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a33      	ldr	r2, [pc, #204]	@ (80006cc <GPIO_PeriClockControl+0x1a8>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d106      	bne.n	8000612 <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 8000604:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000608:	4a31      	ldr	r2, [pc, #196]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 800060a:	f023 0301 	bic.w	r3, r3, #1
 800060e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000610:	e056      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a2f      	ldr	r2, [pc, #188]	@ (80006d4 <GPIO_PeriClockControl+0x1b0>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d106      	bne.n	8000628 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 800061a:	4b2d      	ldr	r3, [pc, #180]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000620:	f023 0302 	bic.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000626:	e04b      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a2b      	ldr	r2, [pc, #172]	@ (80006d8 <GPIO_PeriClockControl+0x1b4>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d106      	bne.n	800063e <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 8000630:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000634:	4a26      	ldr	r2, [pc, #152]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000636:	f023 0304 	bic.w	r3, r3, #4
 800063a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800063c:	e040      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a26      	ldr	r2, [pc, #152]	@ (80006dc <GPIO_PeriClockControl+0x1b8>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d106      	bne.n	8000654 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 8000646:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 800064c:	f023 0308 	bic.w	r3, r3, #8
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000652:	e035      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a22      	ldr	r2, [pc, #136]	@ (80006e0 <GPIO_PeriClockControl+0x1bc>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d106      	bne.n	800066a <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 800065c:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000660:	4a1b      	ldr	r2, [pc, #108]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000662:	f023 0310 	bic.w	r3, r3, #16
 8000666:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000668:	e02a      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a1d      	ldr	r2, [pc, #116]	@ (80006e4 <GPIO_PeriClockControl+0x1c0>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d106      	bne.n	8000680 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 8000678:	f023 0320 	bic.w	r3, r3, #32
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800067e:	e01f      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a19      	ldr	r2, [pc, #100]	@ (80006e8 <GPIO_PeriClockControl+0x1c4>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d106      	bne.n	8000696 <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068c:	4a10      	ldr	r2, [pc, #64]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 800068e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000692:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000694:	e014      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a14      	ldr	r2, [pc, #80]	@ (80006ec <GPIO_PeriClockControl+0x1c8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a0b      	ldr	r2, [pc, #44]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80006a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006aa:	e009      	b.n	80006c0 <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a10      	ldr	r2, [pc, #64]	@ (80006f0 <GPIO_PeriClockControl+0x1cc>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d105      	bne.n	80006c0 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	4a05      	ldr	r2, [pc, #20]	@ (80006d0 <GPIO_PeriClockControl+0x1ac>)
 80006ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80006be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020400 	.word	0x40020400
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020c00 	.word	0x40020c00
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40021400 	.word	0x40021400
 80006e8:	40021800 	.word	0x40021800
 80006ec:	40021c00 	.word	0x40021c00
 80006f0:	40022000 	.word	0x40022000

080006f4 <GPIO_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle )
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//temp. register
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2101      	movs	r1, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff0c 	bl	8000524 <GPIO_PeriClockControl>

	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	795b      	ldrb	r3, [r3, #5]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d820      	bhi.n	8000756 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	2103      	movs	r1, #3
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6819      	ldr	r1, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	430a      	orrs	r2, r1
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e0cb      	b.n	80008ee <GPIO_Init+0x1fa>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	795b      	ldrb	r3, [r3, #5]
 800075a:	2b04      	cmp	r3, #4
 800075c:	d117      	bne.n	800078e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800075e:	4b4b      	ldr	r3, [pc, #300]	@ (800088c <GPIO_Init+0x198>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7912      	ldrb	r2, [r2, #4]
 8000766:	4611      	mov	r1, r2
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	4611      	mov	r1, r2
 800076e:	4a47      	ldr	r2, [pc, #284]	@ (800088c <GPIO_Init+0x198>)
 8000770:	430b      	orrs	r3, r1
 8000772:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000774:	4b45      	ldr	r3, [pc, #276]	@ (800088c <GPIO_Init+0x198>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	7912      	ldrb	r2, [r2, #4]
 800077c:	4611      	mov	r1, r2
 800077e:	2201      	movs	r2, #1
 8000780:	408a      	lsls	r2, r1
 8000782:	43d2      	mvns	r2, r2
 8000784:	4611      	mov	r1, r2
 8000786:	4a41      	ldr	r2, [pc, #260]	@ (800088c <GPIO_Init+0x198>)
 8000788:	400b      	ands	r3, r1
 800078a:	6093      	str	r3, [r2, #8]
 800078c:	e035      	b.n	80007fa <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	2b05      	cmp	r3, #5
 8000794:	d117      	bne.n	80007c6 <GPIO_Init+0xd2>
		{
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000796:	4b3d      	ldr	r3, [pc, #244]	@ (800088c <GPIO_Init+0x198>)
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	7912      	ldrb	r2, [r2, #4]
 800079e:	4611      	mov	r1, r2
 80007a0:	2201      	movs	r2, #1
 80007a2:	408a      	lsls	r2, r1
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a39      	ldr	r2, [pc, #228]	@ (800088c <GPIO_Init+0x198>)
 80007a8:	430b      	orrs	r3, r1
 80007aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007ac:	4b37      	ldr	r3, [pc, #220]	@ (800088c <GPIO_Init+0x198>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7912      	ldrb	r2, [r2, #4]
 80007b4:	4611      	mov	r1, r2
 80007b6:	2201      	movs	r2, #1
 80007b8:	408a      	lsls	r2, r1
 80007ba:	43d2      	mvns	r2, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a33      	ldr	r2, [pc, #204]	@ (800088c <GPIO_Init+0x198>)
 80007c0:	400b      	ands	r3, r1
 80007c2:	60d3      	str	r3, [r2, #12]
 80007c4:	e019      	b.n	80007fa <GPIO_Init+0x106>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d115      	bne.n	80007fa <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007ce:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <GPIO_Init+0x198>)
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	7912      	ldrb	r2, [r2, #4]
 80007d6:	4611      	mov	r1, r2
 80007d8:	2201      	movs	r2, #1
 80007da:	408a      	lsls	r2, r1
 80007dc:	4611      	mov	r1, r2
 80007de:	4a2b      	ldr	r2, [pc, #172]	@ (800088c <GPIO_Init+0x198>)
 80007e0:	430b      	orrs	r3, r1
 80007e2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007e4:	4b29      	ldr	r3, [pc, #164]	@ (800088c <GPIO_Init+0x198>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	7912      	ldrb	r2, [r2, #4]
 80007ec:	4611      	mov	r1, r2
 80007ee:	2201      	movs	r2, #1
 80007f0:	408a      	lsls	r2, r1
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a25      	ldr	r2, [pc, #148]	@ (800088c <GPIO_Init+0x198>)
 80007f6:	430b      	orrs	r3, r1
 80007f8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	089b      	lsrs	r3, r3, #2
 8000800:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	f003 0303 	and.w	r3, r3, #3
 800080a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1f      	ldr	r2, [pc, #124]	@ (8000890 <GPIO_Init+0x19c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d04e      	beq.n	80008b4 <GPIO_Init+0x1c0>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1e      	ldr	r2, [pc, #120]	@ (8000894 <GPIO_Init+0x1a0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d032      	beq.n	8000886 <GPIO_Init+0x192>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <GPIO_Init+0x1a4>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d02b      	beq.n	8000882 <GPIO_Init+0x18e>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <GPIO_Init+0x1a8>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d024      	beq.n	800087e <GPIO_Init+0x18a>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a19      	ldr	r2, [pc, #100]	@ (80008a0 <GPIO_Init+0x1ac>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d01d      	beq.n	800087a <GPIO_Init+0x186>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <GPIO_Init+0x1b0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d016      	beq.n	8000876 <GPIO_Init+0x182>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a16      	ldr	r2, [pc, #88]	@ (80008a8 <GPIO_Init+0x1b4>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d00f      	beq.n	8000872 <GPIO_Init+0x17e>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a15      	ldr	r2, [pc, #84]	@ (80008ac <GPIO_Init+0x1b8>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d008      	beq.n	800086e <GPIO_Init+0x17a>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <GPIO_Init+0x1bc>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d101      	bne.n	800086a <GPIO_Init+0x176>
 8000866:	2308      	movs	r3, #8
 8000868:	e025      	b.n	80008b6 <GPIO_Init+0x1c2>
 800086a:	2300      	movs	r3, #0
 800086c:	e023      	b.n	80008b6 <GPIO_Init+0x1c2>
 800086e:	2307      	movs	r3, #7
 8000870:	e021      	b.n	80008b6 <GPIO_Init+0x1c2>
 8000872:	2306      	movs	r3, #6
 8000874:	e01f      	b.n	80008b6 <GPIO_Init+0x1c2>
 8000876:	2305      	movs	r3, #5
 8000878:	e01d      	b.n	80008b6 <GPIO_Init+0x1c2>
 800087a:	2304      	movs	r3, #4
 800087c:	e01b      	b.n	80008b6 <GPIO_Init+0x1c2>
 800087e:	2303      	movs	r3, #3
 8000880:	e019      	b.n	80008b6 <GPIO_Init+0x1c2>
 8000882:	2302      	movs	r3, #2
 8000884:	e017      	b.n	80008b6 <GPIO_Init+0x1c2>
 8000886:	2301      	movs	r3, #1
 8000888:	e015      	b.n	80008b6 <GPIO_Init+0x1c2>
 800088a:	bf00      	nop
 800088c:	40013c00 	.word	0x40013c00
 8000890:	40020000 	.word	0x40020000
 8000894:	40020400 	.word	0x40020400
 8000898:	40020800 	.word	0x40020800
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40021400 	.word	0x40021400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	40021c00 	.word	0x40021c00
 80008b0:	40022000 	.word	0x40022000
 80008b4:	2300      	movs	r3, #0
 80008b6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80008b8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a30 <GPIO_Init+0x33c>)
 80008ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008bc:	4a5c      	ldr	r2, [pc, #368]	@ (8000a30 <GPIO_Init+0x33c>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c2:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80008c4:	7c7a      	ldrb	r2, [r7, #17]
 80008c6:	7cbb      	ldrb	r3, [r7, #18]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	fa02 f103 	lsl.w	r1, r2, r3
 80008ce:	4a59      	ldr	r2, [pc, #356]	@ (8000a34 <GPIO_Init+0x340>)
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	3302      	adds	r3, #2
 80008d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI -> IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d8:	4b57      	ldr	r3, [pc, #348]	@ (8000a38 <GPIO_Init+0x344>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	7912      	ldrb	r2, [r2, #4]
 80008e0:	4611      	mov	r1, r2
 80008e2:	2201      	movs	r2, #1
 80008e4:	408a      	lsls	r2, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	4a53      	ldr	r2, [pc, #332]	@ (8000a38 <GPIO_Init+0x344>)
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	799b      	ldrb	r3, [r3, #6]
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	791b      	ldrb	r3, [r3, #4]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	2103      	movs	r1, #3
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	4619      	mov	r1, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	400a      	ands	r2, r1
 8000924:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6899      	ldr	r1, [r3, #8]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	430a      	orrs	r2, r1
 8000934:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	79db      	ldrb	r3, [r3, #7]
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 <<  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2103      	movs	r1, #3
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	400a      	ands	r2, r1
 8000968:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68d9      	ldr	r1, [r3, #12]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	430a      	orrs	r2, r1
 8000978:	60da      	str	r2, [r3, #12]

	temp = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	7a1b      	ldrb	r3, [r3, #8]
 8000982:	461a      	mov	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	4619      	mov	r1, r3
 800099a:	2301      	movs	r3, #1
 800099c:	408b      	lsls	r3, r1
 800099e:	43db      	mvns	r3, r3
 80009a0:	4619      	mov	r1, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	400a      	ands	r2, r1
 80009a8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6859      	ldr	r1, [r3, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	795b      	ldrb	r3, [r3, #5]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d131      	bne.n	8000a26 <GPIO_Init+0x332>
	{
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) );
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	7c3a      	ldrb	r2, [r7, #16]
 80009da:	3208      	adds	r2, #8
 80009dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	7c3a      	ldrb	r2, [r7, #16]
 80009f4:	4001      	ands	r1, r0
 80009f6:	3208      	adds	r2, #8
 80009f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	7c3a      	ldrb	r2, [r7, #16]
 8000a02:	3208      	adds	r2, #8
 8000a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7a5b      	ldrb	r3, [r3, #9]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	7c3a      	ldrb	r2, [r7, #16]
 8000a1e:	4301      	orrs	r1, r0
 8000a20:	3208      	adds	r2, #8
 8000a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40013800 	.word	0x40013800
 8000a38:	40013c00 	.word	0x40013c00

08000a3c <GPIO_IRQInterruptConfig>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d167      	bne.n	8000b22 <GPIO_IRQInterruptConfig+0xe6>
	{
		if(IRQNumber <= 31)
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b1f      	cmp	r3, #31
 8000a56:	d80a      	bhi.n	8000a6e <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber);
 8000a58:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <GPIO_IRQInterruptConfig+0xf0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f202 	lsl.w	r2, r1, r2
 8000a64:	4611      	mov	r1, r2
 8000a66:	4a31      	ldr	r2, [pc, #196]	@ (8000b2c <GPIO_IRQInterruptConfig+0xf0>)
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	6013      	str	r3, [r2, #0]
				//program ICER2 register
				*NVIC_ICER3 |= ( 1 << IRQNumber % 64);
			}
		}
	}
}
 8000a6c:	e059      	b.n	8000b22 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)	//32 to 63
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b1f      	cmp	r3, #31
 8000a72:	d90f      	bls.n	8000a94 <GPIO_IRQInterruptConfig+0x58>
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a78:	d80c      	bhi.n	8000a94 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << IRQNumber % 32);
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <GPIO_IRQInterruptConfig+0xf4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	f002 021f 	and.w	r2, r2, #31
 8000a84:	2101      	movs	r1, #1
 8000a86:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <GPIO_IRQInterruptConfig+0xf4>)
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e046      	b.n	8000b22 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)	//64 to 95
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a98:	d90f      	bls.n	8000aba <GPIO_IRQInterruptConfig+0x7e>
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000a9e:	d80c      	bhi.n	8000aba <GPIO_IRQInterruptConfig+0x7e>
			*NVIC_ISER3 |= ( 1 << IRQNumber % 64);
 8000aa0:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <GPIO_IRQInterruptConfig+0xf8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000aaa:	2101      	movs	r1, #1
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a20      	ldr	r2, [pc, #128]	@ (8000b34 <GPIO_IRQInterruptConfig+0xf8>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	e033      	b.n	8000b22 <GPIO_IRQInterruptConfig+0xe6>
			if(IRQNumber <= 31)
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b1f      	cmp	r3, #31
 8000abe:	d80a      	bhi.n	8000ad6 <GPIO_IRQInterruptConfig+0x9a>
				*NVIC_ISER0 |= ( 1 << IRQNumber);
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <GPIO_IRQInterruptConfig+0xf0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <GPIO_IRQInterruptConfig+0xf0>)
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	e025      	b.n	8000b22 <GPIO_IRQInterruptConfig+0xe6>
			else if(IRQNumber > 31 && IRQNumber < 64)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b1f      	cmp	r3, #31
 8000ada:	d90f      	bls.n	8000afc <GPIO_IRQInterruptConfig+0xc0>
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ae0:	d80c      	bhi.n	8000afc <GPIO_IRQInterruptConfig+0xc0>
				*NVIC_ISER1 |= ( 1 << IRQNumber % 32);
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <GPIO_IRQInterruptConfig+0xf4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	f002 021f 	and.w	r2, r2, #31
 8000aec:	2101      	movs	r1, #1
 8000aee:	fa01 f202 	lsl.w	r2, r1, r2
 8000af2:	4611      	mov	r1, r2
 8000af4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b30 <GPIO_IRQInterruptConfig+0xf4>)
 8000af6:	430b      	orrs	r3, r1
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e012      	b.n	8000b22 <GPIO_IRQInterruptConfig+0xe6>
			else if(IRQNumber >= 64 && IRQNumber < 96)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b00:	d90f      	bls.n	8000b22 <GPIO_IRQInterruptConfig+0xe6>
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b5f      	cmp	r3, #95	@ 0x5f
 8000b06:	d80c      	bhi.n	8000b22 <GPIO_IRQInterruptConfig+0xe6>
				*NVIC_ICER3 |= ( 1 << IRQNumber % 64);
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <GPIO_IRQInterruptConfig+0xfc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b12:	2101      	movs	r1, #1
 8000b14:	fa01 f202 	lsl.w	r2, r1, r2
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <GPIO_IRQInterruptConfig+0xfc>)
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	e7ff      	b.n	8000b22 <GPIO_IRQInterruptConfig+0xe6>
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000e104 	.word	0xe000e104
 8000b34:	e000e10c 	.word	0xe000e10c
 8000b38:	e000e18c 	.word	0xe000e18c

08000b3c <GPIO_IRQPriorityConfig>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
	//1. ipr register
	uint8_t iprx = IRQNumber / 4;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED);
 8000b56:	7bbb      	ldrb	r3, [r7, #14]
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx) |= ( IRQPriority << shift_amount );
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000b68:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000b6c:	6819      	ldr	r1, [r3, #0]
 8000b6e:	7b7b      	ldrb	r3, [r7, #13]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	409a      	lsls	r2, r3
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000b7c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000b80:	430a      	orrs	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]

}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
	...

08000b90 <GPIO_IRQHandling>:
 *
 * @Note			-
 *
 *******************************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber))
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <GPIO_IRQHandling+0x3c>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d009      	beq.n	8000bc0 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <GPIO_IRQHandling+0x3c>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <GPIO_IRQHandling+0x3c>)
 8000bbc:	430b      	orrs	r3, r1
 8000bbe:	6153      	str	r3, [r2, #20]
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40013c00 	.word	0x40013c00

08000bd0 <SPI_PeriClockControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d12b      	bne.n	8000c3a <SPI_PeriClockControl+0x6a>
		{
			if(pSPIx == SPI1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a2d      	ldr	r2, [pc, #180]	@ (8000c9c <SPI_PeriClockControl+0xcc>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d106      	bne.n	8000bf8 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 8000bea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a2c      	ldr	r2, [pc, #176]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
			}else if (pSPIx == SPI4)
			{
				SPI4_PCLK_DI();
			}
		}
}
 8000bf6:	e04b      	b.n	8000c90 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca4 <SPI_PeriClockControl+0xd4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d106      	bne.n	8000c0e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000c00:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	4a26      	ldr	r2, [pc, #152]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c0c:	e040      	b.n	8000c90 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI3)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a25      	ldr	r2, [pc, #148]	@ (8000ca8 <SPI_PeriClockControl+0xd8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d106      	bne.n	8000c24 <SPI_PeriClockControl+0x54>
				SPI3_PCLK_EN();
 8000c16:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a21      	ldr	r2, [pc, #132]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c22:	e035      	b.n	8000c90 <SPI_PeriClockControl+0xc0>
			else if (pSPIx == SPI4)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a21      	ldr	r2, [pc, #132]	@ (8000cac <SPI_PeriClockControl+0xdc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d131      	bne.n	8000c90 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_EN();
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c36:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c38:	e02a      	b.n	8000c90 <SPI_PeriClockControl+0xc0>
			if(pSPIx == SPI1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	@ (8000c9c <SPI_PeriClockControl+0xcc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d106      	bne.n	8000c50 <SPI_PeriClockControl+0x80>
				SPI1_PCLK_DI();
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a16      	ldr	r2, [pc, #88]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c4e:	e01f      	b.n	8000c90 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a14      	ldr	r2, [pc, #80]	@ (8000ca4 <SPI_PeriClockControl+0xd4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d106      	bne.n	8000c66 <SPI_PeriClockControl+0x96>
				SPI2_PCLK_DI();
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	4a10      	ldr	r2, [pc, #64]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c62:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c64:	e014      	b.n	8000c90 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI3)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca8 <SPI_PeriClockControl+0xd8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d106      	bne.n	8000c7c <SPI_PeriClockControl+0xac>
				SPI3_PCLK_DI();
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c78:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c7a:	e009      	b.n	8000c90 <SPI_PeriClockControl+0xc0>
			}else if (pSPIx == SPI4)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000cac <SPI_PeriClockControl+0xdc>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d105      	bne.n	8000c90 <SPI_PeriClockControl+0xc0>
				SPI4_PCLK_DI();
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c88:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SPI_PeriClockControl+0xd0>)
 8000c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000c8e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40003800 	.word	0x40003800
 8000ca8:	40003c00 	.word	0x40003c00
 8000cac:	40013400 	.word	0x40013400

08000cb0 <SPI_Init>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	//Peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff86 	bl	8000bd0 <SPI_PeriClockControl>

	//Configure SPI_CR1 register
	uint32_t tempreg = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	791b      	ldrb	r3, [r3, #4]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	795b      	ldrb	r3, [r3, #5]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d104      	bne.n	8000ce6 <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e014      	b.n	8000d10 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	795b      	ldrb	r3, [r3, #5]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d104      	bne.n	8000cf8 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e00b      	b.n	8000d10 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	795b      	ldrb	r3, [r3, #5]
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d107      	bne.n	8000d10 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d06:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0e:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the SPI serial clock speed (Baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	799b      	ldrb	r3, [r3, #6]
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	79db      	ldrb	r3, [r3, #7]
 8000d20:	02db      	lsls	r3, r3, #11
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7a1b      	ldrb	r3, [r3, #8]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7a5b      	ldrb	r3, [r3, #9]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <SPI_GetFlagStatus>:
		pSPIx->SR = 0;
		pSPIx->DR = 0;
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <SPI_PeripheralControl>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d106      	bne.n	8000d96 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000d94:	e005      	b.n	8000da2 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	601a      	str	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <SPI_SSOEConfig>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d106      	bne.n	8000dcc <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f043 0204 	orr.w	r2, r3, #4
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000dca:	e005      	b.n	8000dd8 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f023 0204 	bic.w	r2, r3, #4
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	605a      	str	r2, [r3, #4]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <SPI_IRQInterruptConfig>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	460a      	mov	r2, r1
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	4613      	mov	r3, r2
 8000df0:	71bb      	strb	r3, [r7, #6]

}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <SPI_SendDataIT>:
 *
 * @Note			-
 *
 *******************************************************************************/
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	7f1b      	ldrb	r3, [r3, #28]
 8000e0c:	75fb      	strb	r3, [r7, #23]

	if( state != SPI_BUSY_IN_TX)
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d010      	beq.n	8000e36 <SPI_SendDataIT+0x3a>
	{
		//1. Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	615a      	str	r2, [r3, #20]

		//2. Mark th SPI state as busy in transmission so that
		//	no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2202      	movs	r2, #2
 8000e24:	771a      	strb	r2, [r3, #28]

		//3. Enable the TXEIE control bit to ger interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e34:	605a      	str	r2, [r3, #4]
	}

	return state;
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <SPI_ReceiveDataIT>:
 *
 * @Note			-
 *
 *******************************************************************************/
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b087      	sub	sp, #28
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	7f5b      	ldrb	r3, [r3, #29]
 8000e52:	75fb      	strb	r3, [r7, #23]

		if( state != SPI_BUSY_IN_RX)
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d010      	beq.n	8000e7c <SPI_ReceiveDataIT+0x3a>
		{
			//1. Save the Rx buffer address and Len information
			pSPIHandle->pRxBuffer = pRxBuffer;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	611a      	str	r2, [r3, #16]
			pSPIHandle->RxLen = Len;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	619a      	str	r2, [r3, #24]

			//2. Mark SPI state as busy in reception
			pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	775a      	strb	r2, [r3, #29]

			//3. // Enable RXNEIE to generate interrupt when RXNE flag is set
			pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_RXNEIE );
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e7a:	605a      	str	r2, [r3, #4]
		}

		return state;
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <SPI_IRQHandling>:
 *
 * @Note			-
 *
 *******************************************************************************/
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2;
	//First lets check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE );
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE );
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000eaa:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2 )
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <SPI_IRQHandling+0x36>
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <SPI_IRQHandling+0x36>
	{
		//Handle TXE
		spi_txe_interrupt_handle(pHandle);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f832 	bl	8000f22 <spi_txe_interrupt_handle>
	}

	//Check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE );
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE );
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed8:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2 )
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <SPI_IRQHandling+0x64>
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <SPI_IRQHandling+0x64>
		{
			//Handle RXNE
			spi_rxne_interrupt_handle(pHandle);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f85b 	bl	8000fa2 <spi_rxne_interrupt_handle>
		}

	//Check for ovr flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR );
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef8:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE );
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0320 	and.w	r3, r3, #32
 8000f06:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2 )
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <SPI_IRQHandling+0x92>
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <SPI_IRQHandling+0x92>
		{
			//Handle ovr error
			spi_ovr_err_interrupt_handle(pHandle);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f886 	bl	8001026 <spi_ovr_err_interrupt_handle>
		}

}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <spi_txe_interrupt_handle>:

//some helper funciton implementations

static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	//2. Check the DFF bit i CR1
	if(pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d015      	beq.n	8000f64 <spi_txe_interrupt_handle+0x42>
	{
		//16 bit dff
		//1. Load the data in to the DR
		pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	881a      	ldrh	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	1e5a      	subs	r2, r3, #1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	e00f      	b.n	8000f84 <spi_txe_interrupt_handle+0x62>
	}
	else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	1e5a      	subs	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60da      	str	r2, [r3, #12]
	}

	if( ! pSPIHandle->TxLen )
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d106      	bne.n	8000f9a <spi_txe_interrupt_handle+0x78>
	{
		//Txlen is zero, so close the SPI transmission and inform the application that TX is over

		//This prevents interrupts from settinf up of TXE Flag
		SPI_CloseTransmission(pSPIHandle);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f862 	bl	8001056 <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 8000f92:	2101      	movs	r1, #1
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fa59 	bl	800044c <SPI_ApplicationEventCallback>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <spi_rxne_interrupt_handle>:

static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	//Do rxing as per the diff
		if(pSPIHandle->pSPIx->CR1 & ( 1 << 11))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d016      	beq.n	8000fe6 <spi_rxne_interrupt_handle+0x44>
		{
			//16 bit
			*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t)pSPIHandle->pSPIx->DR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	801a      	strh	r2, [r3, #0]
			pSPIHandle->RxLen -= 2;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	1e9a      	subs	r2, r3, #2
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
			pSPIHandle->pRxBuffer--;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	1e5a      	subs	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	611a      	str	r2, [r3, #16]
			pSPIHandle->pRxBuffer--;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	1e5a      	subs	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	e010      	b.n	8001008 <spi_rxne_interrupt_handle+0x66>
		}
		else
		{
			//8 bit
			*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	701a      	strb	r2, [r3, #0]
			pSPIHandle->RxLen --;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
			pSPIHandle->pRxBuffer--;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	1e5a      	subs	r2, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	611a      	str	r2, [r3, #16]
		}

		if( ! pSPIHandle->RxLen )
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d106      	bne.n	800101e <spi_rxne_interrupt_handle+0x7c>
		{
			//This prevents interrupts from settinf up of TXE Flag
			SPI_CloseReception(pSPIHandle);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f83a 	bl	800108a <SPI_CloseReception>
			SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 8001016:	2102      	movs	r1, #2
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fa17 	bl	800044c <SPI_ApplicationEventCallback>
		}
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <spi_ovr_err_interrupt_handle>:

static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7f1b      	ldrb	r3, [r3, #28]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d007      	beq.n	8001046 <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform th application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 8001046:	2103      	movs	r1, #3
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff f9ff 	bl	800044c <SPI_ApplicationEventCallback>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <SPI_CloseTransmission>:

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800106c:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	771a      	strb	r2, [r3, #28]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010a0:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	775a      	strb	r2, [r3, #29]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
	...

080010c0 <std>:
 80010c0:	2300      	movs	r3, #0
 80010c2:	b510      	push	{r4, lr}
 80010c4:	4604      	mov	r4, r0
 80010c6:	e9c0 3300 	strd	r3, r3, [r0]
 80010ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010ce:	6083      	str	r3, [r0, #8]
 80010d0:	8181      	strh	r1, [r0, #12]
 80010d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80010d4:	81c2      	strh	r2, [r0, #14]
 80010d6:	6183      	str	r3, [r0, #24]
 80010d8:	4619      	mov	r1, r3
 80010da:	2208      	movs	r2, #8
 80010dc:	305c      	adds	r0, #92	@ 0x5c
 80010de:	f000 f906 	bl	80012ee <memset>
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <std+0x58>)
 80010e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <std+0x5c>)
 80010e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <std+0x60>)
 80010ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <std+0x64>)
 80010f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <std+0x68>)
 80010f4:	6224      	str	r4, [r4, #32]
 80010f6:	429c      	cmp	r4, r3
 80010f8:	d006      	beq.n	8001108 <std+0x48>
 80010fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80010fe:	4294      	cmp	r4, r2
 8001100:	d002      	beq.n	8001108 <std+0x48>
 8001102:	33d0      	adds	r3, #208	@ 0xd0
 8001104:	429c      	cmp	r4, r3
 8001106:	d105      	bne.n	8001114 <std+0x54>
 8001108:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800110c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001110:	f000 b960 	b.w	80013d4 <__retarget_lock_init_recursive>
 8001114:	bd10      	pop	{r4, pc}
 8001116:	bf00      	nop
 8001118:	08001269 	.word	0x08001269
 800111c:	0800128b 	.word	0x0800128b
 8001120:	080012c3 	.word	0x080012c3
 8001124:	080012e7 	.word	0x080012e7
 8001128:	20000294 	.word	0x20000294

0800112c <stdio_exit_handler>:
 800112c:	4a02      	ldr	r2, [pc, #8]	@ (8001138 <stdio_exit_handler+0xc>)
 800112e:	4903      	ldr	r1, [pc, #12]	@ (800113c <stdio_exit_handler+0x10>)
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <stdio_exit_handler+0x14>)
 8001132:	f000 b869 	b.w	8001208 <_fwalk_sglue>
 8001136:	bf00      	nop
 8001138:	20000000 	.word	0x20000000
 800113c:	08001c65 	.word	0x08001c65
 8001140:	20000010 	.word	0x20000010

08001144 <cleanup_stdio>:
 8001144:	6841      	ldr	r1, [r0, #4]
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <cleanup_stdio+0x34>)
 8001148:	4299      	cmp	r1, r3
 800114a:	b510      	push	{r4, lr}
 800114c:	4604      	mov	r4, r0
 800114e:	d001      	beq.n	8001154 <cleanup_stdio+0x10>
 8001150:	f000 fd88 	bl	8001c64 <_fflush_r>
 8001154:	68a1      	ldr	r1, [r4, #8]
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <cleanup_stdio+0x38>)
 8001158:	4299      	cmp	r1, r3
 800115a:	d002      	beq.n	8001162 <cleanup_stdio+0x1e>
 800115c:	4620      	mov	r0, r4
 800115e:	f000 fd81 	bl	8001c64 <_fflush_r>
 8001162:	68e1      	ldr	r1, [r4, #12]
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <cleanup_stdio+0x3c>)
 8001166:	4299      	cmp	r1, r3
 8001168:	d004      	beq.n	8001174 <cleanup_stdio+0x30>
 800116a:	4620      	mov	r0, r4
 800116c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001170:	f000 bd78 	b.w	8001c64 <_fflush_r>
 8001174:	bd10      	pop	{r4, pc}
 8001176:	bf00      	nop
 8001178:	20000294 	.word	0x20000294
 800117c:	200002fc 	.word	0x200002fc
 8001180:	20000364 	.word	0x20000364

08001184 <global_stdio_init.part.0>:
 8001184:	b510      	push	{r4, lr}
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <global_stdio_init.part.0+0x30>)
 8001188:	4c0b      	ldr	r4, [pc, #44]	@ (80011b8 <global_stdio_init.part.0+0x34>)
 800118a:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <global_stdio_init.part.0+0x38>)
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	4620      	mov	r0, r4
 8001190:	2200      	movs	r2, #0
 8001192:	2104      	movs	r1, #4
 8001194:	f7ff ff94 	bl	80010c0 <std>
 8001198:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800119c:	2201      	movs	r2, #1
 800119e:	2109      	movs	r1, #9
 80011a0:	f7ff ff8e 	bl	80010c0 <std>
 80011a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80011a8:	2202      	movs	r2, #2
 80011aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011ae:	2112      	movs	r1, #18
 80011b0:	f7ff bf86 	b.w	80010c0 <std>
 80011b4:	200003cc 	.word	0x200003cc
 80011b8:	20000294 	.word	0x20000294
 80011bc:	0800112d 	.word	0x0800112d

080011c0 <__sfp_lock_acquire>:
 80011c0:	4801      	ldr	r0, [pc, #4]	@ (80011c8 <__sfp_lock_acquire+0x8>)
 80011c2:	f000 b908 	b.w	80013d6 <__retarget_lock_acquire_recursive>
 80011c6:	bf00      	nop
 80011c8:	200003d5 	.word	0x200003d5

080011cc <__sfp_lock_release>:
 80011cc:	4801      	ldr	r0, [pc, #4]	@ (80011d4 <__sfp_lock_release+0x8>)
 80011ce:	f000 b903 	b.w	80013d8 <__retarget_lock_release_recursive>
 80011d2:	bf00      	nop
 80011d4:	200003d5 	.word	0x200003d5

080011d8 <__sinit>:
 80011d8:	b510      	push	{r4, lr}
 80011da:	4604      	mov	r4, r0
 80011dc:	f7ff fff0 	bl	80011c0 <__sfp_lock_acquire>
 80011e0:	6a23      	ldr	r3, [r4, #32]
 80011e2:	b11b      	cbz	r3, 80011ec <__sinit+0x14>
 80011e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011e8:	f7ff bff0 	b.w	80011cc <__sfp_lock_release>
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <__sinit+0x28>)
 80011ee:	6223      	str	r3, [r4, #32]
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__sinit+0x2c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f5      	bne.n	80011e4 <__sinit+0xc>
 80011f8:	f7ff ffc4 	bl	8001184 <global_stdio_init.part.0>
 80011fc:	e7f2      	b.n	80011e4 <__sinit+0xc>
 80011fe:	bf00      	nop
 8001200:	08001145 	.word	0x08001145
 8001204:	200003cc 	.word	0x200003cc

08001208 <_fwalk_sglue>:
 8001208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800120c:	4607      	mov	r7, r0
 800120e:	4688      	mov	r8, r1
 8001210:	4614      	mov	r4, r2
 8001212:	2600      	movs	r6, #0
 8001214:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001218:	f1b9 0901 	subs.w	r9, r9, #1
 800121c:	d505      	bpl.n	800122a <_fwalk_sglue+0x22>
 800121e:	6824      	ldr	r4, [r4, #0]
 8001220:	2c00      	cmp	r4, #0
 8001222:	d1f7      	bne.n	8001214 <_fwalk_sglue+0xc>
 8001224:	4630      	mov	r0, r6
 8001226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800122a:	89ab      	ldrh	r3, [r5, #12]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d907      	bls.n	8001240 <_fwalk_sglue+0x38>
 8001230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001234:	3301      	adds	r3, #1
 8001236:	d003      	beq.n	8001240 <_fwalk_sglue+0x38>
 8001238:	4629      	mov	r1, r5
 800123a:	4638      	mov	r0, r7
 800123c:	47c0      	blx	r8
 800123e:	4306      	orrs	r6, r0
 8001240:	3568      	adds	r5, #104	@ 0x68
 8001242:	e7e9      	b.n	8001218 <_fwalk_sglue+0x10>

08001244 <iprintf>:
 8001244:	b40f      	push	{r0, r1, r2, r3}
 8001246:	b507      	push	{r0, r1, r2, lr}
 8001248:	4906      	ldr	r1, [pc, #24]	@ (8001264 <iprintf+0x20>)
 800124a:	ab04      	add	r3, sp, #16
 800124c:	6808      	ldr	r0, [r1, #0]
 800124e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001252:	6881      	ldr	r1, [r0, #8]
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f000 f9e1 	bl	800161c <_vfiprintf_r>
 800125a:	b003      	add	sp, #12
 800125c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001260:	b004      	add	sp, #16
 8001262:	4770      	bx	lr
 8001264:	2000000c 	.word	0x2000000c

08001268 <__sread>:
 8001268:	b510      	push	{r4, lr}
 800126a:	460c      	mov	r4, r1
 800126c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001270:	f000 f868 	bl	8001344 <_read_r>
 8001274:	2800      	cmp	r0, #0
 8001276:	bfab      	itete	ge
 8001278:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800127a:	89a3      	ldrhlt	r3, [r4, #12]
 800127c:	181b      	addge	r3, r3, r0
 800127e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001282:	bfac      	ite	ge
 8001284:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001286:	81a3      	strhlt	r3, [r4, #12]
 8001288:	bd10      	pop	{r4, pc}

0800128a <__swrite>:
 800128a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800128e:	461f      	mov	r7, r3
 8001290:	898b      	ldrh	r3, [r1, #12]
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	4605      	mov	r5, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4616      	mov	r6, r2
 800129a:	d505      	bpl.n	80012a8 <__swrite+0x1e>
 800129c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012a0:	2302      	movs	r3, #2
 80012a2:	2200      	movs	r2, #0
 80012a4:	f000 f83c 	bl	8001320 <_lseek_r>
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012b2:	81a3      	strh	r3, [r4, #12]
 80012b4:	4632      	mov	r2, r6
 80012b6:	463b      	mov	r3, r7
 80012b8:	4628      	mov	r0, r5
 80012ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012be:	f000 b853 	b.w	8001368 <_write_r>

080012c2 <__sseek>:
 80012c2:	b510      	push	{r4, lr}
 80012c4:	460c      	mov	r4, r1
 80012c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ca:	f000 f829 	bl	8001320 <_lseek_r>
 80012ce:	1c43      	adds	r3, r0, #1
 80012d0:	89a3      	ldrh	r3, [r4, #12]
 80012d2:	bf15      	itete	ne
 80012d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80012d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80012da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80012de:	81a3      	strheq	r3, [r4, #12]
 80012e0:	bf18      	it	ne
 80012e2:	81a3      	strhne	r3, [r4, #12]
 80012e4:	bd10      	pop	{r4, pc}

080012e6 <__sclose>:
 80012e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ea:	f000 b809 	b.w	8001300 <_close_r>

080012ee <memset>:
 80012ee:	4402      	add	r2, r0
 80012f0:	4603      	mov	r3, r0
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d100      	bne.n	80012f8 <memset+0xa>
 80012f6:	4770      	bx	lr
 80012f8:	f803 1b01 	strb.w	r1, [r3], #1
 80012fc:	e7f9      	b.n	80012f2 <memset+0x4>
	...

08001300 <_close_r>:
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4d06      	ldr	r5, [pc, #24]	@ (800131c <_close_r+0x1c>)
 8001304:	2300      	movs	r3, #0
 8001306:	4604      	mov	r4, r0
 8001308:	4608      	mov	r0, r1
 800130a:	602b      	str	r3, [r5, #0]
 800130c:	f000 fdfa 	bl	8001f04 <_close>
 8001310:	1c43      	adds	r3, r0, #1
 8001312:	d102      	bne.n	800131a <_close_r+0x1a>
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	b103      	cbz	r3, 800131a <_close_r+0x1a>
 8001318:	6023      	str	r3, [r4, #0]
 800131a:	bd38      	pop	{r3, r4, r5, pc}
 800131c:	200003d0 	.word	0x200003d0

08001320 <_lseek_r>:
 8001320:	b538      	push	{r3, r4, r5, lr}
 8001322:	4d07      	ldr	r5, [pc, #28]	@ (8001340 <_lseek_r+0x20>)
 8001324:	4604      	mov	r4, r0
 8001326:	4608      	mov	r0, r1
 8001328:	4611      	mov	r1, r2
 800132a:	2200      	movs	r2, #0
 800132c:	602a      	str	r2, [r5, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	f000 fe00 	bl	8001f34 <_lseek>
 8001334:	1c43      	adds	r3, r0, #1
 8001336:	d102      	bne.n	800133e <_lseek_r+0x1e>
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	b103      	cbz	r3, 800133e <_lseek_r+0x1e>
 800133c:	6023      	str	r3, [r4, #0]
 800133e:	bd38      	pop	{r3, r4, r5, pc}
 8001340:	200003d0 	.word	0x200003d0

08001344 <_read_r>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4d07      	ldr	r5, [pc, #28]	@ (8001364 <_read_r+0x20>)
 8001348:	4604      	mov	r4, r0
 800134a:	4608      	mov	r0, r1
 800134c:	4611      	mov	r1, r2
 800134e:	2200      	movs	r2, #0
 8001350:	602a      	str	r2, [r5, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	f000 fdf6 	bl	8001f44 <_read>
 8001358:	1c43      	adds	r3, r0, #1
 800135a:	d102      	bne.n	8001362 <_read_r+0x1e>
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	b103      	cbz	r3, 8001362 <_read_r+0x1e>
 8001360:	6023      	str	r3, [r4, #0]
 8001362:	bd38      	pop	{r3, r4, r5, pc}
 8001364:	200003d0 	.word	0x200003d0

08001368 <_write_r>:
 8001368:	b538      	push	{r3, r4, r5, lr}
 800136a:	4d07      	ldr	r5, [pc, #28]	@ (8001388 <_write_r+0x20>)
 800136c:	4604      	mov	r4, r0
 800136e:	4608      	mov	r0, r1
 8001370:	4611      	mov	r1, r2
 8001372:	2200      	movs	r2, #0
 8001374:	602a      	str	r2, [r5, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	f000 fdfa 	bl	8001f70 <_write>
 800137c:	1c43      	adds	r3, r0, #1
 800137e:	d102      	bne.n	8001386 <_write_r+0x1e>
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	b103      	cbz	r3, 8001386 <_write_r+0x1e>
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	bd38      	pop	{r3, r4, r5, pc}
 8001388:	200003d0 	.word	0x200003d0

0800138c <__libc_init_array>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	4d0d      	ldr	r5, [pc, #52]	@ (80013c4 <__libc_init_array+0x38>)
 8001390:	4c0d      	ldr	r4, [pc, #52]	@ (80013c8 <__libc_init_array+0x3c>)
 8001392:	1b64      	subs	r4, r4, r5
 8001394:	10a4      	asrs	r4, r4, #2
 8001396:	2600      	movs	r6, #0
 8001398:	42a6      	cmp	r6, r4
 800139a:	d109      	bne.n	80013b0 <__libc_init_array+0x24>
 800139c:	4d0b      	ldr	r5, [pc, #44]	@ (80013cc <__libc_init_array+0x40>)
 800139e:	4c0c      	ldr	r4, [pc, #48]	@ (80013d0 <__libc_init_array+0x44>)
 80013a0:	f000 fdee 	bl	8001f80 <_init>
 80013a4:	1b64      	subs	r4, r4, r5
 80013a6:	10a4      	asrs	r4, r4, #2
 80013a8:	2600      	movs	r6, #0
 80013aa:	42a6      	cmp	r6, r4
 80013ac:	d105      	bne.n	80013ba <__libc_init_array+0x2e>
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
 80013b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b4:	4798      	blx	r3
 80013b6:	3601      	adds	r6, #1
 80013b8:	e7ee      	b.n	8001398 <__libc_init_array+0xc>
 80013ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80013be:	4798      	blx	r3
 80013c0:	3601      	adds	r6, #1
 80013c2:	e7f2      	b.n	80013aa <__libc_init_array+0x1e>
 80013c4:	08001fe4 	.word	0x08001fe4
 80013c8:	08001fe4 	.word	0x08001fe4
 80013cc:	08001fe4 	.word	0x08001fe4
 80013d0:	08001fe8 	.word	0x08001fe8

080013d4 <__retarget_lock_init_recursive>:
 80013d4:	4770      	bx	lr

080013d6 <__retarget_lock_acquire_recursive>:
 80013d6:	4770      	bx	lr

080013d8 <__retarget_lock_release_recursive>:
 80013d8:	4770      	bx	lr
	...

080013dc <_free_r>:
 80013dc:	b538      	push	{r3, r4, r5, lr}
 80013de:	4605      	mov	r5, r0
 80013e0:	2900      	cmp	r1, #0
 80013e2:	d041      	beq.n	8001468 <_free_r+0x8c>
 80013e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013e8:	1f0c      	subs	r4, r1, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bfb8      	it	lt
 80013ee:	18e4      	addlt	r4, r4, r3
 80013f0:	f000 f8e0 	bl	80015b4 <__malloc_lock>
 80013f4:	4a1d      	ldr	r2, [pc, #116]	@ (800146c <_free_r+0x90>)
 80013f6:	6813      	ldr	r3, [r2, #0]
 80013f8:	b933      	cbnz	r3, 8001408 <_free_r+0x2c>
 80013fa:	6063      	str	r3, [r4, #4]
 80013fc:	6014      	str	r4, [r2, #0]
 80013fe:	4628      	mov	r0, r5
 8001400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001404:	f000 b8dc 	b.w	80015c0 <__malloc_unlock>
 8001408:	42a3      	cmp	r3, r4
 800140a:	d908      	bls.n	800141e <_free_r+0x42>
 800140c:	6820      	ldr	r0, [r4, #0]
 800140e:	1821      	adds	r1, r4, r0
 8001410:	428b      	cmp	r3, r1
 8001412:	bf01      	itttt	eq
 8001414:	6819      	ldreq	r1, [r3, #0]
 8001416:	685b      	ldreq	r3, [r3, #4]
 8001418:	1809      	addeq	r1, r1, r0
 800141a:	6021      	streq	r1, [r4, #0]
 800141c:	e7ed      	b.n	80013fa <_free_r+0x1e>
 800141e:	461a      	mov	r2, r3
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	b10b      	cbz	r3, 8001428 <_free_r+0x4c>
 8001424:	42a3      	cmp	r3, r4
 8001426:	d9fa      	bls.n	800141e <_free_r+0x42>
 8001428:	6811      	ldr	r1, [r2, #0]
 800142a:	1850      	adds	r0, r2, r1
 800142c:	42a0      	cmp	r0, r4
 800142e:	d10b      	bne.n	8001448 <_free_r+0x6c>
 8001430:	6820      	ldr	r0, [r4, #0]
 8001432:	4401      	add	r1, r0
 8001434:	1850      	adds	r0, r2, r1
 8001436:	4283      	cmp	r3, r0
 8001438:	6011      	str	r1, [r2, #0]
 800143a:	d1e0      	bne.n	80013fe <_free_r+0x22>
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	6053      	str	r3, [r2, #4]
 8001442:	4408      	add	r0, r1
 8001444:	6010      	str	r0, [r2, #0]
 8001446:	e7da      	b.n	80013fe <_free_r+0x22>
 8001448:	d902      	bls.n	8001450 <_free_r+0x74>
 800144a:	230c      	movs	r3, #12
 800144c:	602b      	str	r3, [r5, #0]
 800144e:	e7d6      	b.n	80013fe <_free_r+0x22>
 8001450:	6820      	ldr	r0, [r4, #0]
 8001452:	1821      	adds	r1, r4, r0
 8001454:	428b      	cmp	r3, r1
 8001456:	bf04      	itt	eq
 8001458:	6819      	ldreq	r1, [r3, #0]
 800145a:	685b      	ldreq	r3, [r3, #4]
 800145c:	6063      	str	r3, [r4, #4]
 800145e:	bf04      	itt	eq
 8001460:	1809      	addeq	r1, r1, r0
 8001462:	6021      	streq	r1, [r4, #0]
 8001464:	6054      	str	r4, [r2, #4]
 8001466:	e7ca      	b.n	80013fe <_free_r+0x22>
 8001468:	bd38      	pop	{r3, r4, r5, pc}
 800146a:	bf00      	nop
 800146c:	200003dc 	.word	0x200003dc

08001470 <sbrk_aligned>:
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	4e0f      	ldr	r6, [pc, #60]	@ (80014b0 <sbrk_aligned+0x40>)
 8001474:	460c      	mov	r4, r1
 8001476:	6831      	ldr	r1, [r6, #0]
 8001478:	4605      	mov	r5, r0
 800147a:	b911      	cbnz	r1, 8001482 <sbrk_aligned+0x12>
 800147c:	f000 fcae 	bl	8001ddc <_sbrk_r>
 8001480:	6030      	str	r0, [r6, #0]
 8001482:	4621      	mov	r1, r4
 8001484:	4628      	mov	r0, r5
 8001486:	f000 fca9 	bl	8001ddc <_sbrk_r>
 800148a:	1c43      	adds	r3, r0, #1
 800148c:	d103      	bne.n	8001496 <sbrk_aligned+0x26>
 800148e:	f04f 34ff 	mov.w	r4, #4294967295
 8001492:	4620      	mov	r0, r4
 8001494:	bd70      	pop	{r4, r5, r6, pc}
 8001496:	1cc4      	adds	r4, r0, #3
 8001498:	f024 0403 	bic.w	r4, r4, #3
 800149c:	42a0      	cmp	r0, r4
 800149e:	d0f8      	beq.n	8001492 <sbrk_aligned+0x22>
 80014a0:	1a21      	subs	r1, r4, r0
 80014a2:	4628      	mov	r0, r5
 80014a4:	f000 fc9a 	bl	8001ddc <_sbrk_r>
 80014a8:	3001      	adds	r0, #1
 80014aa:	d1f2      	bne.n	8001492 <sbrk_aligned+0x22>
 80014ac:	e7ef      	b.n	800148e <sbrk_aligned+0x1e>
 80014ae:	bf00      	nop
 80014b0:	200003d8 	.word	0x200003d8

080014b4 <_malloc_r>:
 80014b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014b8:	1ccd      	adds	r5, r1, #3
 80014ba:	f025 0503 	bic.w	r5, r5, #3
 80014be:	3508      	adds	r5, #8
 80014c0:	2d0c      	cmp	r5, #12
 80014c2:	bf38      	it	cc
 80014c4:	250c      	movcc	r5, #12
 80014c6:	2d00      	cmp	r5, #0
 80014c8:	4606      	mov	r6, r0
 80014ca:	db01      	blt.n	80014d0 <_malloc_r+0x1c>
 80014cc:	42a9      	cmp	r1, r5
 80014ce:	d904      	bls.n	80014da <_malloc_r+0x26>
 80014d0:	230c      	movs	r3, #12
 80014d2:	6033      	str	r3, [r6, #0]
 80014d4:	2000      	movs	r0, #0
 80014d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80015b0 <_malloc_r+0xfc>
 80014de:	f000 f869 	bl	80015b4 <__malloc_lock>
 80014e2:	f8d8 3000 	ldr.w	r3, [r8]
 80014e6:	461c      	mov	r4, r3
 80014e8:	bb44      	cbnz	r4, 800153c <_malloc_r+0x88>
 80014ea:	4629      	mov	r1, r5
 80014ec:	4630      	mov	r0, r6
 80014ee:	f7ff ffbf 	bl	8001470 <sbrk_aligned>
 80014f2:	1c43      	adds	r3, r0, #1
 80014f4:	4604      	mov	r4, r0
 80014f6:	d158      	bne.n	80015aa <_malloc_r+0xf6>
 80014f8:	f8d8 4000 	ldr.w	r4, [r8]
 80014fc:	4627      	mov	r7, r4
 80014fe:	2f00      	cmp	r7, #0
 8001500:	d143      	bne.n	800158a <_malloc_r+0xd6>
 8001502:	2c00      	cmp	r4, #0
 8001504:	d04b      	beq.n	800159e <_malloc_r+0xea>
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	4639      	mov	r1, r7
 800150a:	4630      	mov	r0, r6
 800150c:	eb04 0903 	add.w	r9, r4, r3
 8001510:	f000 fc64 	bl	8001ddc <_sbrk_r>
 8001514:	4581      	cmp	r9, r0
 8001516:	d142      	bne.n	800159e <_malloc_r+0xea>
 8001518:	6821      	ldr	r1, [r4, #0]
 800151a:	1a6d      	subs	r5, r5, r1
 800151c:	4629      	mov	r1, r5
 800151e:	4630      	mov	r0, r6
 8001520:	f7ff ffa6 	bl	8001470 <sbrk_aligned>
 8001524:	3001      	adds	r0, #1
 8001526:	d03a      	beq.n	800159e <_malloc_r+0xea>
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	442b      	add	r3, r5
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	f8d8 3000 	ldr.w	r3, [r8]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	bb62      	cbnz	r2, 8001590 <_malloc_r+0xdc>
 8001536:	f8c8 7000 	str.w	r7, [r8]
 800153a:	e00f      	b.n	800155c <_malloc_r+0xa8>
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	1b52      	subs	r2, r2, r5
 8001540:	d420      	bmi.n	8001584 <_malloc_r+0xd0>
 8001542:	2a0b      	cmp	r2, #11
 8001544:	d917      	bls.n	8001576 <_malloc_r+0xc2>
 8001546:	1961      	adds	r1, r4, r5
 8001548:	42a3      	cmp	r3, r4
 800154a:	6025      	str	r5, [r4, #0]
 800154c:	bf18      	it	ne
 800154e:	6059      	strne	r1, [r3, #4]
 8001550:	6863      	ldr	r3, [r4, #4]
 8001552:	bf08      	it	eq
 8001554:	f8c8 1000 	streq.w	r1, [r8]
 8001558:	5162      	str	r2, [r4, r5]
 800155a:	604b      	str	r3, [r1, #4]
 800155c:	4630      	mov	r0, r6
 800155e:	f000 f82f 	bl	80015c0 <__malloc_unlock>
 8001562:	f104 000b 	add.w	r0, r4, #11
 8001566:	1d23      	adds	r3, r4, #4
 8001568:	f020 0007 	bic.w	r0, r0, #7
 800156c:	1ac2      	subs	r2, r0, r3
 800156e:	bf1c      	itt	ne
 8001570:	1a1b      	subne	r3, r3, r0
 8001572:	50a3      	strne	r3, [r4, r2]
 8001574:	e7af      	b.n	80014d6 <_malloc_r+0x22>
 8001576:	6862      	ldr	r2, [r4, #4]
 8001578:	42a3      	cmp	r3, r4
 800157a:	bf0c      	ite	eq
 800157c:	f8c8 2000 	streq.w	r2, [r8]
 8001580:	605a      	strne	r2, [r3, #4]
 8001582:	e7eb      	b.n	800155c <_malloc_r+0xa8>
 8001584:	4623      	mov	r3, r4
 8001586:	6864      	ldr	r4, [r4, #4]
 8001588:	e7ae      	b.n	80014e8 <_malloc_r+0x34>
 800158a:	463c      	mov	r4, r7
 800158c:	687f      	ldr	r7, [r7, #4]
 800158e:	e7b6      	b.n	80014fe <_malloc_r+0x4a>
 8001590:	461a      	mov	r2, r3
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	42a3      	cmp	r3, r4
 8001596:	d1fb      	bne.n	8001590 <_malloc_r+0xdc>
 8001598:	2300      	movs	r3, #0
 800159a:	6053      	str	r3, [r2, #4]
 800159c:	e7de      	b.n	800155c <_malloc_r+0xa8>
 800159e:	230c      	movs	r3, #12
 80015a0:	6033      	str	r3, [r6, #0]
 80015a2:	4630      	mov	r0, r6
 80015a4:	f000 f80c 	bl	80015c0 <__malloc_unlock>
 80015a8:	e794      	b.n	80014d4 <_malloc_r+0x20>
 80015aa:	6005      	str	r5, [r0, #0]
 80015ac:	e7d6      	b.n	800155c <_malloc_r+0xa8>
 80015ae:	bf00      	nop
 80015b0:	200003dc 	.word	0x200003dc

080015b4 <__malloc_lock>:
 80015b4:	4801      	ldr	r0, [pc, #4]	@ (80015bc <__malloc_lock+0x8>)
 80015b6:	f7ff bf0e 	b.w	80013d6 <__retarget_lock_acquire_recursive>
 80015ba:	bf00      	nop
 80015bc:	200003d4 	.word	0x200003d4

080015c0 <__malloc_unlock>:
 80015c0:	4801      	ldr	r0, [pc, #4]	@ (80015c8 <__malloc_unlock+0x8>)
 80015c2:	f7ff bf09 	b.w	80013d8 <__retarget_lock_release_recursive>
 80015c6:	bf00      	nop
 80015c8:	200003d4 	.word	0x200003d4

080015cc <__sfputc_r>:
 80015cc:	6893      	ldr	r3, [r2, #8]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	b410      	push	{r4}
 80015d4:	6093      	str	r3, [r2, #8]
 80015d6:	da07      	bge.n	80015e8 <__sfputc_r+0x1c>
 80015d8:	6994      	ldr	r4, [r2, #24]
 80015da:	42a3      	cmp	r3, r4
 80015dc:	db01      	blt.n	80015e2 <__sfputc_r+0x16>
 80015de:	290a      	cmp	r1, #10
 80015e0:	d102      	bne.n	80015e8 <__sfputc_r+0x1c>
 80015e2:	bc10      	pop	{r4}
 80015e4:	f000 bb66 	b.w	8001cb4 <__swbuf_r>
 80015e8:	6813      	ldr	r3, [r2, #0]
 80015ea:	1c58      	adds	r0, r3, #1
 80015ec:	6010      	str	r0, [r2, #0]
 80015ee:	7019      	strb	r1, [r3, #0]
 80015f0:	4608      	mov	r0, r1
 80015f2:	bc10      	pop	{r4}
 80015f4:	4770      	bx	lr

080015f6 <__sfputs_r>:
 80015f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f8:	4606      	mov	r6, r0
 80015fa:	460f      	mov	r7, r1
 80015fc:	4614      	mov	r4, r2
 80015fe:	18d5      	adds	r5, r2, r3
 8001600:	42ac      	cmp	r4, r5
 8001602:	d101      	bne.n	8001608 <__sfputs_r+0x12>
 8001604:	2000      	movs	r0, #0
 8001606:	e007      	b.n	8001618 <__sfputs_r+0x22>
 8001608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800160c:	463a      	mov	r2, r7
 800160e:	4630      	mov	r0, r6
 8001610:	f7ff ffdc 	bl	80015cc <__sfputc_r>
 8001614:	1c43      	adds	r3, r0, #1
 8001616:	d1f3      	bne.n	8001600 <__sfputs_r+0xa>
 8001618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800161c <_vfiprintf_r>:
 800161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001620:	460d      	mov	r5, r1
 8001622:	b09d      	sub	sp, #116	@ 0x74
 8001624:	4614      	mov	r4, r2
 8001626:	4698      	mov	r8, r3
 8001628:	4606      	mov	r6, r0
 800162a:	b118      	cbz	r0, 8001634 <_vfiprintf_r+0x18>
 800162c:	6a03      	ldr	r3, [r0, #32]
 800162e:	b90b      	cbnz	r3, 8001634 <_vfiprintf_r+0x18>
 8001630:	f7ff fdd2 	bl	80011d8 <__sinit>
 8001634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001636:	07d9      	lsls	r1, r3, #31
 8001638:	d405      	bmi.n	8001646 <_vfiprintf_r+0x2a>
 800163a:	89ab      	ldrh	r3, [r5, #12]
 800163c:	059a      	lsls	r2, r3, #22
 800163e:	d402      	bmi.n	8001646 <_vfiprintf_r+0x2a>
 8001640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001642:	f7ff fec8 	bl	80013d6 <__retarget_lock_acquire_recursive>
 8001646:	89ab      	ldrh	r3, [r5, #12]
 8001648:	071b      	lsls	r3, r3, #28
 800164a:	d501      	bpl.n	8001650 <_vfiprintf_r+0x34>
 800164c:	692b      	ldr	r3, [r5, #16]
 800164e:	b99b      	cbnz	r3, 8001678 <_vfiprintf_r+0x5c>
 8001650:	4629      	mov	r1, r5
 8001652:	4630      	mov	r0, r6
 8001654:	f000 fb6c 	bl	8001d30 <__swsetup_r>
 8001658:	b170      	cbz	r0, 8001678 <_vfiprintf_r+0x5c>
 800165a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800165c:	07dc      	lsls	r4, r3, #31
 800165e:	d504      	bpl.n	800166a <_vfiprintf_r+0x4e>
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	b01d      	add	sp, #116	@ 0x74
 8001666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800166a:	89ab      	ldrh	r3, [r5, #12]
 800166c:	0598      	lsls	r0, r3, #22
 800166e:	d4f7      	bmi.n	8001660 <_vfiprintf_r+0x44>
 8001670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001672:	f7ff feb1 	bl	80013d8 <__retarget_lock_release_recursive>
 8001676:	e7f3      	b.n	8001660 <_vfiprintf_r+0x44>
 8001678:	2300      	movs	r3, #0
 800167a:	9309      	str	r3, [sp, #36]	@ 0x24
 800167c:	2320      	movs	r3, #32
 800167e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001682:	f8cd 800c 	str.w	r8, [sp, #12]
 8001686:	2330      	movs	r3, #48	@ 0x30
 8001688:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001838 <_vfiprintf_r+0x21c>
 800168c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001690:	f04f 0901 	mov.w	r9, #1
 8001694:	4623      	mov	r3, r4
 8001696:	469a      	mov	sl, r3
 8001698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800169c:	b10a      	cbz	r2, 80016a2 <_vfiprintf_r+0x86>
 800169e:	2a25      	cmp	r2, #37	@ 0x25
 80016a0:	d1f9      	bne.n	8001696 <_vfiprintf_r+0x7a>
 80016a2:	ebba 0b04 	subs.w	fp, sl, r4
 80016a6:	d00b      	beq.n	80016c0 <_vfiprintf_r+0xa4>
 80016a8:	465b      	mov	r3, fp
 80016aa:	4622      	mov	r2, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	4630      	mov	r0, r6
 80016b0:	f7ff ffa1 	bl	80015f6 <__sfputs_r>
 80016b4:	3001      	adds	r0, #1
 80016b6:	f000 80a7 	beq.w	8001808 <_vfiprintf_r+0x1ec>
 80016ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80016bc:	445a      	add	r2, fp
 80016be:	9209      	str	r2, [sp, #36]	@ 0x24
 80016c0:	f89a 3000 	ldrb.w	r3, [sl]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 809f 	beq.w	8001808 <_vfiprintf_r+0x1ec>
 80016ca:	2300      	movs	r3, #0
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016d4:	f10a 0a01 	add.w	sl, sl, #1
 80016d8:	9304      	str	r3, [sp, #16]
 80016da:	9307      	str	r3, [sp, #28]
 80016dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80016e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80016e2:	4654      	mov	r4, sl
 80016e4:	2205      	movs	r2, #5
 80016e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016ea:	4853      	ldr	r0, [pc, #332]	@ (8001838 <_vfiprintf_r+0x21c>)
 80016ec:	f7fe fd78 	bl	80001e0 <memchr>
 80016f0:	9a04      	ldr	r2, [sp, #16]
 80016f2:	b9d8      	cbnz	r0, 800172c <_vfiprintf_r+0x110>
 80016f4:	06d1      	lsls	r1, r2, #27
 80016f6:	bf44      	itt	mi
 80016f8:	2320      	movmi	r3, #32
 80016fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80016fe:	0713      	lsls	r3, r2, #28
 8001700:	bf44      	itt	mi
 8001702:	232b      	movmi	r3, #43	@ 0x2b
 8001704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001708:	f89a 3000 	ldrb.w	r3, [sl]
 800170c:	2b2a      	cmp	r3, #42	@ 0x2a
 800170e:	d015      	beq.n	800173c <_vfiprintf_r+0x120>
 8001710:	9a07      	ldr	r2, [sp, #28]
 8001712:	4654      	mov	r4, sl
 8001714:	2000      	movs	r0, #0
 8001716:	f04f 0c0a 	mov.w	ip, #10
 800171a:	4621      	mov	r1, r4
 800171c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001720:	3b30      	subs	r3, #48	@ 0x30
 8001722:	2b09      	cmp	r3, #9
 8001724:	d94b      	bls.n	80017be <_vfiprintf_r+0x1a2>
 8001726:	b1b0      	cbz	r0, 8001756 <_vfiprintf_r+0x13a>
 8001728:	9207      	str	r2, [sp, #28]
 800172a:	e014      	b.n	8001756 <_vfiprintf_r+0x13a>
 800172c:	eba0 0308 	sub.w	r3, r0, r8
 8001730:	fa09 f303 	lsl.w	r3, r9, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	9304      	str	r3, [sp, #16]
 8001738:	46a2      	mov	sl, r4
 800173a:	e7d2      	b.n	80016e2 <_vfiprintf_r+0xc6>
 800173c:	9b03      	ldr	r3, [sp, #12]
 800173e:	1d19      	adds	r1, r3, #4
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	9103      	str	r1, [sp, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	bfbb      	ittet	lt
 8001748:	425b      	neglt	r3, r3
 800174a:	f042 0202 	orrlt.w	r2, r2, #2
 800174e:	9307      	strge	r3, [sp, #28]
 8001750:	9307      	strlt	r3, [sp, #28]
 8001752:	bfb8      	it	lt
 8001754:	9204      	strlt	r2, [sp, #16]
 8001756:	7823      	ldrb	r3, [r4, #0]
 8001758:	2b2e      	cmp	r3, #46	@ 0x2e
 800175a:	d10a      	bne.n	8001772 <_vfiprintf_r+0x156>
 800175c:	7863      	ldrb	r3, [r4, #1]
 800175e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001760:	d132      	bne.n	80017c8 <_vfiprintf_r+0x1ac>
 8001762:	9b03      	ldr	r3, [sp, #12]
 8001764:	1d1a      	adds	r2, r3, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	9203      	str	r2, [sp, #12]
 800176a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800176e:	3402      	adds	r4, #2
 8001770:	9305      	str	r3, [sp, #20]
 8001772:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800183c <_vfiprintf_r+0x220>
 8001776:	7821      	ldrb	r1, [r4, #0]
 8001778:	2203      	movs	r2, #3
 800177a:	4650      	mov	r0, sl
 800177c:	f7fe fd30 	bl	80001e0 <memchr>
 8001780:	b138      	cbz	r0, 8001792 <_vfiprintf_r+0x176>
 8001782:	9b04      	ldr	r3, [sp, #16]
 8001784:	eba0 000a 	sub.w	r0, r0, sl
 8001788:	2240      	movs	r2, #64	@ 0x40
 800178a:	4082      	lsls	r2, r0
 800178c:	4313      	orrs	r3, r2
 800178e:	3401      	adds	r4, #1
 8001790:	9304      	str	r3, [sp, #16]
 8001792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001796:	482a      	ldr	r0, [pc, #168]	@ (8001840 <_vfiprintf_r+0x224>)
 8001798:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800179c:	2206      	movs	r2, #6
 800179e:	f7fe fd1f 	bl	80001e0 <memchr>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d03f      	beq.n	8001826 <_vfiprintf_r+0x20a>
 80017a6:	4b27      	ldr	r3, [pc, #156]	@ (8001844 <_vfiprintf_r+0x228>)
 80017a8:	bb1b      	cbnz	r3, 80017f2 <_vfiprintf_r+0x1d6>
 80017aa:	9b03      	ldr	r3, [sp, #12]
 80017ac:	3307      	adds	r3, #7
 80017ae:	f023 0307 	bic.w	r3, r3, #7
 80017b2:	3308      	adds	r3, #8
 80017b4:	9303      	str	r3, [sp, #12]
 80017b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80017b8:	443b      	add	r3, r7
 80017ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80017bc:	e76a      	b.n	8001694 <_vfiprintf_r+0x78>
 80017be:	fb0c 3202 	mla	r2, ip, r2, r3
 80017c2:	460c      	mov	r4, r1
 80017c4:	2001      	movs	r0, #1
 80017c6:	e7a8      	b.n	800171a <_vfiprintf_r+0xfe>
 80017c8:	2300      	movs	r3, #0
 80017ca:	3401      	adds	r4, #1
 80017cc:	9305      	str	r3, [sp, #20]
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 0c0a 	mov.w	ip, #10
 80017d4:	4620      	mov	r0, r4
 80017d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017da:	3a30      	subs	r2, #48	@ 0x30
 80017dc:	2a09      	cmp	r2, #9
 80017de:	d903      	bls.n	80017e8 <_vfiprintf_r+0x1cc>
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0c6      	beq.n	8001772 <_vfiprintf_r+0x156>
 80017e4:	9105      	str	r1, [sp, #20]
 80017e6:	e7c4      	b.n	8001772 <_vfiprintf_r+0x156>
 80017e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80017ec:	4604      	mov	r4, r0
 80017ee:	2301      	movs	r3, #1
 80017f0:	e7f0      	b.n	80017d4 <_vfiprintf_r+0x1b8>
 80017f2:	ab03      	add	r3, sp, #12
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	462a      	mov	r2, r5
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <_vfiprintf_r+0x22c>)
 80017fa:	a904      	add	r1, sp, #16
 80017fc:	4630      	mov	r0, r6
 80017fe:	f3af 8000 	nop.w
 8001802:	4607      	mov	r7, r0
 8001804:	1c78      	adds	r0, r7, #1
 8001806:	d1d6      	bne.n	80017b6 <_vfiprintf_r+0x19a>
 8001808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800180a:	07d9      	lsls	r1, r3, #31
 800180c:	d405      	bmi.n	800181a <_vfiprintf_r+0x1fe>
 800180e:	89ab      	ldrh	r3, [r5, #12]
 8001810:	059a      	lsls	r2, r3, #22
 8001812:	d402      	bmi.n	800181a <_vfiprintf_r+0x1fe>
 8001814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001816:	f7ff fddf 	bl	80013d8 <__retarget_lock_release_recursive>
 800181a:	89ab      	ldrh	r3, [r5, #12]
 800181c:	065b      	lsls	r3, r3, #25
 800181e:	f53f af1f 	bmi.w	8001660 <_vfiprintf_r+0x44>
 8001822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001824:	e71e      	b.n	8001664 <_vfiprintf_r+0x48>
 8001826:	ab03      	add	r3, sp, #12
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	462a      	mov	r2, r5
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <_vfiprintf_r+0x22c>)
 800182e:	a904      	add	r1, sp, #16
 8001830:	4630      	mov	r0, r6
 8001832:	f000 f879 	bl	8001928 <_printf_i>
 8001836:	e7e4      	b.n	8001802 <_vfiprintf_r+0x1e6>
 8001838:	08001fa8 	.word	0x08001fa8
 800183c:	08001fae 	.word	0x08001fae
 8001840:	08001fb2 	.word	0x08001fb2
 8001844:	00000000 	.word	0x00000000
 8001848:	080015f7 	.word	0x080015f7

0800184c <_printf_common>:
 800184c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001850:	4616      	mov	r6, r2
 8001852:	4698      	mov	r8, r3
 8001854:	688a      	ldr	r2, [r1, #8]
 8001856:	690b      	ldr	r3, [r1, #16]
 8001858:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800185c:	4293      	cmp	r3, r2
 800185e:	bfb8      	it	lt
 8001860:	4613      	movlt	r3, r2
 8001862:	6033      	str	r3, [r6, #0]
 8001864:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001868:	4607      	mov	r7, r0
 800186a:	460c      	mov	r4, r1
 800186c:	b10a      	cbz	r2, 8001872 <_printf_common+0x26>
 800186e:	3301      	adds	r3, #1
 8001870:	6033      	str	r3, [r6, #0]
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	0699      	lsls	r1, r3, #26
 8001876:	bf42      	ittt	mi
 8001878:	6833      	ldrmi	r3, [r6, #0]
 800187a:	3302      	addmi	r3, #2
 800187c:	6033      	strmi	r3, [r6, #0]
 800187e:	6825      	ldr	r5, [r4, #0]
 8001880:	f015 0506 	ands.w	r5, r5, #6
 8001884:	d106      	bne.n	8001894 <_printf_common+0x48>
 8001886:	f104 0a19 	add.w	sl, r4, #25
 800188a:	68e3      	ldr	r3, [r4, #12]
 800188c:	6832      	ldr	r2, [r6, #0]
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	42ab      	cmp	r3, r5
 8001892:	dc26      	bgt.n	80018e2 <_printf_common+0x96>
 8001894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001898:	6822      	ldr	r2, [r4, #0]
 800189a:	3b00      	subs	r3, #0
 800189c:	bf18      	it	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	0692      	lsls	r2, r2, #26
 80018a2:	d42b      	bmi.n	80018fc <_printf_common+0xb0>
 80018a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80018a8:	4641      	mov	r1, r8
 80018aa:	4638      	mov	r0, r7
 80018ac:	47c8      	blx	r9
 80018ae:	3001      	adds	r0, #1
 80018b0:	d01e      	beq.n	80018f0 <_printf_common+0xa4>
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	6922      	ldr	r2, [r4, #16]
 80018b6:	f003 0306 	and.w	r3, r3, #6
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf02      	ittt	eq
 80018be:	68e5      	ldreq	r5, [r4, #12]
 80018c0:	6833      	ldreq	r3, [r6, #0]
 80018c2:	1aed      	subeq	r5, r5, r3
 80018c4:	68a3      	ldr	r3, [r4, #8]
 80018c6:	bf0c      	ite	eq
 80018c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018cc:	2500      	movne	r5, #0
 80018ce:	4293      	cmp	r3, r2
 80018d0:	bfc4      	itt	gt
 80018d2:	1a9b      	subgt	r3, r3, r2
 80018d4:	18ed      	addgt	r5, r5, r3
 80018d6:	2600      	movs	r6, #0
 80018d8:	341a      	adds	r4, #26
 80018da:	42b5      	cmp	r5, r6
 80018dc:	d11a      	bne.n	8001914 <_printf_common+0xc8>
 80018de:	2000      	movs	r0, #0
 80018e0:	e008      	b.n	80018f4 <_printf_common+0xa8>
 80018e2:	2301      	movs	r3, #1
 80018e4:	4652      	mov	r2, sl
 80018e6:	4641      	mov	r1, r8
 80018e8:	4638      	mov	r0, r7
 80018ea:	47c8      	blx	r9
 80018ec:	3001      	adds	r0, #1
 80018ee:	d103      	bne.n	80018f8 <_printf_common+0xac>
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018f8:	3501      	adds	r5, #1
 80018fa:	e7c6      	b.n	800188a <_printf_common+0x3e>
 80018fc:	18e1      	adds	r1, r4, r3
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	2030      	movs	r0, #48	@ 0x30
 8001902:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001906:	4422      	add	r2, r4
 8001908:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800190c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001910:	3302      	adds	r3, #2
 8001912:	e7c7      	b.n	80018a4 <_printf_common+0x58>
 8001914:	2301      	movs	r3, #1
 8001916:	4622      	mov	r2, r4
 8001918:	4641      	mov	r1, r8
 800191a:	4638      	mov	r0, r7
 800191c:	47c8      	blx	r9
 800191e:	3001      	adds	r0, #1
 8001920:	d0e6      	beq.n	80018f0 <_printf_common+0xa4>
 8001922:	3601      	adds	r6, #1
 8001924:	e7d9      	b.n	80018da <_printf_common+0x8e>
	...

08001928 <_printf_i>:
 8001928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800192c:	7e0f      	ldrb	r7, [r1, #24]
 800192e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001930:	2f78      	cmp	r7, #120	@ 0x78
 8001932:	4691      	mov	r9, r2
 8001934:	4680      	mov	r8, r0
 8001936:	460c      	mov	r4, r1
 8001938:	469a      	mov	sl, r3
 800193a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800193e:	d807      	bhi.n	8001950 <_printf_i+0x28>
 8001940:	2f62      	cmp	r7, #98	@ 0x62
 8001942:	d80a      	bhi.n	800195a <_printf_i+0x32>
 8001944:	2f00      	cmp	r7, #0
 8001946:	f000 80d1 	beq.w	8001aec <_printf_i+0x1c4>
 800194a:	2f58      	cmp	r7, #88	@ 0x58
 800194c:	f000 80b8 	beq.w	8001ac0 <_printf_i+0x198>
 8001950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001954:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001958:	e03a      	b.n	80019d0 <_printf_i+0xa8>
 800195a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800195e:	2b15      	cmp	r3, #21
 8001960:	d8f6      	bhi.n	8001950 <_printf_i+0x28>
 8001962:	a101      	add	r1, pc, #4	@ (adr r1, 8001968 <_printf_i+0x40>)
 8001964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001968:	080019c1 	.word	0x080019c1
 800196c:	080019d5 	.word	0x080019d5
 8001970:	08001951 	.word	0x08001951
 8001974:	08001951 	.word	0x08001951
 8001978:	08001951 	.word	0x08001951
 800197c:	08001951 	.word	0x08001951
 8001980:	080019d5 	.word	0x080019d5
 8001984:	08001951 	.word	0x08001951
 8001988:	08001951 	.word	0x08001951
 800198c:	08001951 	.word	0x08001951
 8001990:	08001951 	.word	0x08001951
 8001994:	08001ad3 	.word	0x08001ad3
 8001998:	080019ff 	.word	0x080019ff
 800199c:	08001a8d 	.word	0x08001a8d
 80019a0:	08001951 	.word	0x08001951
 80019a4:	08001951 	.word	0x08001951
 80019a8:	08001af5 	.word	0x08001af5
 80019ac:	08001951 	.word	0x08001951
 80019b0:	080019ff 	.word	0x080019ff
 80019b4:	08001951 	.word	0x08001951
 80019b8:	08001951 	.word	0x08001951
 80019bc:	08001a95 	.word	0x08001a95
 80019c0:	6833      	ldr	r3, [r6, #0]
 80019c2:	1d1a      	adds	r2, r3, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6032      	str	r2, [r6, #0]
 80019c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80019cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80019d0:	2301      	movs	r3, #1
 80019d2:	e09c      	b.n	8001b0e <_printf_i+0x1e6>
 80019d4:	6833      	ldr	r3, [r6, #0]
 80019d6:	6820      	ldr	r0, [r4, #0]
 80019d8:	1d19      	adds	r1, r3, #4
 80019da:	6031      	str	r1, [r6, #0]
 80019dc:	0606      	lsls	r6, r0, #24
 80019de:	d501      	bpl.n	80019e4 <_printf_i+0xbc>
 80019e0:	681d      	ldr	r5, [r3, #0]
 80019e2:	e003      	b.n	80019ec <_printf_i+0xc4>
 80019e4:	0645      	lsls	r5, r0, #25
 80019e6:	d5fb      	bpl.n	80019e0 <_printf_i+0xb8>
 80019e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80019ec:	2d00      	cmp	r5, #0
 80019ee:	da03      	bge.n	80019f8 <_printf_i+0xd0>
 80019f0:	232d      	movs	r3, #45	@ 0x2d
 80019f2:	426d      	negs	r5, r5
 80019f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019f8:	4858      	ldr	r0, [pc, #352]	@ (8001b5c <_printf_i+0x234>)
 80019fa:	230a      	movs	r3, #10
 80019fc:	e011      	b.n	8001a22 <_printf_i+0xfa>
 80019fe:	6821      	ldr	r1, [r4, #0]
 8001a00:	6833      	ldr	r3, [r6, #0]
 8001a02:	0608      	lsls	r0, r1, #24
 8001a04:	f853 5b04 	ldr.w	r5, [r3], #4
 8001a08:	d402      	bmi.n	8001a10 <_printf_i+0xe8>
 8001a0a:	0649      	lsls	r1, r1, #25
 8001a0c:	bf48      	it	mi
 8001a0e:	b2ad      	uxthmi	r5, r5
 8001a10:	2f6f      	cmp	r7, #111	@ 0x6f
 8001a12:	4852      	ldr	r0, [pc, #328]	@ (8001b5c <_printf_i+0x234>)
 8001a14:	6033      	str	r3, [r6, #0]
 8001a16:	bf14      	ite	ne
 8001a18:	230a      	movne	r3, #10
 8001a1a:	2308      	moveq	r3, #8
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001a22:	6866      	ldr	r6, [r4, #4]
 8001a24:	60a6      	str	r6, [r4, #8]
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	db05      	blt.n	8001a36 <_printf_i+0x10e>
 8001a2a:	6821      	ldr	r1, [r4, #0]
 8001a2c:	432e      	orrs	r6, r5
 8001a2e:	f021 0104 	bic.w	r1, r1, #4
 8001a32:	6021      	str	r1, [r4, #0]
 8001a34:	d04b      	beq.n	8001ace <_printf_i+0x1a6>
 8001a36:	4616      	mov	r6, r2
 8001a38:	fbb5 f1f3 	udiv	r1, r5, r3
 8001a3c:	fb03 5711 	mls	r7, r3, r1, r5
 8001a40:	5dc7      	ldrb	r7, [r0, r7]
 8001a42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001a46:	462f      	mov	r7, r5
 8001a48:	42bb      	cmp	r3, r7
 8001a4a:	460d      	mov	r5, r1
 8001a4c:	d9f4      	bls.n	8001a38 <_printf_i+0x110>
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d10b      	bne.n	8001a6a <_printf_i+0x142>
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	07df      	lsls	r7, r3, #31
 8001a56:	d508      	bpl.n	8001a6a <_printf_i+0x142>
 8001a58:	6923      	ldr	r3, [r4, #16]
 8001a5a:	6861      	ldr	r1, [r4, #4]
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	bfde      	ittt	le
 8001a60:	2330      	movle	r3, #48	@ 0x30
 8001a62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001a66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001a6a:	1b92      	subs	r2, r2, r6
 8001a6c:	6122      	str	r2, [r4, #16]
 8001a6e:	f8cd a000 	str.w	sl, [sp]
 8001a72:	464b      	mov	r3, r9
 8001a74:	aa03      	add	r2, sp, #12
 8001a76:	4621      	mov	r1, r4
 8001a78:	4640      	mov	r0, r8
 8001a7a:	f7ff fee7 	bl	800184c <_printf_common>
 8001a7e:	3001      	adds	r0, #1
 8001a80:	d14a      	bne.n	8001b18 <_printf_i+0x1f0>
 8001a82:	f04f 30ff 	mov.w	r0, #4294967295
 8001a86:	b004      	add	sp, #16
 8001a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f043 0320 	orr.w	r3, r3, #32
 8001a92:	6023      	str	r3, [r4, #0]
 8001a94:	4832      	ldr	r0, [pc, #200]	@ (8001b60 <_printf_i+0x238>)
 8001a96:	2778      	movs	r7, #120	@ 0x78
 8001a98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	6831      	ldr	r1, [r6, #0]
 8001aa0:	061f      	lsls	r7, r3, #24
 8001aa2:	f851 5b04 	ldr.w	r5, [r1], #4
 8001aa6:	d402      	bmi.n	8001aae <_printf_i+0x186>
 8001aa8:	065f      	lsls	r7, r3, #25
 8001aaa:	bf48      	it	mi
 8001aac:	b2ad      	uxthmi	r5, r5
 8001aae:	6031      	str	r1, [r6, #0]
 8001ab0:	07d9      	lsls	r1, r3, #31
 8001ab2:	bf44      	itt	mi
 8001ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8001ab8:	6023      	strmi	r3, [r4, #0]
 8001aba:	b11d      	cbz	r5, 8001ac4 <_printf_i+0x19c>
 8001abc:	2310      	movs	r3, #16
 8001abe:	e7ad      	b.n	8001a1c <_printf_i+0xf4>
 8001ac0:	4826      	ldr	r0, [pc, #152]	@ (8001b5c <_printf_i+0x234>)
 8001ac2:	e7e9      	b.n	8001a98 <_printf_i+0x170>
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	f023 0320 	bic.w	r3, r3, #32
 8001aca:	6023      	str	r3, [r4, #0]
 8001acc:	e7f6      	b.n	8001abc <_printf_i+0x194>
 8001ace:	4616      	mov	r6, r2
 8001ad0:	e7bd      	b.n	8001a4e <_printf_i+0x126>
 8001ad2:	6833      	ldr	r3, [r6, #0]
 8001ad4:	6825      	ldr	r5, [r4, #0]
 8001ad6:	6961      	ldr	r1, [r4, #20]
 8001ad8:	1d18      	adds	r0, r3, #4
 8001ada:	6030      	str	r0, [r6, #0]
 8001adc:	062e      	lsls	r6, r5, #24
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	d501      	bpl.n	8001ae6 <_printf_i+0x1be>
 8001ae2:	6019      	str	r1, [r3, #0]
 8001ae4:	e002      	b.n	8001aec <_printf_i+0x1c4>
 8001ae6:	0668      	lsls	r0, r5, #25
 8001ae8:	d5fb      	bpl.n	8001ae2 <_printf_i+0x1ba>
 8001aea:	8019      	strh	r1, [r3, #0]
 8001aec:	2300      	movs	r3, #0
 8001aee:	6123      	str	r3, [r4, #16]
 8001af0:	4616      	mov	r6, r2
 8001af2:	e7bc      	b.n	8001a6e <_printf_i+0x146>
 8001af4:	6833      	ldr	r3, [r6, #0]
 8001af6:	1d1a      	adds	r2, r3, #4
 8001af8:	6032      	str	r2, [r6, #0]
 8001afa:	681e      	ldr	r6, [r3, #0]
 8001afc:	6862      	ldr	r2, [r4, #4]
 8001afe:	2100      	movs	r1, #0
 8001b00:	4630      	mov	r0, r6
 8001b02:	f7fe fb6d 	bl	80001e0 <memchr>
 8001b06:	b108      	cbz	r0, 8001b0c <_printf_i+0x1e4>
 8001b08:	1b80      	subs	r0, r0, r6
 8001b0a:	6060      	str	r0, [r4, #4]
 8001b0c:	6863      	ldr	r3, [r4, #4]
 8001b0e:	6123      	str	r3, [r4, #16]
 8001b10:	2300      	movs	r3, #0
 8001b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b16:	e7aa      	b.n	8001a6e <_printf_i+0x146>
 8001b18:	6923      	ldr	r3, [r4, #16]
 8001b1a:	4632      	mov	r2, r6
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	4640      	mov	r0, r8
 8001b20:	47d0      	blx	sl
 8001b22:	3001      	adds	r0, #1
 8001b24:	d0ad      	beq.n	8001a82 <_printf_i+0x15a>
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	079b      	lsls	r3, r3, #30
 8001b2a:	d413      	bmi.n	8001b54 <_printf_i+0x22c>
 8001b2c:	68e0      	ldr	r0, [r4, #12]
 8001b2e:	9b03      	ldr	r3, [sp, #12]
 8001b30:	4298      	cmp	r0, r3
 8001b32:	bfb8      	it	lt
 8001b34:	4618      	movlt	r0, r3
 8001b36:	e7a6      	b.n	8001a86 <_printf_i+0x15e>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	4632      	mov	r2, r6
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	4640      	mov	r0, r8
 8001b40:	47d0      	blx	sl
 8001b42:	3001      	adds	r0, #1
 8001b44:	d09d      	beq.n	8001a82 <_printf_i+0x15a>
 8001b46:	3501      	adds	r5, #1
 8001b48:	68e3      	ldr	r3, [r4, #12]
 8001b4a:	9903      	ldr	r1, [sp, #12]
 8001b4c:	1a5b      	subs	r3, r3, r1
 8001b4e:	42ab      	cmp	r3, r5
 8001b50:	dcf2      	bgt.n	8001b38 <_printf_i+0x210>
 8001b52:	e7eb      	b.n	8001b2c <_printf_i+0x204>
 8001b54:	2500      	movs	r5, #0
 8001b56:	f104 0619 	add.w	r6, r4, #25
 8001b5a:	e7f5      	b.n	8001b48 <_printf_i+0x220>
 8001b5c:	08001fb9 	.word	0x08001fb9
 8001b60:	08001fca 	.word	0x08001fca

08001b64 <__sflush_r>:
 8001b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6a:	0716      	lsls	r6, r2, #28
 8001b6c:	4605      	mov	r5, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	d454      	bmi.n	8001c1c <__sflush_r+0xb8>
 8001b72:	684b      	ldr	r3, [r1, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	dc02      	bgt.n	8001b7e <__sflush_r+0x1a>
 8001b78:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	dd48      	ble.n	8001c10 <__sflush_r+0xac>
 8001b7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b80:	2e00      	cmp	r6, #0
 8001b82:	d045      	beq.n	8001c10 <__sflush_r+0xac>
 8001b84:	2300      	movs	r3, #0
 8001b86:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001b8a:	682f      	ldr	r7, [r5, #0]
 8001b8c:	6a21      	ldr	r1, [r4, #32]
 8001b8e:	602b      	str	r3, [r5, #0]
 8001b90:	d030      	beq.n	8001bf4 <__sflush_r+0x90>
 8001b92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001b94:	89a3      	ldrh	r3, [r4, #12]
 8001b96:	0759      	lsls	r1, r3, #29
 8001b98:	d505      	bpl.n	8001ba6 <__sflush_r+0x42>
 8001b9a:	6863      	ldr	r3, [r4, #4]
 8001b9c:	1ad2      	subs	r2, r2, r3
 8001b9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ba0:	b10b      	cbz	r3, 8001ba6 <__sflush_r+0x42>
 8001ba2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ba4:	1ad2      	subs	r2, r2, r3
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001baa:	6a21      	ldr	r1, [r4, #32]
 8001bac:	4628      	mov	r0, r5
 8001bae:	47b0      	blx	r6
 8001bb0:	1c43      	adds	r3, r0, #1
 8001bb2:	89a3      	ldrh	r3, [r4, #12]
 8001bb4:	d106      	bne.n	8001bc4 <__sflush_r+0x60>
 8001bb6:	6829      	ldr	r1, [r5, #0]
 8001bb8:	291d      	cmp	r1, #29
 8001bba:	d82b      	bhi.n	8001c14 <__sflush_r+0xb0>
 8001bbc:	4a28      	ldr	r2, [pc, #160]	@ (8001c60 <__sflush_r+0xfc>)
 8001bbe:	40ca      	lsrs	r2, r1
 8001bc0:	07d6      	lsls	r6, r2, #31
 8001bc2:	d527      	bpl.n	8001c14 <__sflush_r+0xb0>
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	6062      	str	r2, [r4, #4]
 8001bc8:	04d9      	lsls	r1, r3, #19
 8001bca:	6922      	ldr	r2, [r4, #16]
 8001bcc:	6022      	str	r2, [r4, #0]
 8001bce:	d504      	bpl.n	8001bda <__sflush_r+0x76>
 8001bd0:	1c42      	adds	r2, r0, #1
 8001bd2:	d101      	bne.n	8001bd8 <__sflush_r+0x74>
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	b903      	cbnz	r3, 8001bda <__sflush_r+0x76>
 8001bd8:	6560      	str	r0, [r4, #84]	@ 0x54
 8001bda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001bdc:	602f      	str	r7, [r5, #0]
 8001bde:	b1b9      	cbz	r1, 8001c10 <__sflush_r+0xac>
 8001be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001be4:	4299      	cmp	r1, r3
 8001be6:	d002      	beq.n	8001bee <__sflush_r+0x8a>
 8001be8:	4628      	mov	r0, r5
 8001bea:	f7ff fbf7 	bl	80013dc <_free_r>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001bf2:	e00d      	b.n	8001c10 <__sflush_r+0xac>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	47b0      	blx	r6
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	1c50      	adds	r0, r2, #1
 8001bfe:	d1c9      	bne.n	8001b94 <__sflush_r+0x30>
 8001c00:	682b      	ldr	r3, [r5, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0c6      	beq.n	8001b94 <__sflush_r+0x30>
 8001c06:	2b1d      	cmp	r3, #29
 8001c08:	d001      	beq.n	8001c0e <__sflush_r+0xaa>
 8001c0a:	2b16      	cmp	r3, #22
 8001c0c:	d11d      	bne.n	8001c4a <__sflush_r+0xe6>
 8001c0e:	602f      	str	r7, [r5, #0]
 8001c10:	2000      	movs	r0, #0
 8001c12:	e021      	b.n	8001c58 <__sflush_r+0xf4>
 8001c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	e01a      	b.n	8001c52 <__sflush_r+0xee>
 8001c1c:	690f      	ldr	r7, [r1, #16]
 8001c1e:	2f00      	cmp	r7, #0
 8001c20:	d0f6      	beq.n	8001c10 <__sflush_r+0xac>
 8001c22:	0793      	lsls	r3, r2, #30
 8001c24:	680e      	ldr	r6, [r1, #0]
 8001c26:	bf08      	it	eq
 8001c28:	694b      	ldreq	r3, [r1, #20]
 8001c2a:	600f      	str	r7, [r1, #0]
 8001c2c:	bf18      	it	ne
 8001c2e:	2300      	movne	r3, #0
 8001c30:	1bf6      	subs	r6, r6, r7
 8001c32:	608b      	str	r3, [r1, #8]
 8001c34:	2e00      	cmp	r6, #0
 8001c36:	ddeb      	ble.n	8001c10 <__sflush_r+0xac>
 8001c38:	6a21      	ldr	r1, [r4, #32]
 8001c3a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001c3e:	4633      	mov	r3, r6
 8001c40:	463a      	mov	r2, r7
 8001c42:	4628      	mov	r0, r5
 8001c44:	47e0      	blx	ip
 8001c46:	2800      	cmp	r0, #0
 8001c48:	dc07      	bgt.n	8001c5a <__sflush_r+0xf6>
 8001c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c52:	81a3      	strh	r3, [r4, #12]
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c5a:	4407      	add	r7, r0
 8001c5c:	1a36      	subs	r6, r6, r0
 8001c5e:	e7e9      	b.n	8001c34 <__sflush_r+0xd0>
 8001c60:	20400001 	.word	0x20400001

08001c64 <_fflush_r>:
 8001c64:	b538      	push	{r3, r4, r5, lr}
 8001c66:	690b      	ldr	r3, [r1, #16]
 8001c68:	4605      	mov	r5, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	b913      	cbnz	r3, 8001c74 <_fflush_r+0x10>
 8001c6e:	2500      	movs	r5, #0
 8001c70:	4628      	mov	r0, r5
 8001c72:	bd38      	pop	{r3, r4, r5, pc}
 8001c74:	b118      	cbz	r0, 8001c7e <_fflush_r+0x1a>
 8001c76:	6a03      	ldr	r3, [r0, #32]
 8001c78:	b90b      	cbnz	r3, 8001c7e <_fflush_r+0x1a>
 8001c7a:	f7ff faad 	bl	80011d8 <__sinit>
 8001c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f3      	beq.n	8001c6e <_fflush_r+0xa>
 8001c86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c88:	07d0      	lsls	r0, r2, #31
 8001c8a:	d404      	bmi.n	8001c96 <_fflush_r+0x32>
 8001c8c:	0599      	lsls	r1, r3, #22
 8001c8e:	d402      	bmi.n	8001c96 <_fflush_r+0x32>
 8001c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c92:	f7ff fba0 	bl	80013d6 <__retarget_lock_acquire_recursive>
 8001c96:	4628      	mov	r0, r5
 8001c98:	4621      	mov	r1, r4
 8001c9a:	f7ff ff63 	bl	8001b64 <__sflush_r>
 8001c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ca0:	07da      	lsls	r2, r3, #31
 8001ca2:	4605      	mov	r5, r0
 8001ca4:	d4e4      	bmi.n	8001c70 <_fflush_r+0xc>
 8001ca6:	89a3      	ldrh	r3, [r4, #12]
 8001ca8:	059b      	lsls	r3, r3, #22
 8001caa:	d4e1      	bmi.n	8001c70 <_fflush_r+0xc>
 8001cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cae:	f7ff fb93 	bl	80013d8 <__retarget_lock_release_recursive>
 8001cb2:	e7dd      	b.n	8001c70 <_fflush_r+0xc>

08001cb4 <__swbuf_r>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	460e      	mov	r6, r1
 8001cb8:	4614      	mov	r4, r2
 8001cba:	4605      	mov	r5, r0
 8001cbc:	b118      	cbz	r0, 8001cc6 <__swbuf_r+0x12>
 8001cbe:	6a03      	ldr	r3, [r0, #32]
 8001cc0:	b90b      	cbnz	r3, 8001cc6 <__swbuf_r+0x12>
 8001cc2:	f7ff fa89 	bl	80011d8 <__sinit>
 8001cc6:	69a3      	ldr	r3, [r4, #24]
 8001cc8:	60a3      	str	r3, [r4, #8]
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	071a      	lsls	r2, r3, #28
 8001cce:	d501      	bpl.n	8001cd4 <__swbuf_r+0x20>
 8001cd0:	6923      	ldr	r3, [r4, #16]
 8001cd2:	b943      	cbnz	r3, 8001ce6 <__swbuf_r+0x32>
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	f000 f82a 	bl	8001d30 <__swsetup_r>
 8001cdc:	b118      	cbz	r0, 8001ce6 <__swbuf_r+0x32>
 8001cde:	f04f 37ff 	mov.w	r7, #4294967295
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	6922      	ldr	r2, [r4, #16]
 8001cea:	1a98      	subs	r0, r3, r2
 8001cec:	6963      	ldr	r3, [r4, #20]
 8001cee:	b2f6      	uxtb	r6, r6
 8001cf0:	4283      	cmp	r3, r0
 8001cf2:	4637      	mov	r7, r6
 8001cf4:	dc05      	bgt.n	8001d02 <__swbuf_r+0x4e>
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f7ff ffb3 	bl	8001c64 <_fflush_r>
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	d1ed      	bne.n	8001cde <__swbuf_r+0x2a>
 8001d02:	68a3      	ldr	r3, [r4, #8]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	60a3      	str	r3, [r4, #8]
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	6022      	str	r2, [r4, #0]
 8001d0e:	701e      	strb	r6, [r3, #0]
 8001d10:	6962      	ldr	r2, [r4, #20]
 8001d12:	1c43      	adds	r3, r0, #1
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d004      	beq.n	8001d22 <__swbuf_r+0x6e>
 8001d18:	89a3      	ldrh	r3, [r4, #12]
 8001d1a:	07db      	lsls	r3, r3, #31
 8001d1c:	d5e1      	bpl.n	8001ce2 <__swbuf_r+0x2e>
 8001d1e:	2e0a      	cmp	r6, #10
 8001d20:	d1df      	bne.n	8001ce2 <__swbuf_r+0x2e>
 8001d22:	4621      	mov	r1, r4
 8001d24:	4628      	mov	r0, r5
 8001d26:	f7ff ff9d 	bl	8001c64 <_fflush_r>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d0d9      	beq.n	8001ce2 <__swbuf_r+0x2e>
 8001d2e:	e7d6      	b.n	8001cde <__swbuf_r+0x2a>

08001d30 <__swsetup_r>:
 8001d30:	b538      	push	{r3, r4, r5, lr}
 8001d32:	4b29      	ldr	r3, [pc, #164]	@ (8001dd8 <__swsetup_r+0xa8>)
 8001d34:	4605      	mov	r5, r0
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	460c      	mov	r4, r1
 8001d3a:	b118      	cbz	r0, 8001d44 <__swsetup_r+0x14>
 8001d3c:	6a03      	ldr	r3, [r0, #32]
 8001d3e:	b90b      	cbnz	r3, 8001d44 <__swsetup_r+0x14>
 8001d40:	f7ff fa4a 	bl	80011d8 <__sinit>
 8001d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d48:	0719      	lsls	r1, r3, #28
 8001d4a:	d422      	bmi.n	8001d92 <__swsetup_r+0x62>
 8001d4c:	06da      	lsls	r2, r3, #27
 8001d4e:	d407      	bmi.n	8001d60 <__swsetup_r+0x30>
 8001d50:	2209      	movs	r2, #9
 8001d52:	602a      	str	r2, [r5, #0]
 8001d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d58:	81a3      	strh	r3, [r4, #12]
 8001d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5e:	e033      	b.n	8001dc8 <__swsetup_r+0x98>
 8001d60:	0758      	lsls	r0, r3, #29
 8001d62:	d512      	bpl.n	8001d8a <__swsetup_r+0x5a>
 8001d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d66:	b141      	cbz	r1, 8001d7a <__swsetup_r+0x4a>
 8001d68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d6c:	4299      	cmp	r1, r3
 8001d6e:	d002      	beq.n	8001d76 <__swsetup_r+0x46>
 8001d70:	4628      	mov	r0, r5
 8001d72:	f7ff fb33 	bl	80013dc <_free_r>
 8001d76:	2300      	movs	r3, #0
 8001d78:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d7a:	89a3      	ldrh	r3, [r4, #12]
 8001d7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d80:	81a3      	strh	r3, [r4, #12]
 8001d82:	2300      	movs	r3, #0
 8001d84:	6063      	str	r3, [r4, #4]
 8001d86:	6923      	ldr	r3, [r4, #16]
 8001d88:	6023      	str	r3, [r4, #0]
 8001d8a:	89a3      	ldrh	r3, [r4, #12]
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	81a3      	strh	r3, [r4, #12]
 8001d92:	6923      	ldr	r3, [r4, #16]
 8001d94:	b94b      	cbnz	r3, 8001daa <__swsetup_r+0x7a>
 8001d96:	89a3      	ldrh	r3, [r4, #12]
 8001d98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da0:	d003      	beq.n	8001daa <__swsetup_r+0x7a>
 8001da2:	4621      	mov	r1, r4
 8001da4:	4628      	mov	r0, r5
 8001da6:	f000 f84f 	bl	8001e48 <__smakebuf_r>
 8001daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dae:	f013 0201 	ands.w	r2, r3, #1
 8001db2:	d00a      	beq.n	8001dca <__swsetup_r+0x9a>
 8001db4:	2200      	movs	r2, #0
 8001db6:	60a2      	str	r2, [r4, #8]
 8001db8:	6962      	ldr	r2, [r4, #20]
 8001dba:	4252      	negs	r2, r2
 8001dbc:	61a2      	str	r2, [r4, #24]
 8001dbe:	6922      	ldr	r2, [r4, #16]
 8001dc0:	b942      	cbnz	r2, 8001dd4 <__swsetup_r+0xa4>
 8001dc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001dc6:	d1c5      	bne.n	8001d54 <__swsetup_r+0x24>
 8001dc8:	bd38      	pop	{r3, r4, r5, pc}
 8001dca:	0799      	lsls	r1, r3, #30
 8001dcc:	bf58      	it	pl
 8001dce:	6962      	ldrpl	r2, [r4, #20]
 8001dd0:	60a2      	str	r2, [r4, #8]
 8001dd2:	e7f4      	b.n	8001dbe <__swsetup_r+0x8e>
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	e7f7      	b.n	8001dc8 <__swsetup_r+0x98>
 8001dd8:	2000000c 	.word	0x2000000c

08001ddc <_sbrk_r>:
 8001ddc:	b538      	push	{r3, r4, r5, lr}
 8001dde:	4d06      	ldr	r5, [pc, #24]	@ (8001df8 <_sbrk_r+0x1c>)
 8001de0:	2300      	movs	r3, #0
 8001de2:	4604      	mov	r4, r0
 8001de4:	4608      	mov	r0, r1
 8001de6:	602b      	str	r3, [r5, #0]
 8001de8:	f000 f8b4 	bl	8001f54 <_sbrk>
 8001dec:	1c43      	adds	r3, r0, #1
 8001dee:	d102      	bne.n	8001df6 <_sbrk_r+0x1a>
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	b103      	cbz	r3, 8001df6 <_sbrk_r+0x1a>
 8001df4:	6023      	str	r3, [r4, #0]
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
 8001df8:	200003d0 	.word	0x200003d0

08001dfc <__swhatbuf_r>:
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	460c      	mov	r4, r1
 8001e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e04:	2900      	cmp	r1, #0
 8001e06:	b096      	sub	sp, #88	@ 0x58
 8001e08:	4615      	mov	r5, r2
 8001e0a:	461e      	mov	r6, r3
 8001e0c:	da0d      	bge.n	8001e2a <__swhatbuf_r+0x2e>
 8001e0e:	89a3      	ldrh	r3, [r4, #12]
 8001e10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e14:	f04f 0100 	mov.w	r1, #0
 8001e18:	bf14      	ite	ne
 8001e1a:	2340      	movne	r3, #64	@ 0x40
 8001e1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001e20:	2000      	movs	r0, #0
 8001e22:	6031      	str	r1, [r6, #0]
 8001e24:	602b      	str	r3, [r5, #0]
 8001e26:	b016      	add	sp, #88	@ 0x58
 8001e28:	bd70      	pop	{r4, r5, r6, pc}
 8001e2a:	466a      	mov	r2, sp
 8001e2c:	f000 f848 	bl	8001ec0 <_fstat_r>
 8001e30:	2800      	cmp	r0, #0
 8001e32:	dbec      	blt.n	8001e0e <__swhatbuf_r+0x12>
 8001e34:	9901      	ldr	r1, [sp, #4]
 8001e36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001e3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e3e:	4259      	negs	r1, r3
 8001e40:	4159      	adcs	r1, r3
 8001e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e46:	e7eb      	b.n	8001e20 <__swhatbuf_r+0x24>

08001e48 <__smakebuf_r>:
 8001e48:	898b      	ldrh	r3, [r1, #12]
 8001e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e4c:	079d      	lsls	r5, r3, #30
 8001e4e:	4606      	mov	r6, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	d507      	bpl.n	8001e64 <__smakebuf_r+0x1c>
 8001e54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001e58:	6023      	str	r3, [r4, #0]
 8001e5a:	6123      	str	r3, [r4, #16]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	6163      	str	r3, [r4, #20]
 8001e60:	b003      	add	sp, #12
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e64:	ab01      	add	r3, sp, #4
 8001e66:	466a      	mov	r2, sp
 8001e68:	f7ff ffc8 	bl	8001dfc <__swhatbuf_r>
 8001e6c:	9f00      	ldr	r7, [sp, #0]
 8001e6e:	4605      	mov	r5, r0
 8001e70:	4639      	mov	r1, r7
 8001e72:	4630      	mov	r0, r6
 8001e74:	f7ff fb1e 	bl	80014b4 <_malloc_r>
 8001e78:	b948      	cbnz	r0, 8001e8e <__smakebuf_r+0x46>
 8001e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e7e:	059a      	lsls	r2, r3, #22
 8001e80:	d4ee      	bmi.n	8001e60 <__smakebuf_r+0x18>
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	81a3      	strh	r3, [r4, #12]
 8001e8c:	e7e2      	b.n	8001e54 <__smakebuf_r+0xc>
 8001e8e:	89a3      	ldrh	r3, [r4, #12]
 8001e90:	6020      	str	r0, [r4, #0]
 8001e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e96:	81a3      	strh	r3, [r4, #12]
 8001e98:	9b01      	ldr	r3, [sp, #4]
 8001e9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e9e:	b15b      	cbz	r3, 8001eb8 <__smakebuf_r+0x70>
 8001ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f000 f81d 	bl	8001ee4 <_isatty_r>
 8001eaa:	b128      	cbz	r0, 8001eb8 <__smakebuf_r+0x70>
 8001eac:	89a3      	ldrh	r3, [r4, #12]
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	81a3      	strh	r3, [r4, #12]
 8001eb8:	89a3      	ldrh	r3, [r4, #12]
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	81a5      	strh	r5, [r4, #12]
 8001ebe:	e7cf      	b.n	8001e60 <__smakebuf_r+0x18>

08001ec0 <_fstat_r>:
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4d07      	ldr	r5, [pc, #28]	@ (8001ee0 <_fstat_r+0x20>)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	602b      	str	r3, [r5, #0]
 8001ece:	f000 f821 	bl	8001f14 <_fstat>
 8001ed2:	1c43      	adds	r3, r0, #1
 8001ed4:	d102      	bne.n	8001edc <_fstat_r+0x1c>
 8001ed6:	682b      	ldr	r3, [r5, #0]
 8001ed8:	b103      	cbz	r3, 8001edc <_fstat_r+0x1c>
 8001eda:	6023      	str	r3, [r4, #0]
 8001edc:	bd38      	pop	{r3, r4, r5, pc}
 8001ede:	bf00      	nop
 8001ee0:	200003d0 	.word	0x200003d0

08001ee4 <_isatty_r>:
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4d06      	ldr	r5, [pc, #24]	@ (8001f00 <_isatty_r+0x1c>)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4604      	mov	r4, r0
 8001eec:	4608      	mov	r0, r1
 8001eee:	602b      	str	r3, [r5, #0]
 8001ef0:	f000 f818 	bl	8001f24 <_isatty>
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	d102      	bne.n	8001efe <_isatty_r+0x1a>
 8001ef8:	682b      	ldr	r3, [r5, #0]
 8001efa:	b103      	cbz	r3, 8001efe <_isatty_r+0x1a>
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
 8001f00:	200003d0 	.word	0x200003d0

08001f04 <_close>:
 8001f04:	4b02      	ldr	r3, [pc, #8]	@ (8001f10 <_close+0xc>)
 8001f06:	2258      	movs	r2, #88	@ 0x58
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0e:	4770      	bx	lr
 8001f10:	200003d0 	.word	0x200003d0

08001f14 <_fstat>:
 8001f14:	4b02      	ldr	r3, [pc, #8]	@ (8001f20 <_fstat+0xc>)
 8001f16:	2258      	movs	r2, #88	@ 0x58
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1e:	4770      	bx	lr
 8001f20:	200003d0 	.word	0x200003d0

08001f24 <_isatty>:
 8001f24:	4b02      	ldr	r3, [pc, #8]	@ (8001f30 <_isatty+0xc>)
 8001f26:	2258      	movs	r2, #88	@ 0x58
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200003d0 	.word	0x200003d0

08001f34 <_lseek>:
 8001f34:	4b02      	ldr	r3, [pc, #8]	@ (8001f40 <_lseek+0xc>)
 8001f36:	2258      	movs	r2, #88	@ 0x58
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3e:	4770      	bx	lr
 8001f40:	200003d0 	.word	0x200003d0

08001f44 <_read>:
 8001f44:	4b02      	ldr	r3, [pc, #8]	@ (8001f50 <_read+0xc>)
 8001f46:	2258      	movs	r2, #88	@ 0x58
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4e:	4770      	bx	lr
 8001f50:	200003d0 	.word	0x200003d0

08001f54 <_sbrk>:
 8001f54:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <_sbrk+0x14>)
 8001f56:	6811      	ldr	r1, [r2, #0]
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b909      	cbnz	r1, 8001f60 <_sbrk+0xc>
 8001f5c:	4903      	ldr	r1, [pc, #12]	@ (8001f6c <_sbrk+0x18>)
 8001f5e:	6011      	str	r1, [r2, #0]
 8001f60:	6810      	ldr	r0, [r2, #0]
 8001f62:	4403      	add	r3, r0
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4770      	bx	lr
 8001f68:	200003e0 	.word	0x200003e0
 8001f6c:	200003e8 	.word	0x200003e8

08001f70 <_write>:
 8001f70:	4b02      	ldr	r3, [pc, #8]	@ (8001f7c <_write+0xc>)
 8001f72:	2258      	movs	r2, #88	@ 0x58
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7a:	4770      	bx	lr
 8001f7c:	200003d0 	.word	0x200003d0

08001f80 <_init>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr

08001f8c <_fini>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr
